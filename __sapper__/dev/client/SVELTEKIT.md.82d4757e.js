import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';

/* SVELTEKIT.md generated by Svelte v3.37.0 */

const file$1 = "SVELTEKIT.md";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let a0;
	let t3;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7;
	let pre0;

	let raw0_value = `<code class="language-sh">npm install --save @smui/button
npm install --save @smui/card
# etc...

npm install --save-dev smui-theme</code>` + "";

	let t8;
	let p2;
	let t9;
	let t10;
	let ul;
	let li0;
	let p3;
	let t11;
	let t12;
	let pre1;

	let raw1_value = `<code class="language-null">&quot;prepare&quot;: &quot;npm run vite-workaround&quot;,
&quot;vite-workaround&quot;: &quot;find node_modules/@material/ -name \&quot;*.js.map\&quot; -type f -delete&quot;</code>` + "";

	let t13;
	let li1;
	let p4;
	let a1;
	let t14;
	let t15;
	let t16;
	let pre2;

	let raw2_value = `<code class="language-null">&quot;prepare&quot;: &quot;npm run vite-workaround &amp;&amp; npm run smui-theme&quot;,
&quot;vite-workaround&quot;: &quot;find node_modules/@material/ -name \&quot;*.js.map\&quot; -type f -delete&quot;,
&quot;smui-theme&quot;: &quot;smui-theme compile static/smui.css -i src/theme&quot;</code>` + "";

	let t17;
	let li2;
	let p5;
	let a2;
	let t18;
	let t19;
	let t20;
	let pre3;

	let raw3_value = `<code class="language-null">&quot;prepare&quot;: &quot;npm run vite-workaround &amp;&amp; npm run smui-theme-light &amp;&amp; npm run smui-theme-dark&quot;,
&quot;vite-workaround&quot;: &quot;find node_modules/@material/ -name \&quot;*.js.map\&quot; -type f -delete&quot;,
&quot;smui-theme-light&quot;: &quot;smui-theme compile static/smui.css -i src/theme&quot;,
&quot;smui-theme-dark&quot;: &quot;smui-theme compile static/smui-dark.css -i src/theme/dark&quot;</code>` + "";

	let t21;
	let p6;
	let t22;
	let a3;
	let t23;
	let t24;
	let a4;
	let t25;
	let t26;
	let a5;
	let t27;
	let t28;
	let code0;
	let t29;
	let t30;
	let code1;
	let t31;
	let t32;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("SvelteKit");
			t1 = space();
			p0 = element("p");
			t2 = text("Check out the ");
			a0 = element("a");
			t3 = text("SvelteKit example repo");
			t4 = text(".");
			t5 = space();
			p1 = element("p");
			t6 = text("You will need to install the packages you use individually as well as the theme package.");
			t7 = space();
			pre0 = element("pre");
			t8 = space();
			p2 = element("p");
			t9 = text("You will need to use the Easy Styling Method, and you will need to use one of these sets of prepare scripts.");
			t10 = space();
			ul = element("ul");
			li0 = element("li");
			p3 = element("p");
			t11 = text("For the Default Theme");
			t12 = space();
			pre1 = element("pre");
			t13 = space();
			li1 = element("li");
			p4 = element("p");
			a1 = element("a");
			t14 = text("Custom Theme");
			t15 = text(", without Dark Mode");
			t16 = space();
			pre2 = element("pre");
			t17 = space();
			li2 = element("li");
			p5 = element("p");
			a2 = element("a");
			t18 = text("Custom Theme");
			t19 = text(", with Dark Mode");
			t20 = space();
			pre3 = element("pre");
			t21 = space();
			p6 = element("p");
			t22 = text("If you are on Windows, check out the ");
			a3 = element("a");
			t23 = text("workaround script");
			t24 = text(" and ");
			a4 = element("a");
			t25 = text("how to use it");
			t26 = text(" in the ");
			a5 = element("a");
			t27 = text("SvelteKit example repo");
			t28 = text(" instead, because the ");
			code0 = element("code");
			t29 = text("find");
			t30 = text(" command in the ");
			code1 = element("code");
			t31 = text("vite-workaround");
			t32 = text(" scripts above won’t work for you.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { id: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "SvelteKit");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Check out the ");
			a0 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a0_nodes = children(a0);
			t3 = claim_text(a0_nodes, "SvelteKit example repo");
			a0_nodes.forEach(detach_dev);
			t4 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "You will need to install the packages you use individually as well as the theme package.");
			p1_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			pre0_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t9 = claim_text(p2_nodes, "You will need to use the Easy Styling Method, and you will need to use one of these sets of prepare scripts.");
			p2_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			p3 = claim_element(li0_nodes, "P", {});
			var p3_nodes = children(p3);
			t11 = claim_text(p3_nodes, "For the Default Theme");
			p3_nodes.forEach(detach_dev);
			t12 = claim_space(li0_nodes);
			pre1 = claim_element(li0_nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			pre1_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t13 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			p4 = claim_element(li1_nodes, "P", {});
			var p4_nodes = children(p4);
			a1 = claim_element(p4_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t14 = claim_text(a1_nodes, "Custom Theme");
			a1_nodes.forEach(detach_dev);
			t15 = claim_text(p4_nodes, ", without Dark Mode");
			p4_nodes.forEach(detach_dev);
			t16 = claim_space(li1_nodes);
			pre2 = claim_element(li1_nodes, "PRE", { class: true });
			var pre2_nodes = children(pre2);
			pre2_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t17 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			p5 = claim_element(li2_nodes, "P", {});
			var p5_nodes = children(p5);
			a2 = claim_element(p5_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t18 = claim_text(a2_nodes, "Custom Theme");
			a2_nodes.forEach(detach_dev);
			t19 = claim_text(p5_nodes, ", with Dark Mode");
			p5_nodes.forEach(detach_dev);
			t20 = claim_space(li2_nodes);
			pre3 = claim_element(li2_nodes, "PRE", { class: true });
			var pre3_nodes = children(pre3);
			pre3_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			p6 = claim_element(nodes, "P", {});
			var p6_nodes = children(p6);
			t22 = claim_text(p6_nodes, "If you are on Windows, check out the ");
			a3 = claim_element(p6_nodes, "A", { href: true, rel: true });
			var a3_nodes = children(a3);
			t23 = claim_text(a3_nodes, "workaround script");
			a3_nodes.forEach(detach_dev);
			t24 = claim_text(p6_nodes, " and ");
			a4 = claim_element(p6_nodes, "A", { href: true, rel: true });
			var a4_nodes = children(a4);
			t25 = claim_text(a4_nodes, "how to use it");
			a4_nodes.forEach(detach_dev);
			t26 = claim_text(p6_nodes, " in the ");
			a5 = claim_element(p6_nodes, "A", { href: true, rel: true });
			var a5_nodes = children(a5);
			t27 = claim_text(a5_nodes, "SvelteKit example repo");
			a5_nodes.forEach(detach_dev);
			t28 = claim_text(p6_nodes, " instead, because the ");
			code0 = claim_element(p6_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t29 = claim_text(code0_nodes, "find");
			code0_nodes.forEach(detach_dev);
			t30 = claim_text(p6_nodes, " command in the ");
			code1 = claim_element(p6_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t31 = claim_text(code1_nodes, "vite-workaround");
			code1_nodes.forEach(detach_dev);
			t32 = claim_text(p6_nodes, " scripts above won’t work for you.");
			p6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "id", "sveltekit");
			add_location(h1, file$1, 1, 0, 1);
			attr_dev(a0, "href", "https://github.com/hperrin/smui-example-sveltekit");
			attr_dev(a0, "rel", "nofollow");
			add_location(a0, file$1, 2, 17, 52);
			add_location(p0, file$1, 2, 0, 35);
			add_location(p1, file$1, 6, 0, 164);
			attr_dev(pre0, "class", "language-sh");
			add_location(pre0, file$1, 7, 0, 260);
			add_location(p2, file$1, 12, 0, 440);
			add_location(p3, file$1, 15, 0, 566);
			attr_dev(pre1, "class", "language-null");
			add_location(pre1, file$1, 16, 0, 595);
			add_location(li0, file$1, 14, 0, 561);
			attr_dev(a1, "href", "THEMING.md");
			add_location(a1, file$1, 20, 3, 860);
			add_location(p4, file$1, 20, 0, 857);
			attr_dev(pre2, "class", "language-null");
			add_location(pre2, file$1, 21, 0, 921);
			add_location(li1, file$1, 19, 0, 852);
			attr_dev(a2, "href", "THEMING.md");
			add_location(a2, file$1, 26, 3, 1301);
			add_location(p5, file$1, 26, 0, 1298);
			attr_dev(pre3, "class", "language-null");
			add_location(pre3, file$1, 27, 0, 1359);
			add_location(li2, file$1, 25, 0, 1293);
			add_location(ul, file$1, 13, 0, 556);
			attr_dev(a3, "href", "https://github.com/hperrin/smui-example-sveltekit/blob/master/_helper/vite-workaround.js");
			attr_dev(a3, "rel", "nofollow");
			add_location(a3, file$1, 33, 40, 1924);
			attr_dev(a4, "href", "https://github.com/hperrin/smui-example-sveltekit/blob/master/package.json");
			attr_dev(a4, "rel", "nofollow");
			add_location(a4, file$1, 36, 27, 2069);
			attr_dev(a5, "href", "https://github.com/hperrin/smui-example-sveltekit");
			attr_dev(a5, "rel", "nofollow");
			add_location(a5, file$1, 39, 26, 2199);
			add_location(code0, file$1, 42, 49, 2327);
			add_location(code1, file$1, 42, 82, 2360);
			add_location(p6, file$1, 33, 0, 1884);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			append_dev(p0, a0);
			append_dev(a0, t3);
			append_dev(p0, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert_dev(target, t8, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, p3);
			append_dev(p3, t11);
			append_dev(li0, t12);
			append_dev(li0, pre1);
			pre1.innerHTML = raw1_value;
			append_dev(ul, t13);
			append_dev(ul, li1);
			append_dev(li1, p4);
			append_dev(p4, a1);
			append_dev(a1, t14);
			append_dev(p4, t15);
			append_dev(li1, t16);
			append_dev(li1, pre2);
			pre2.innerHTML = raw2_value;
			append_dev(ul, t17);
			append_dev(ul, li2);
			append_dev(li2, p5);
			append_dev(p5, a2);
			append_dev(a2, t18);
			append_dev(p5, t19);
			append_dev(li2, t20);
			append_dev(li2, pre3);
			pre3.innerHTML = raw3_value;
			insert_dev(target, t21, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t22);
			append_dev(p6, a3);
			append_dev(a3, t23);
			append_dev(p6, t24);
			append_dev(p6, a4);
			append_dev(a4, t25);
			append_dev(p6, t26);
			append_dev(p6, a5);
			append_dev(a5, t27);
			append_dev(p6, t28);
			append_dev(p6, code0);
			append_dev(code0, t29);
			append_dev(p6, t30);
			append_dev(p6, code1);
			append_dev(code1, t31);
			append_dev(p6, t32);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(ul);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(p6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SVELTEKIT", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SVELTEKIT> was created with unknown prop '${key}'`);
	});

	return [];
}

class SVELTEKIT extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SVELTEKIT",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/SVELTEKIT.md.svelte generated by Svelte v3.37.0 */
const file = "src/routes/SVELTEKIT.md.svelte";

function create_fragment(ctx) {
	let t;
	let section;
	let sveltekit;
	let current;
	sveltekit = new SVELTEKIT({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			create_component(sveltekit.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-8tn3sd\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(sveltekit.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "SvelteKit - SMUI";
			attr_dev(section, "class", "markdown");
			add_location(section, file, 4, 0, 64);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			mount_component(sveltekit, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(sveltekit.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sveltekit.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_component(sveltekit);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SVELTEKIT_md", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SVELTEKIT_md> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ SvelteKit: SVELTEKIT });
	return [];
}

class SVELTEKIT_md extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SVELTEKIT_md",
			options,
			id: create_fragment.name
		});
	}
}

export default SVELTEKIT_md;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU1ZFTFRFS0lULm1kLjgyZDQ3NTdlLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
