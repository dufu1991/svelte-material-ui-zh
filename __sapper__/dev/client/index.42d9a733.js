import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';

/* src/routes/demo/typography/_Typography.svelte generated by Svelte v3.37.0 */

const file$1 = "src/routes/demo/typography/_Typography.svelte";

function create_fragment$1(ctx) {
	let div0;
	let t0;
	let t1;
	let div1;
	let t2;
	let t3;
	let div2;
	let t4;
	let t5;
	let div3;
	let t6;
	let t7;
	let div4;
	let t8;
	let t9;
	let div5;
	let t10;
	let t11;
	let div6;
	let t12;
	let t13;
	let div7;
	let t14;
	let t15;
	let div8;
	let t16;
	let t17;
	let div9;
	let t18;
	let t19;
	let div10;
	let t20;
	let t21;
	let div11;
	let t22;
	let t23;
	let div12;
	let t24;
	let t25;
	let div13;
	let small;
	let t26;
	let t27;
	let big;
	let t28;
	let t29;
	let sup;
	let t30;
	let t31;
	let sub;
	let t32;
	let t33;
	let strong;
	let t34;
	let t35;
	let em;
	let t36;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text("Headline 1");
			t1 = space();
			div1 = element("div");
			t2 = text("Headline 2");
			t3 = space();
			div2 = element("div");
			t4 = text("Headline 3");
			t5 = space();
			div3 = element("div");
			t6 = text("Headline 4");
			t7 = space();
			div4 = element("div");
			t8 = text("Headline 5");
			t9 = space();
			div5 = element("div");
			t10 = text("Headline 6");
			t11 = space();
			div6 = element("div");
			t12 = text("Subtitle 1");
			t13 = space();
			div7 = element("div");
			t14 = text("Subtitle 2");
			t15 = space();
			div8 = element("div");
			t16 = text("Body 1");
			t17 = space();
			div9 = element("div");
			t18 = text("Body 2");
			t19 = space();
			div10 = element("div");
			t20 = text("Caption");
			t21 = space();
			div11 = element("div");
			t22 = text("Button");
			t23 = space();
			div12 = element("div");
			t24 = text("Overline");
			t25 = space();
			div13 = element("div");
			small = element("small");
			t26 = text("small");
			t27 = space();
			big = element("big");
			t28 = text("big");
			t29 = space();
			sup = element("sup");
			t30 = text("sup");
			t31 = space();
			sub = element("sub");
			t32 = text("sub");
			t33 = space();
			strong = element("strong");
			t34 = text("strong");
			t35 = space();
			em = element("em");
			t36 = text("em");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Headline 1");
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t2 = claim_text(div1_nodes, "Headline 2");
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t4 = claim_text(div2_nodes, "Headline 3");
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t6 = claim_text(div3_nodes, "Headline 4");
			div3_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t8 = claim_text(div4_nodes, "Headline 5");
			div4_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t10 = claim_text(div5_nodes, "Headline 6");
			div5_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			t12 = claim_text(div6_nodes, "Subtitle 1");
			div6_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			t14 = claim_text(div7_nodes, "Subtitle 2");
			div7_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			t16 = claim_text(div8_nodes, "Body 1");
			div8_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			t18 = claim_text(div9_nodes, "Body 2");
			div9_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			div10 = claim_element(nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			t20 = claim_text(div10_nodes, "Caption");
			div10_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			div11 = claim_element(nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			t22 = claim_text(div11_nodes, "Button");
			div11_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);
			div12 = claim_element(nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			t24 = claim_text(div12_nodes, "Overline");
			div12_nodes.forEach(detach_dev);
			t25 = claim_space(nodes);
			div13 = claim_element(nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			small = claim_element(div13_nodes, "SMALL", {});
			var small_nodes = children(small);
			t26 = claim_text(small_nodes, "small");
			small_nodes.forEach(detach_dev);
			t27 = claim_space(div13_nodes);
			big = claim_element(div13_nodes, "BIG", {});
			var big_nodes = children(big);
			t28 = claim_text(big_nodes, "big");
			big_nodes.forEach(detach_dev);
			t29 = claim_space(div13_nodes);
			sup = claim_element(div13_nodes, "SUP", {});
			var sup_nodes = children(sup);
			t30 = claim_text(sup_nodes, "sup");
			sup_nodes.forEach(detach_dev);
			t31 = claim_space(div13_nodes);
			sub = claim_element(div13_nodes, "SUB", {});
			var sub_nodes = children(sub);
			t32 = claim_text(sub_nodes, "sub");
			sub_nodes.forEach(detach_dev);
			t33 = claim_space(div13_nodes);
			strong = claim_element(div13_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t34 = claim_text(strong_nodes, "strong");
			strong_nodes.forEach(detach_dev);
			t35 = claim_space(div13_nodes);
			em = claim_element(div13_nodes, "EM", {});
			var em_nodes = children(em);
			t36 = claim_text(em_nodes, "em");
			em_nodes.forEach(detach_dev);
			div13_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "mdc-typography--headline1");
			add_location(div0, file$1, 5, 0, 135);
			attr_dev(div1, "class", "mdc-typography--headline2");
			add_location(div1, file$1, 7, 0, 192);
			attr_dev(div2, "class", "mdc-typography--headline3");
			add_location(div2, file$1, 9, 0, 249);
			attr_dev(div3, "class", "mdc-typography--headline4");
			add_location(div3, file$1, 11, 0, 306);
			attr_dev(div4, "class", "mdc-typography--headline5");
			add_location(div4, file$1, 13, 0, 363);
			attr_dev(div5, "class", "mdc-typography--headline6");
			add_location(div5, file$1, 15, 0, 420);
			attr_dev(div6, "class", "mdc-typography--subtitle1");
			add_location(div6, file$1, 17, 0, 477);
			attr_dev(div7, "class", "mdc-typography--subtitle2");
			add_location(div7, file$1, 19, 0, 534);
			attr_dev(div8, "class", "mdc-typography--body1");
			add_location(div8, file$1, 21, 0, 591);
			attr_dev(div9, "class", "mdc-typography--body2");
			add_location(div9, file$1, 23, 0, 640);
			attr_dev(div10, "class", "mdc-typography--caption");
			add_location(div10, file$1, 25, 0, 689);
			attr_dev(div11, "class", "mdc-typography--button");
			add_location(div11, file$1, 27, 0, 741);
			attr_dev(div12, "class", "mdc-typography--overline");
			add_location(div12, file$1, 29, 0, 791);
			add_location(small, file$1, 32, 2, 883);
			add_location(big, file$1, 33, 2, 906);
			add_location(sup, file$1, 34, 2, 923);
			add_location(sub, file$1, 35, 2, 940);
			add_location(strong, file$1, 36, 2, 957);
			add_location(em, file$1, 37, 2, 983);
			attr_dev(div13, "class", "mdc-typography--body1");
			add_location(div13, file$1, 31, 0, 845);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, div7, anchor);
			append_dev(div7, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, div8, anchor);
			append_dev(div8, t16);
			insert_dev(target, t17, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, t18);
			insert_dev(target, t19, anchor);
			insert_dev(target, div10, anchor);
			append_dev(div10, t20);
			insert_dev(target, t21, anchor);
			insert_dev(target, div11, anchor);
			append_dev(div11, t22);
			insert_dev(target, t23, anchor);
			insert_dev(target, div12, anchor);
			append_dev(div12, t24);
			insert_dev(target, t25, anchor);
			insert_dev(target, div13, anchor);
			append_dev(div13, small);
			append_dev(small, t26);
			append_dev(div13, t27);
			append_dev(div13, big);
			append_dev(big, t28);
			append_dev(div13, t29);
			append_dev(div13, sup);
			append_dev(sup, t30);
			append_dev(div13, t31);
			append_dev(div13, sub);
			append_dev(sub, t32);
			append_dev(div13, t33);
			append_dev(div13, strong);
			append_dev(strong, t34);
			append_dev(div13, t35);
			append_dev(div13, em);
			append_dev(em, t36);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(div5);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(div6);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(div7);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(div8);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(div9);
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(div10);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(div11);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(div12);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(div13);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Typography", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Typography> was created with unknown prop '${key}'`);
	});

	return [];
}

class Typography extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Typography",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/typography/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/typography/index.svelte";

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo;
	let current;

	demo = new Demo({
			props: {
				component: Typography,
				files: ["typography/_Typography.svelte", "typography/_Typography.scss"]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Typography");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @material/typography");
			t4 = space();
			create_component(demo.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-19qn0g1\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Typography");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @material/typography");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Typography - SMUI";
			add_location(h2, file, 5, 2, 77);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 100);
			add_location(section, file, 4, 0, 65);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(demo.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Typography", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Typography> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Typography });
	return [];
}

class Typography_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Typography_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Typography_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNDJkOWE3MzMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby90eXBvZ3JhcGh5L2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5UeXBvZ3JhcGh5IC0gU01VSTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48c2VjdGlvbj5cbiAgPGgyPlR5cG9ncmFwaHk8L2gyPlxuXG4gIDxwcmUgY2xhc3M9XCJkZW1vLXNwYWNlZFwiPm5wbSBpIC1EIEBtYXRlcmlhbC90eXBvZ3JhcGh5PC9wcmU+XG5cbiAgPERlbW9cbiAgICBjb21wb25lbnQ9e1R5cG9ncmFwaHl9XG4gICAgZmlsZXM9e1sndHlwb2dyYXBoeS9fVHlwb2dyYXBoeS5zdmVsdGUnLCAndHlwb2dyYXBoeS9fVHlwb2dyYXBoeS5zY3NzJ119XG4gIC8+XG48L3NlY3Rpb24+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBEZW1vIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvRGVtby5zdmVsdGUnO1xuICBpbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuL19UeXBvZ3JhcGh5LnN2ZWx0ZSc7XG48L3NjcmlwdD5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQVVlLFVBQVU7WUFDYiwrQkFBK0IsRUFBRSw2QkFBNkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
