import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';

/* INSTALL.md generated by Svelte v3.37.0 */

const file$1 = "INSTALL.md";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let pre0;

	let raw0_value = `<code class="language-sh">npm install --save @smui/button
npm install --save @smui/card
# etc...</code>` + "";

	let t4;
	let p1;
	let t5;
	let a0;
	let t6;
	let t7;
	let t8;
	let h20;
	let t9;
	let t10;
	let p2;
	let t11;
	let t12;
	let p3;
	let t13;
	let a1;
	let t14;
	let t15;
	let t16;
	let pre1;

	let raw1_value = `<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'@smui/button'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>` + "";

	let t17;
	let p4;
	let t18;
	let a2;
	let t19;
	let t20;
	let t21;
	let pre2;

	let raw2_value = `<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'@smui/button/styled'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>` + "";

	let t22;
	let p5;
	let t23;
	let t24;
	let h21;
	let t25;
	let t26;
	let p6;
	let t27;
	let t28;
	let pre3;

	let raw3_value = `<code class="language-html"><span class="token comment">&lt;!-- Material Icons --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/icon?family=Material+Icons<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- Roboto --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Roboto:300,400,500,600,700<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- Roboto Mono --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Roboto+Mono<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span></code>` + "";

	let t29;
	let h22;
	let t30;
	let t31;
	let p7;
	let t32;
	let em;
	let t33;
	let t34;
	let a3;
	let t35;
	let t36;
	let t37;
	let pre4;
	let raw4_value = `<code class="language-sh">npm install --save svelte-material-ui</code>` + "";
	let t38;
	let pre5;
	let raw5_value = `<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/svelte-material-ui/bare.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>` + "";
	let t39;
	let p8;
	let t40;
	let t41;
	let pre6;

	let raw6_value = `<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/svelte-material-ui@4.0.0/bare.min.css<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span></code>` + "";

	let t42;
	let p9;
	let t43;
	let t44;
	let h23;
	let t45;
	let t46;
	let p10;
	let t47;
	let a4;
	let t48;
	let t49;
	let t50;
	let h24;
	let t51;
	let t52;
	let p11;
	let t53;
	let a5;
	let t54;
	let t55;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Installation");
			t1 = space();
			p0 = element("p");
			t2 = text("To get started, install the SMUI packages.");
			t3 = space();
			pre0 = element("pre");
			t4 = space();
			p1 = element("p");
			t5 = text("You can also ");
			a0 = element("a");
			t6 = text("use SMUI in the Svelte REPL");
			t7 = text(".");
			t8 = space();
			h20 = element("h2");
			t9 = text("Importing Components");
			t10 = space();
			p2 = element("p");
			t11 = text("You will always import Svelte components from the individual packages.");
			t12 = space();
			p3 = element("p");
			t13 = text("This method will only include the JavaScript. Use this for the Default Theme or the ");
			a1 = element("a");
			t14 = text("Easy Styling Method");
			t15 = text(".");
			t16 = space();
			pre1 = element("pre");
			t17 = space();
			p4 = element("p");
			t18 = text("This method will include Sass files as well. Use this for the ");
			a2 = element("a");
			t19 = text("Advanced Styling Method");
			t20 = text(".");
			t21 = space();
			pre2 = element("pre");
			t22 = space();
			p5 = element("p");
			t23 = text("Notice that adding “/styled” to your import path means Sass files will be imported.");
			t24 = space();
			h21 = element("h2");
			t25 = text("Material Fonts");
			t26 = space();
			p6 = element("p");
			t27 = text("If you want the Material Icon, Roboto, and Roboto Mono fonts, be sure to include these stylesheets (or include them from a package).");
			t28 = space();
			pre3 = element("pre");
			t29 = space();
			h22 = element("h2");
			t30 = text("Using the Default Theme");
			t31 = space();
			p7 = element("p");
			t32 = text("You can use the prebuilt “bare.css” file from the “svelte-material-ui” package. If you use this option you ");
			em = element("em");
			t33 = text("can");
			t34 = text(" mostly customize your theme, but your ");
			a3 = element("a");
			t35 = text("theming options");
			t36 = text(" are more limited.");
			t37 = space();
			pre4 = element("pre");
			t38 = space();
			pre5 = element("pre");
			t39 = space();
			p8 = element("p");
			t40 = text("If that’s not working (probably because your dependencies aren’t copied to your build folder), you can also use a CDN. Just be sure you update the version here when you update to a new version of SMUI.");
			t41 = space();
			pre6 = element("pre");
			t42 = space();
			p9 = element("p");
			t43 = text("You can also use the “bare.css” files from the individual packages if you don’t use many components and want smaller file sizes.");
			t44 = space();
			h23 = element("h2");
			t45 = text("Using a Custom Theme");
			t46 = space();
			p10 = element("p");
			t47 = text("Check out the ");
			a4 = element("a");
			t48 = text("Sass instructions");
			t49 = text(" for setting up a custom theme.");
			t50 = space();
			h24 = element("h2");
			t51 = text("SvelteKit");
			t52 = space();
			p11 = element("p");
			t53 = text("For SvelteKit, check out the ");
			a5 = element("a");
			t54 = text("SvelteKit instructions");
			t55 = text(".");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { id: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Installation");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "To get started, install the SMUI packages.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			pre0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, "You can also ");
			a0 = claim_element(p1_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t6 = claim_text(a0_nodes, "use SMUI in the Svelte REPL");
			a0_nodes.forEach(detach_dev);
			t7 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			h20 = claim_element(nodes, "H2", { id: true });
			var h20_nodes = children(h20);
			t9 = claim_text(h20_nodes, "Importing Components");
			h20_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "You will always import Svelte components from the individual packages.");
			p2_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t13 = claim_text(p3_nodes, "This method will only include the JavaScript. Use this for the Default Theme or the ");
			a1 = claim_element(p3_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t14 = claim_text(a1_nodes, "Easy Styling Method");
			a1_nodes.forEach(detach_dev);
			t15 = claim_text(p3_nodes, ".");
			p3_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			pre1_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t18 = claim_text(p4_nodes, "This method will include Sass files as well. Use this for the ");
			a2 = claim_element(p4_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t19 = claim_text(a2_nodes, "Advanced Styling Method");
			a2_nodes.forEach(detach_dev);
			t20 = claim_text(p4_nodes, ".");
			p4_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			pre2 = claim_element(nodes, "PRE", { class: true });
			var pre2_nodes = children(pre2);
			pre2_nodes.forEach(detach_dev);
			t22 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children(p5);
			t23 = claim_text(p5_nodes, "Notice that adding “/styled” to your import path means Sass files will be imported.");
			p5_nodes.forEach(detach_dev);
			t24 = claim_space(nodes);
			h21 = claim_element(nodes, "H2", { id: true });
			var h21_nodes = children(h21);
			t25 = claim_text(h21_nodes, "Material Fonts");
			h21_nodes.forEach(detach_dev);
			t26 = claim_space(nodes);
			p6 = claim_element(nodes, "P", {});
			var p6_nodes = children(p6);
			t27 = claim_text(p6_nodes, "If you want the Material Icon, Roboto, and Roboto Mono fonts, be sure to include these stylesheets (or include them from a package).");
			p6_nodes.forEach(detach_dev);
			t28 = claim_space(nodes);
			pre3 = claim_element(nodes, "PRE", { class: true });
			var pre3_nodes = children(pre3);
			pre3_nodes.forEach(detach_dev);
			t29 = claim_space(nodes);
			h22 = claim_element(nodes, "H2", { id: true });
			var h22_nodes = children(h22);
			t30 = claim_text(h22_nodes, "Using the Default Theme");
			h22_nodes.forEach(detach_dev);
			t31 = claim_space(nodes);
			p7 = claim_element(nodes, "P", {});
			var p7_nodes = children(p7);
			t32 = claim_text(p7_nodes, "You can use the prebuilt “bare.css” file from the “svelte-material-ui” package. If you use this option you ");
			em = claim_element(p7_nodes, "EM", {});
			var em_nodes = children(em);
			t33 = claim_text(em_nodes, "can");
			em_nodes.forEach(detach_dev);
			t34 = claim_text(p7_nodes, " mostly customize your theme, but your ");
			a3 = claim_element(p7_nodes, "A", { href: true });
			var a3_nodes = children(a3);
			t35 = claim_text(a3_nodes, "theming options");
			a3_nodes.forEach(detach_dev);
			t36 = claim_text(p7_nodes, " are more limited.");
			p7_nodes.forEach(detach_dev);
			t37 = claim_space(nodes);
			pre4 = claim_element(nodes, "PRE", { class: true });
			var pre4_nodes = children(pre4);
			pre4_nodes.forEach(detach_dev);
			t38 = claim_space(nodes);
			pre5 = claim_element(nodes, "PRE", { class: true });
			var pre5_nodes = children(pre5);
			pre5_nodes.forEach(detach_dev);
			t39 = claim_space(nodes);
			p8 = claim_element(nodes, "P", {});
			var p8_nodes = children(p8);
			t40 = claim_text(p8_nodes, "If that’s not working (probably because your dependencies aren’t copied to your build folder), you can also use a CDN. Just be sure you update the version here when you update to a new version of SMUI.");
			p8_nodes.forEach(detach_dev);
			t41 = claim_space(nodes);
			pre6 = claim_element(nodes, "PRE", { class: true });
			var pre6_nodes = children(pre6);
			pre6_nodes.forEach(detach_dev);
			t42 = claim_space(nodes);
			p9 = claim_element(nodes, "P", {});
			var p9_nodes = children(p9);
			t43 = claim_text(p9_nodes, "You can also use the “bare.css” files from the individual packages if you don’t use many components and want smaller file sizes.");
			p9_nodes.forEach(detach_dev);
			t44 = claim_space(nodes);
			h23 = claim_element(nodes, "H2", { id: true });
			var h23_nodes = children(h23);
			t45 = claim_text(h23_nodes, "Using a Custom Theme");
			h23_nodes.forEach(detach_dev);
			t46 = claim_space(nodes);
			p10 = claim_element(nodes, "P", {});
			var p10_nodes = children(p10);
			t47 = claim_text(p10_nodes, "Check out the ");
			a4 = claim_element(p10_nodes, "A", { href: true });
			var a4_nodes = children(a4);
			t48 = claim_text(a4_nodes, "Sass instructions");
			a4_nodes.forEach(detach_dev);
			t49 = claim_text(p10_nodes, " for setting up a custom theme.");
			p10_nodes.forEach(detach_dev);
			t50 = claim_space(nodes);
			h24 = claim_element(nodes, "H2", { id: true });
			var h24_nodes = children(h24);
			t51 = claim_text(h24_nodes, "SvelteKit");
			h24_nodes.forEach(detach_dev);
			t52 = claim_space(nodes);
			p11 = claim_element(nodes, "P", {});
			var p11_nodes = children(p11);
			t53 = claim_text(p11_nodes, "For SvelteKit, check out the ");
			a5 = claim_element(p11_nodes, "A", { href: true });
			var a5_nodes = children(a5);
			t54 = claim_text(a5_nodes, "SvelteKit instructions");
			a5_nodes.forEach(detach_dev);
			t55 = claim_text(p11_nodes, ".");
			p11_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "id", "installation");
			add_location(h1, file$1, 1, 0, 1);
			add_location(p0, file$1, 2, 0, 41);
			attr_dev(pre0, "class", "language-sh");
			add_location(pre0, file$1, 3, 0, 91);
			attr_dev(a0, "href", "REPL.md");
			add_location(a0, file$1, 6, 16, 252);
			add_location(p1, file$1, 6, 0, 236);
			attr_dev(h20, "id", "importing-components");
			add_location(h20, file$1, 7, 0, 307);
			add_location(p2, file$1, 8, 0, 363);
			attr_dev(a1, "href", "SASS.md#easy-styling-method");
			add_location(a1, file$1, 9, 87, 528);
			add_location(p3, file$1, 9, 0, 441);
			attr_dev(pre1, "class", "language-svelte");
			add_location(pre1, file$1, 12, 0, 598);
			attr_dev(a2, "href", "SASS.md#advanced-styling-method");
			add_location(a2, file$1, 15, 65, 1311);
			add_location(p4, file$1, 15, 0, 1246);
			attr_dev(pre2, "class", "language-svelte");
			add_location(pre2, file$1, 18, 0, 1389);
			add_location(p5, file$1, 21, 0, 2044);
			attr_dev(h21, "id", "material-fonts");
			add_location(h21, file$1, 22, 0, 2135);
			add_location(p6, file$1, 23, 0, 2179);
			attr_dev(pre3, "class", "language-html");
			add_location(pre3, file$1, 24, 0, 2319);
			attr_dev(h22, "id", "using-the-default-theme");
			add_location(h22, file$1, 39, 0, 4511);
			add_location(em, file$1, 40, 110, 4683);
			attr_dev(a3, "href", "THEMING.md#theming-the-bare-css");
			add_location(a3, file$1, 40, 161, 4734);
			add_location(p7, file$1, 40, 0, 4573);
			attr_dev(pre4, "class", "language-sh");
			add_location(pre4, file$1, 43, 0, 4821);
			attr_dev(pre5, "class", "language-html");
			add_location(pre5, file$1, 44, 0, 4933);
			add_location(p8, file$1, 45, 0, 5636);
			attr_dev(pre6, "class", "language-html");
			add_location(pre6, file$1, 46, 0, 5845);
			add_location(p9, file$1, 50, 0, 6578);
			attr_dev(h23, "id", "using-a-custom-theme");
			add_location(h23, file$1, 51, 0, 6714);
			attr_dev(a4, "href", "SASS.md");
			add_location(a4, file$1, 52, 17, 6787);
			add_location(p10, file$1, 52, 0, 6770);
			attr_dev(h24, "id", "sveltekit");
			add_location(h24, file$1, 53, 0, 6862);
			attr_dev(a5, "href", "SVELTEKIT.md");
			add_location(a5, file$1, 54, 32, 6928);
			add_location(p11, file$1, 54, 0, 6896);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert_dev(target, t4, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t5);
			append_dev(p1, a0);
			append_dev(a0, t6);
			append_dev(p1, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			insert_dev(target, t12, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t13);
			append_dev(p3, a1);
			append_dev(a1, t14);
			append_dev(p3, t15);
			insert_dev(target, t16, anchor);
			insert_dev(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			insert_dev(target, t17, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t18);
			append_dev(p4, a2);
			append_dev(a2, t19);
			append_dev(p4, t20);
			insert_dev(target, t21, anchor);
			insert_dev(target, pre2, anchor);
			pre2.innerHTML = raw2_value;
			insert_dev(target, t22, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, t23);
			insert_dev(target, t24, anchor);
			insert_dev(target, h21, anchor);
			append_dev(h21, t25);
			insert_dev(target, t26, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t27);
			insert_dev(target, t28, anchor);
			insert_dev(target, pre3, anchor);
			pre3.innerHTML = raw3_value;
			insert_dev(target, t29, anchor);
			insert_dev(target, h22, anchor);
			append_dev(h22, t30);
			insert_dev(target, t31, anchor);
			insert_dev(target, p7, anchor);
			append_dev(p7, t32);
			append_dev(p7, em);
			append_dev(em, t33);
			append_dev(p7, t34);
			append_dev(p7, a3);
			append_dev(a3, t35);
			append_dev(p7, t36);
			insert_dev(target, t37, anchor);
			insert_dev(target, pre4, anchor);
			pre4.innerHTML = raw4_value;
			insert_dev(target, t38, anchor);
			insert_dev(target, pre5, anchor);
			pre5.innerHTML = raw5_value;
			insert_dev(target, t39, anchor);
			insert_dev(target, p8, anchor);
			append_dev(p8, t40);
			insert_dev(target, t41, anchor);
			insert_dev(target, pre6, anchor);
			pre6.innerHTML = raw6_value;
			insert_dev(target, t42, anchor);
			insert_dev(target, p9, anchor);
			append_dev(p9, t43);
			insert_dev(target, t44, anchor);
			insert_dev(target, h23, anchor);
			append_dev(h23, t45);
			insert_dev(target, t46, anchor);
			insert_dev(target, p10, anchor);
			append_dev(p10, t47);
			append_dev(p10, a4);
			append_dev(a4, t48);
			append_dev(p10, t49);
			insert_dev(target, t50, anchor);
			insert_dev(target, h24, anchor);
			append_dev(h24, t51);
			insert_dev(target, t52, anchor);
			insert_dev(target, p11, anchor);
			append_dev(p11, t53);
			append_dev(p11, a5);
			append_dev(a5, t54);
			append_dev(p11, t55);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(pre1);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(pre2);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(p5);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(h21);
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(p6);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(pre3);
			if (detaching) detach_dev(t29);
			if (detaching) detach_dev(h22);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(p7);
			if (detaching) detach_dev(t37);
			if (detaching) detach_dev(pre4);
			if (detaching) detach_dev(t38);
			if (detaching) detach_dev(pre5);
			if (detaching) detach_dev(t39);
			if (detaching) detach_dev(p8);
			if (detaching) detach_dev(t41);
			if (detaching) detach_dev(pre6);
			if (detaching) detach_dev(t42);
			if (detaching) detach_dev(p9);
			if (detaching) detach_dev(t44);
			if (detaching) detach_dev(h23);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(p10);
			if (detaching) detach_dev(t50);
			if (detaching) detach_dev(h24);
			if (detaching) detach_dev(t52);
			if (detaching) detach_dev(p11);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("INSTALL", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<INSTALL> was created with unknown prop '${key}'`);
	});

	return [];
}

class INSTALL extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "INSTALL",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/INSTALL.md.svelte generated by Svelte v3.37.0 */
const file = "src/routes/INSTALL.md.svelte";

function create_fragment(ctx) {
	let t;
	let section;
	let install;
	let current;
	install = new INSTALL({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			create_component(install.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ahr4be\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(install.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Installation - SMUI";
			attr_dev(section, "class", "markdown");
			add_location(section, file, 4, 0, 67);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			mount_component(install, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(install.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(install.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_component(install);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("INSTALL_md", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<INSTALL_md> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Install: INSTALL });
	return [];
}

class INSTALL_md extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "INSTALL_md",
			options,
			id: create_fragment.name
		});
	}
}

export default INSTALL_md;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSU5TVEFMTC5tZC4wNTQ0YjVmZC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
