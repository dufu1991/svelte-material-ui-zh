import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, ag as validate_each_argument, v as validate_slots, p as element, t as text, x as claim_element, y as children, z as claim_text, u as detach_dev, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, aj as destroy_each, a6 as binding_callbacks, ak as bind, q as create_component, o as space, A as claim_component, w as claim_space, b5 as toggle_class, H as mount_component, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { C as Checkbox } from './Checkbox.52871e38.js';
import { F as FormField } from './FormField.2971fa15.js';

/* src/routes/demo/elevation/_Elevation.svelte generated by Svelte v3.37.0 */

const file$2 = "src/routes/demo/elevation/_Elevation.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (7:2) {#each [...Array(24)].map((v, i) => i + 1) as n}
function create_each_block(ctx) {
	let div;
	let t0;
	let t1_value = /*n*/ ctx[0] + "";
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Elevation: ");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "Elevation: ");
			t1 = claim_text(div_nodes, t1_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mdc-elevation--z" + /*n*/ ctx[0] + " flexy-boy" + " svelte-taibyp");
			add_location(div, file$2, 7, 4, 203);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(7:2) {#each [...Array(24)].map((v, i) => i + 1) as n}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let each_value = [...Array(24)].map(func);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flexy-dad svelte-taibyp");
			add_location(div, file$2, 5, 0, 124);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*Array*/ 0) {
				each_value = [...Array(24)].map(func);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = (v, i) => i + 1;

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Elevation", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Elevation> was created with unknown prop '${key}'`);
	});

	return [];
}

class Elevation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Elevation",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/elevation/_TransitionsAndColor.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/elevation/_TransitionsAndColor.svelte";

// (6:0) <FormField>
function create_default_slot$1(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[1](value);
	}

	let checkbox_props = {};

	if (/*liftMeUp*/ ctx[0] !== void 0) {
		checkbox_props.checked = /*liftMeUp*/ ctx[0];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*liftMeUp*/ 1) {
				updating_checked = true;
				checkbox_changes.checked = /*liftMeUp*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(6:0) <FormField>",
		ctx
	});

	return block;
}

// (8:2) 
function create_label_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("You raise me up, so I can stand on mountains!");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "You raise me up, so I can stand on mountains!");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$1, 7, 2, 177);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(8:2) ",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let formfield;
	let t0;
	let br0;
	let br1;
	let t1;
	let div3;
	let div0;
	let t2;
	let t3;
	let div1;
	let t4;
	let t5;
	let div2;
	let t6;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
			t0 = space();
			br0 = element("br");
			br1 = element("br");
			t1 = space();
			div3 = element("div");
			div0 = element("div");
			t2 = text("Standard");
			t3 = space();
			div1 = element("div");
			t4 = text("Primary");
			t5 = space();
			div2 = element("div");
			t6 = text("Secondary");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
			t0 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			br1 = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t2 = claim_text(div0_nodes, "Standard");
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t4 = claim_text(div1_nodes, "Primary");
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t6 = claim_text(div2_nodes, "Secondary");
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file$1, 10, 0, 263);
			add_location(br1, file$1, 10, 6, 269);
			attr_dev(div0, "class", "mdc-elevation-transition rounded flexy-boy svelte-1382yuk");
			toggle_class(div0, "mdc-elevation--z4", /*liftMeUp*/ ctx[0]);
			add_location(div0, file$1, 13, 2, 303);
			attr_dev(div1, "class", "my-primary mdc-elevation-transition rounded flexy-boy svelte-1382yuk");
			toggle_class(div1, "elevated", /*liftMeUp*/ ctx[0]);
			add_location(div1, file$1, 19, 2, 430);
			attr_dev(div2, "class", "my-secondary mdc-elevation-transition rounded flexy-boy svelte-1382yuk");
			toggle_class(div2, "elevated", /*liftMeUp*/ ctx[0]);
			add_location(div2, file$1, 25, 2, 558);
			attr_dev(div3, "class", "flexy-dad svelte-1382yuk");
			add_location(div3, file$1, 12, 0, 277);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t2);
			append_dev(div3, t3);
			append_dev(div3, div1);
			append_dev(div1, t4);
			append_dev(div3, t5);
			append_dev(div3, div2);
			append_dev(div2, t6);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield_changes = {};

			if (dirty & /*$$scope, liftMeUp*/ 5) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);

			if (dirty & /*liftMeUp*/ 1) {
				toggle_class(div0, "mdc-elevation--z4", /*liftMeUp*/ ctx[0]);
			}

			if (dirty & /*liftMeUp*/ 1) {
				toggle_class(div1, "elevated", /*liftMeUp*/ ctx[0]);
			}

			if (dirty & /*liftMeUp*/ 1) {
				toggle_class(div2, "elevated", /*liftMeUp*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TransitionsAndColor", slots, []);
	let liftMeUp = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TransitionsAndColor> was created with unknown prop '${key}'`);
	});

	function checkbox_checked_binding(value) {
		liftMeUp = value;
		$$invalidate(0, liftMeUp);
	}

	$$self.$capture_state = () => ({ Checkbox, FormField, liftMeUp });

	$$self.$inject_state = $$props => {
		if ("liftMeUp" in $$props) $$invalidate(0, liftMeUp = $$props.liftMeUp);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [liftMeUp, checkbox_checked_binding];
}

class TransitionsAndColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TransitionsAndColor",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/elevation/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/elevation/index.svelte";

// (15:2) <Demo     component={TransitionsAndColor}     files={[       'elevation/_TransitionsAndColor.svelte',       'elevation/_TransitionsAndColor.scss',     ]}   >
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Transitions and color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Transitions and color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(15:2) <Demo     component={TransitionsAndColor}     files={[       'elevation/_TransitionsAndColor.svelte',       'elevation/_TransitionsAndColor.scss',     ]}   >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let current;

	demo0 = new Demo({
			props: {
				component: Elevation,
				files: ["elevation/_Elevation.svelte", "elevation/_Elevation.scss"]
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: TransitionsAndColor,
				files: [
					"elevation/_TransitionsAndColor.svelte",
					"elevation/_TransitionsAndColor.scss"
				],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Elevation");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @material/elevation");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-79ikuf\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Elevation");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @material/elevation");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Elevation - SMUI";
			add_location(h2, file, 5, 2, 76);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 98);
			add_location(section, file, 4, 0, 64);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Elevation", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Elevation> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Elevation, TransitionsAndColor });
	return [];
}

class Elevation_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Elevation_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Elevation_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNTQ4YmQ0NjguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9lbGV2YXRpb24vX0VsZXZhdGlvbi5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2RlbW8vZWxldmF0aW9uL19UcmFuc2l0aW9uc0FuZENvbG9yLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9lbGV2YXRpb24vaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjwhLS1cbiAgWW91IG5lZWQgdG8gaW1wb3J0IGBAbWF0ZXJpYWwvZWxldmF0aW9uL21kYy1lbGV2YXRpb25gIGluIFNDU1MgZm9yXG4gIHRoZXNlIHRvIHdvcmsuIENoZWNrIG91dCBcIl9FbGV2YXRpb24uc2Nzc1wiXG4tLT5cblxuPGRpdiBjbGFzcz1cImZsZXh5LWRhZFwiPlxuICB7I2VhY2ggWy4uLkFycmF5KDI0KV0ubWFwKCh2LCBpKSA9PiBpICsgMSkgYXMgbn1cbiAgICA8ZGl2IGNsYXNzPVwibWRjLWVsZXZhdGlvbi0tentufSBmbGV4eS1ib3lcIj5FbGV2YXRpb246IHtufTwvZGl2PlxuICB7L2VhY2h9XG48L2Rpdj5cblxuPHN0eWxlPlxuICAuZmxleHktZGFkIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuXG4gIC5mbGV4eS1ib3kge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogMTIwcHg7XG4gICAgaGVpZ2h0OiAxMjBweDtcbiAgICBtYXJnaW46IDAgMzZweCAzNnB4IDA7XG4gIH1cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIFlvdSBuZWVkIHRvIHVzZSBgQG1hdGVyaWFsL2VsZXZhdGlvbmAgbWl4aW5zIGluIFNDU1MgZm9yXG4gIHRoZXNlIHRvIHdvcmsuIENoZWNrIG91dCBcIl9UcmFuc2l0aW9uc0FuZENvbG9yLnNjc3NcIlxuLS0+XG5cbjxGb3JtRmllbGQ+XG4gIDxDaGVja2JveCBiaW5kOmNoZWNrZWQ9e2xpZnRNZVVwfSAvPlxuICA8c3BhbiBzbG90PVwibGFiZWxcIj5Zb3UgcmFpc2UgbWUgdXAsIHNvIEkgY2FuIHN0YW5kIG9uIG1vdW50YWlucyE8L3NwYW4+XG48L0Zvcm1GaWVsZD5cblxuPGJyIC8+PGJyIC8+XG5cbjxkaXYgY2xhc3M9XCJmbGV4eS1kYWRcIj5cbiAgPGRpdlxuICAgIGNsYXNzPVwibWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uIHJvdW5kZWQgZmxleHktYm95XCJcbiAgICBjbGFzczptZGMtZWxldmF0aW9uLS16ND17bGlmdE1lVXB9XG4gID5cbiAgICBTdGFuZGFyZFxuICA8L2Rpdj5cbiAgPGRpdlxuICAgIGNsYXNzPVwibXktcHJpbWFyeSBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24gcm91bmRlZCBmbGV4eS1ib3lcIlxuICAgIGNsYXNzOmVsZXZhdGVkPXtsaWZ0TWVVcH1cbiAgPlxuICAgIFByaW1hcnlcbiAgPC9kaXY+XG4gIDxkaXZcbiAgICBjbGFzcz1cIm15LXNlY29uZGFyeSBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24gcm91bmRlZCBmbGV4eS1ib3lcIlxuICAgIGNsYXNzOmVsZXZhdGVkPXtsaWZ0TWVVcH1cbiAgPlxuICAgIFNlY29uZGFyeVxuICA8L2Rpdj5cbjwvZGl2PlxuXG48c2NyaXB0PlxuICBpbXBvcnQgQ2hlY2tib3ggZnJvbSAnQHNtdWkvY2hlY2tib3gnO1xuICBpbXBvcnQgRm9ybUZpZWxkIGZyb20gJ0BzbXVpL2Zvcm0tZmllbGQnO1xuXG4gIGxldCBsaWZ0TWVVcCA9IGZhbHNlO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLmZsZXh5LWRhZCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gIH1cblxuICAuZmxleHktYm95IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDEyMHB4O1xuICAgIGhlaWdodDogMTIwcHg7XG4gICAgbWFyZ2luOiAwIDM2cHggMzZweCAwO1xuICB9XG5cbiAgLnJvdW5kZWQge1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgfVxuPC9zdHlsZT5cbiIsIjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkVsZXZhdGlvbiAtIFNNVUk8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHNlY3Rpb24+XG4gIDxoMj5FbGV2YXRpb248L2gyPlxuXG4gIDxwcmUgY2xhc3M9XCJkZW1vLXNwYWNlZFwiPm5wbSBpIC1EIEBtYXRlcmlhbC9lbGV2YXRpb248L3ByZT5cblxuICA8RGVtb1xuICAgIGNvbXBvbmVudD17RWxldmF0aW9ufVxuICAgIGZpbGVzPXtbJ2VsZXZhdGlvbi9fRWxldmF0aW9uLnN2ZWx0ZScsICdlbGV2YXRpb24vX0VsZXZhdGlvbi5zY3NzJ119XG4gIC8+XG5cbiAgPERlbW9cbiAgICBjb21wb25lbnQ9e1RyYW5zaXRpb25zQW5kQ29sb3J9XG4gICAgZmlsZXM9e1tcbiAgICAgICdlbGV2YXRpb24vX1RyYW5zaXRpb25zQW5kQ29sb3Iuc3ZlbHRlJyxcbiAgICAgICdlbGV2YXRpb24vX1RyYW5zaXRpb25zQW5kQ29sb3Iuc2NzcycsXG4gICAgXX1cbiAgPlxuICAgIFRyYW5zaXRpb25zIGFuZCBjb2xvclxuICA8L0RlbW8+XG48L3NlY3Rpb24+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBEZW1vIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvRGVtby5zdmVsdGUnO1xuICBpbXBvcnQgRWxldmF0aW9uIGZyb20gJy4vX0VsZXZhdGlvbi5zdmVsdGUnO1xuICBpbXBvcnQgVHJhbnNpdGlvbnNBbmRDb2xvciBmcm9tICcuL19UcmFuc2l0aW9uc0FuZENvbG9yLnN2ZWx0ZSc7XG48L3NjcmlwdD5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQU8yRCxHQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FEQUEzQixHQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBRHJCLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRzs7OztnQ0FBdkIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBQUssS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHOzs7OytCQUF2QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FBcUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkNBakIsR0FBUTt3Q0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQUFSLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0RBU0wsR0FBUTs7OytDQU1qQixHQUFROzs7K0NBTVIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eURBWkMsR0FBUTs7OztnREFNakIsR0FBUTs7OztnREFNUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FVdEIsUUFBUSxHQUFHLEtBQUs7Ozs7Ozs7O0VBL0JJLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VDSW5CLFNBQVM7WUFDWiw2QkFBNkIsRUFBRSwyQkFBMkI7Ozs7Ozs7ZUFJdkQsbUJBQW1COztLQUU1Qix1Q0FBdUM7S0FDdkMscUNBQXFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
