import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, L as List, v as validate_slots, m as mdiMaterialDesign, a as mdiSass, b as mdiHuman, c as mdiGestureTap, e as mdiMonitorScreenshot, f as mdiPalette, g as mdiCommentArrowLeft, h as mdiAccountGroup, j as mdiRotateRightVariant, k as mdiClipboardCheck, I as Item, T as Text, P as PrimaryText, l as SecondaryText, C as CommonIcon, n as Svg, o as space, p as element, t as text, q as create_component, r as query_selector_all, u as detach_dev, w as claim_space, x as claim_element, y as children, z as claim_text, A as claim_component, B as set_style, D as add_location, E as attr_dev, F as insert_dev, G as append_dev, H as mount_component, J as transition_in, K as transition_out, M as destroy_component, N as svg_element, O as noop } from './client.ec94238b.js';
import { P as Paper, T as Title, C as Content } from './Subtitle.1be01128.js';
import { G as Graphic } from './Graphic.805b8c09.js';

/* src/routes/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/index.svelte";

// (18:10) <Icon             component={Svg}             style="width: 1em; height: auto;"             viewBox="0 0 98.1 118"           >
function create_default_slot_60(ctx) {
	let defs;
	let mask;
	let rect;
	let path0;
	let t;
	let path1;

	const block = {
		c: function create() {
			defs = svg_element("defs");
			mask = svg_element("mask");
			rect = svg_element("rect");
			path0 = svg_element("path");
			t = space();
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			defs = claim_element(nodes, "defs", {}, 1);
			var defs_nodes = children(defs);
			mask = claim_element(defs_nodes, "mask", { id: true }, 1);
			var mask_nodes = children(mask);

			rect = claim_element(
				mask_nodes,
				"rect",
				{
					x: true,
					y: true,
					width: true,
					height: true,
					fill: true
				},
				1
			);

			children(rect).forEach(detach_dev);
			path0 = claim_element(mask_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			mask_nodes.forEach(detach_dev);
			defs_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			path1 = claim_element(nodes, "path", { mask: true, fill: true, d: true }, 1);
			children(path1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "x", "0");
			attr_dev(rect, "y", "0");
			attr_dev(rect, "width", "100%");
			attr_dev(rect, "height", "100%");
			attr_dev(rect, "fill", "#FFF");
			add_location(rect, file, 24, 16, 695);
			attr_dev(path0, "d", "M40.9,103.9c-8.9,2.3-18.2-1.2-23.4-8.7c-3.2-4.4-4.4-9.9-3.5-15.3c0.2-0.9,0.4-1.7,0.6-2.6l0.5-1.6l1.4,1 c3.3,2.4,6.9,4.2,10.8,5.4l1,0.3l-0.1,1c-0.1,1.4,0.3,2.9,1.1,4.1c1.6,2.3,4.4,3.4,7.1,2.7c0.6-0.2,1.2-0.4,1.7-0.7L65.5,72 c1.4-0.9,2.3-2.2,2.6-3.8c0.3-1.6-0.1-3.3-1-4.6c-1.6-2.3-4.4-3.3-7.1-2.6c-0.6,0.2-1.2,0.4-1.7,0.7l-10.5,6.7 c-1.7,1.1-3.6,1.9-5.6,2.4c-8.9,2.3-18.2-1.2-23.4-8.7c-3.1-4.4-4.4-9.9-3.4-15.3c0.9-5.2,4.1-9.9,8.6-12.7l27.5-17.5 c1.7-1.1,3.6-1.9,5.6-2.5c8.9-2.3,18.2,1.2,23.4,8.7c3.2,4.4,4.4,9.9,3.5,15.3c-0.2,0.9-0.4,1.7-0.7,2.6l-0.5,1.6l-1.4-1 c-3.3-2.4-6.9-4.2-10.8-5.4l-1-0.3l0.1-1c0.1-1.4-0.3-2.9-1.1-4.1c-1.6-2.3-4.4-3.3-7.1-2.6c-0.6,0.2-1.2,0.4-1.7,0.7L32.4,46.1 c-1.4,0.9-2.3,2.2-2.6,3.8s0.1,3.3,1,4.6c1.6,2.3,4.4,3.3,7.1,2.6c0.6-0.2,1.2-0.4,1.7-0.7l10.5-6.7c1.7-1.1,3.6-1.9,5.6-2.5 c8.9-2.3,18.2,1.2,23.4,8.7c3.2,4.4,4.4,9.9,3.5,15.3c-0.9,5.2-4.1,9.9-8.6,12.7l-27.5,17.5C44.8,102.5,42.9,103.3,40.9,103.9");
			add_location(path0, file, 25, 16, 771);
			attr_dev(mask, "id", "mask");
			add_location(mask, file, 23, 14, 662);
			add_location(defs, file, 22, 12, 641);
			attr_dev(path1, "mask", "url(#mask)");
			attr_dev(path1, "fill", "currentColor");
			attr_dev(path1, "d", "M91.8,15.6C80.9-0.1,59.2-4.7,43.6,5.2L16.1,22.8C8.6,27.5,3.4,35.2,1.9,43.9c-1.3,7.3-0.2,14.8,3.3,21.3 c-2.4,3.6-4,7.6-4.7,11.8c-1.6,8.9,0.5,18.1,5.7,25.4c11,15.7,32.6,20.3,48.2,10.4l27.5-17.5c7.5-4.7,12.7-12.4,14.2-21.1 c1.3-7.3,0.2-14.8-3.3-21.3c2.4-3.6,4-7.6,4.7-11.8C99.2,32.1,97.1,22.9,91.8,15.6");
			add_location(path1, file, 30, 12, 1800);
		},
		m: function mount(target, anchor) {
			insert_dev(target, defs, anchor);
			append_dev(defs, mask);
			append_dev(mask, rect);
			append_dev(mask, path0);
			insert_dev(target, t, anchor);
			insert_dev(target, path1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(defs);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(path1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_60.name,
		type: "slot",
		source: "(18:10) <Icon             component={Svg}             style=\\\"width: 1em; height: auto;\\\"             viewBox=\\\"0 0 98.1 118\\\"           >",
		ctx
	});

	return block;
}

// (14:8) <Title           style="display: flex; justify-content: space-between; align-items: center;"         >
function create_default_slot_59(ctx) {
	let span;
	let t0;
	let t1;
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 1em; height: auto;",
				viewBox: "0 0 98.1 118",
				$$slots: { default: [create_default_slot_60] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("Svelte");
			t1 = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Svelte");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(icon.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 16, 10, 472);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_59.name,
		type: "slot",
		source: "(14:8) <Title           style=\\\"display: flex; justify-content: space-between; align-items: center;\\\"         >",
		ctx
	});

	return block;
}

// (38:8) <Content>
function create_default_slot_58(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("SMUI 为各种界面元素提供基于 Svelte 的组件与操作。同时 SMUI\n          还提供用于构建自定义和高级 UI 组件的辅助实用程序。");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "SMUI 为各种界面元素提供基于 Svelte 的组件与操作。同时 SMUI\n          还提供用于构建自定义和高级 UI 组件的辅助实用程序。");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_58.name,
		type: "slot",
		source: "(38:8) <Content>",
		ctx
	});

	return block;
}

// (13:6) <Paper color="primary" class="box">
function create_default_slot_57(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				style: "display: flex; justify-content: space-between; align-items: center;",
				$$slots: { default: [create_default_slot_59] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_58] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_57.name,
		type: "slot",
		source: "(13:6) <Paper color=\\\"primary\\\" class=\\\"box\\\">",
		ctx
	});

	return block;
}

// (48:10) <Icon             component={Svg}             style="width: 1em; height: auto;"             viewBox="0 0 24 24"           >
function create_default_slot_56(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiMaterialDesign);
			add_location(path, file, 52, 12, 2717);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_56.name,
		type: "slot",
		source: "(48:10) <Icon             component={Svg}             style=\\\"width: 1em; height: auto;\\\"             viewBox=\\\"0 0 24 24\\\"           >",
		ctx
	});

	return block;
}

// (44:8) <Title           style="display: flex; justify-content: space-between; align-items: center;"         >
function create_default_slot_55(ctx) {
	let span;
	let t0;
	let t1;
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 1em; height: auto;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_56] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("Material.io");
			t1 = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Material.io");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(icon.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 46, 10, 2546);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_55.name,
		type: "slot",
		source: "(44:8) <Title           style=\\\"display: flex; justify-content: space-between; align-items: center;\\\"         >",
		ctx
	});

	return block;
}

// (56:8) <Content>
function create_default_slot_54(ctx) {
	let t0;
	let a0;
	let t1;
	let t2;
	let a1;
	let t3;
	let t4;

	const block = {
		c: function create() {
			t0 = text("SMUI is based on the awesome ");
			a0 = element("a");
			t1 = text("Material Design Component for Web");
			t2 = text(", by Google. It integrates these components using the\n          ");
			a1 = element("a");
			t3 = text("\"Advanced Approach\"");
			t4 = text(", where the component Foundation does the business logic, and the\n          SMUI component handles DOM updates and data binding.");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "SMUI is based on the awesome ");
			a0 = claim_element(nodes, "A", { style: true, href: true, target: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Material Design Component for Web");
			a0_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, ", by Google. It integrates these components using the\n          ");
			a1 = claim_element(nodes, "A", { style: true, href: true, target: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "\"Advanced Approach\"");
			a1_nodes.forEach(detach_dev);
			t4 = claim_text(nodes, ", where the component Foundation does the business logic, and the\n          SMUI component handles DOM updates and data binding.");
			this.h();
		},
		h: function hydrate() {
			set_style(a0, "color", "#fff");
			attr_dev(a0, "href", "https://material.io/develop/web");
			attr_dev(a0, "target", "_blank");
			add_location(a0, file, 56, 39, 2860);
			set_style(a1, "color", "#fff");
			attr_dev(a1, "href", "https://material.io/develop/web/guides/framework-integration");
			attr_dev(a1, "target", "_blank");
			add_location(a1, file, 61, 10, 3087);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, a1, anchor);
			append_dev(a1, t3);
			insert_dev(target, t4, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_54.name,
		type: "slot",
		source: "(56:8) <Content>",
		ctx
	});

	return block;
}

// (43:6) <Paper color="svelte-blue" class="box">
function create_default_slot_53(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				style: "display: flex; justify-content: space-between; align-items: center;",
				$$slots: { default: [create_default_slot_55] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_54] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_53.name,
		type: "slot",
		source: "(43:6) <Paper color=\\\"svelte-blue\\\" class=\\\"box\\\">",
		ctx
	});

	return block;
}

// (75:10) <Icon             component={Svg}             style="width: 1em; height: auto;"             viewBox="0 0 24 24"           >
function create_default_slot_52(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiSass);
			add_location(path, file, 79, 12, 3757);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_52.name,
		type: "slot",
		source: "(75:10) <Icon             component={Svg}             style=\\\"width: 1em; height: auto;\\\"             viewBox=\\\"0 0 24 24\\\"           >",
		ctx
	});

	return block;
}

// (71:8) <Title           style="display: flex; justify-content: space-between; align-items: center;"         >
function create_default_slot_51(ctx) {
	let span;
	let t0;
	let t1;
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 1em; height: auto;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_52] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("Sass");
			t1 = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Sass");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(icon.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 73, 10, 3593);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_51.name,
		type: "slot",
		source: "(71:8) <Title           style=\\\"display: flex; justify-content: space-between; align-items: center;\\\"         >",
		ctx
	});

	return block;
}

// (83:8) <Content>
function create_default_slot_50(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Like MDC, SMUI is styled through Sass. SMUI supports all of the mixins\n          provided by Material Design Components for Web, and provides some\n          additional helpful mixins. You can customize the look of your UI with\n          just a few variables.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Like MDC, SMUI is styled through Sass. SMUI supports all of the mixins\n          provided by Material Design Components for Web, and provides some\n          additional helpful mixins. You can customize the look of your UI with\n          just a few variables.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_50.name,
		type: "slot",
		source: "(83:8) <Content>",
		ctx
	});

	return block;
}

// (70:6) <Paper color="secondary" class="box">
function create_default_slot_49(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				style: "display: flex; justify-content: space-between; align-items: center;",
				$$slots: { default: [create_default_slot_51] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_50] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_49.name,
		type: "slot",
		source: "(70:6) <Paper color=\\\"secondary\\\" class=\\\"box\\\">",
		ctx
	});

	return block;
}

// (104:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_48(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiHuman);
			add_location(path, file, 108, 14, 4712);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_48.name,
		type: "slot",
		source: "(104:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (103:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_47(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_48] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_47.name,
		type: "slot",
		source: "(103:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (113:12) <PrimaryText>
function create_default_slot_46(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Accessible by Default");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Accessible by Default");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_46.name,
		type: "slot",
		source: "(113:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (114:12) <SecondaryText style="white-space: normal;">
function create_default_slot_45(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("SMUI automatically adds appropriate ARIA attributes to components\n              to provide accessibility to screen readers. SMUI is also fully\n              keyboard accessible, meaning motor impaired users can easily use\n              SMUI components.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "SMUI automatically adds appropriate ARIA attributes to components\n              to provide accessibility to screen readers. SMUI is also fully\n              keyboard accessible, meaning motor impaired users can easily use\n              SMUI components.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_45.name,
		type: "slot",
		source: "(114:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (112:10) <Text>
function create_default_slot_44(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_46] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_45] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_44.name,
		type: "slot",
		source: "(112:10) <Text>",
		ctx
	});

	return block;
}

// (102:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_43(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_47] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_44] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_43.name,
		type: "slot",
		source: "(102:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (124:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_42(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiGestureTap);
			add_location(path, file, 128, 14, 5529);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_42.name,
		type: "slot",
		source: "(124:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (123:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_41(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_42] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_41.name,
		type: "slot",
		source: "(123:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (133:12) <PrimaryText>
function create_default_slot_40(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Touch Friendly");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Touch Friendly");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_40.name,
		type: "slot",
		source: "(133:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (134:12) <SecondaryText style="white-space: normal;">
function create_default_slot_39(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("SMUI provides increased touch targets to allow ease of use on\n              mobile devices, conforming to the Material Spec requirement of\n              minimum 48px x 48px touch targets.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "SMUI provides increased touch targets to allow ease of use on\n              mobile devices, conforming to the Material Spec requirement of\n              minimum 48px x 48px touch targets.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_39.name,
		type: "slot",
		source: "(134:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (132:10) <Text>
function create_default_slot_38(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_40] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_39] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_38.name,
		type: "slot",
		source: "(132:10) <Text>",
		ctx
	});

	return block;
}

// (122:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_37(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_41] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_38] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_37.name,
		type: "slot",
		source: "(122:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (143:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_36(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiMonitorScreenshot);
			add_location(path, file, 147, 14, 6279);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_36.name,
		type: "slot",
		source: "(143:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (142:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_35(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_35.name,
		type: "slot",
		source: "(142:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (152:12) <PrimaryText>
function create_default_slot_34(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Server Side Rendering");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Server Side Rendering");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(152:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (153:12) <SecondaryText style="white-space: normal;">
function create_default_slot_33(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("SMUI can be fully rendered on the server, meaning faster time to\n              first meaningful paint. SMUI fully supports Sapper. In fact, the\n              site you're looking at is a Sapper app.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "SMUI can be fully rendered on the server, meaning faster time to\n              first meaningful paint. SMUI fully supports Sapper. In fact, the\n              site you're looking at is a Sapper app.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(153:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (151:10) <Text>
function create_default_slot_32(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(151:10) <Text>",
		ctx
	});

	return block;
}

// (141:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_31(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(141:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (162:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_30(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiPalette);
			add_location(path, file, 166, 14, 7053);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(162:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (161:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_29(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(161:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (171:12) <PrimaryText>
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Fully Themable");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Fully Themable");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(171:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (172:12) <SecondaryText style="white-space: normal;">
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Components are themable using Sass variables, provided by MDC-Web.\n              Everything from their shape, color, density, borders, interaction\n              states, and more is themable.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Components are themable using Sass variables, provided by MDC-Web.\n              Everything from their shape, color, density, borders, interaction\n              states, and more is themable.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(172:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (170:10) <Text>
function create_default_slot_26(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(170:10) <Text>",
		ctx
	});

	return block;
}

// (160:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_25(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(160:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (181:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_24(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiCommentArrowLeft);
			add_location(path, file, 185, 14, 7803);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(181:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (180:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_23(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(180:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (190:12) <PrimaryText>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("RTL Support");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "RTL Support");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(190:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (191:12) <SecondaryText style="white-space: normal;">
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("SMUI is RTL aware, and components will adapt their design to suit\n              the language of the user.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "SMUI is RTL aware, and components will adapt their design to suit\n              the language of the user.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(191:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (189:10) <Text>
function create_default_slot_20(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(189:10) <Text>",
		ctx
	});

	return block;
}

// (179:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_19(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(179:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (199:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_18(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiAccountGroup);
			add_location(path, file, 203, 14, 8474);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(199:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (198:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_17(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(198:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (208:12) <PrimaryText>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Widely Used, a Growing Community");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Widely Used, a Growing Community");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(208:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (209:12) <SecondaryText style="white-space: normal;">
function create_default_slot_15(ctx) {
	let t0;
	let a;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("With over ");
			a = element("a");
			t1 = text("500 projects");
			t2 = text(" using SMUI components, it is the most popular Svelte UI library.\n              For good reason, too. It is the most versatile and adaptable Svelte\n              UI library, guaranteed.");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "With over ");
			a = claim_element(nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "500 projects");
			a_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, " using SMUI components, it is the most popular Svelte UI library.\n              For good reason, too. It is the most versatile and adaptable Svelte\n              UI library, guaranteed.");
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "https://github.com/hperrin/svelte-material-ui/network/dependents?package_id=UGFja2FnZS01NTM5MDg5MDQ");
			attr_dev(a, "target", "_blank");
			add_location(a, file, 209, 24, 8734);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);
			insert_dev(target, t2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(209:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (207:10) <Text>
function create_default_slot_14(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(207:10) <Text>",
		ctx
	});

	return block;
}

// (197:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_13(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(197:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (221:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_12(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiRotateRightVariant);
			add_location(path, file, 225, 14, 9441);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(221:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (220:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_11(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(220:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (230:12) <PrimaryText>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Adaptable, Versatile");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Adaptable, Versatile");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(230:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (231:12) <SecondaryText style="white-space: normal;">
function create_default_slot_9(ctx) {
	let t0;
	let a;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("SMUI supports adding arbitrary attributes and actions to every\n              component and many internal elements within them. SMUI forwards\n              all events from every component, and supports event modifiers,\n              including passive. SMUI works in the Svelte REPL, meaning you can ");
			a = element("a");
			t1 = text("play with it right now");
			t2 = text(".");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "SMUI supports adding arbitrary attributes and actions to every\n              component and many internal elements within them. SMUI forwards\n              all events from every component, and supports event modifiers,\n              including passive. SMUI works in the Svelte REPL, meaning you can ");
			a = claim_element(nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "play with it right now");
			a_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, ".");
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "https://svelte.dev/repl/aa857c3bb5eb478cbe6b1fd6c6da522a?version=3.37.0");
			attr_dev(a, "target", "_blank");
			add_location(a, file, 234, 80, 9983);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);
			insert_dev(target, t2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(231:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (229:10) <Text>
function create_default_slot_8(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(229:10) <Text>",
		ctx
	});

	return block;
}

// (219:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_7(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(219:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (244:12) <Icon               component={Svg}               style="width: 40px; height: 40px;"               viewBox="0 0 24 24"             >
function create_default_slot_6(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiClipboardCheck);
			add_location(path, file, 248, 14, 10488);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(244:12) <Icon               component={Svg}               style=\\\"width: 40px; height: 40px;\\\"               viewBox=\\\"0 0 24 24\\\"             >",
		ctx
	});

	return block;
}

// (243:10) <Graphic style="height: auto; width: auto;">
function create_default_slot_5(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				style: "width: 40px; height: 40px;",
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 1) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(243:10) <Graphic style=\\\"height: auto; width: auto;\\\">",
		ctx
	});

	return block;
}

// (253:12) <PrimaryText>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Material Design Compliant");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Material Design Compliant");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(253:12) <PrimaryText>",
		ctx
	});

	return block;
}

// (254:12) <SecondaryText style="white-space: normal;">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Every SMUI component fully follows the Material Design\n              specification. You can build up-to-spec UIs with SMUI.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Every SMUI component fully follows the Material Design\n              specification. You can build up-to-spec UIs with SMUI.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(254:12) <SecondaryText style=\\\"white-space: normal;\\\">",
		ctx
	});

	return block;
}

// (252:10) <Text>
function create_default_slot_2(ctx) {
	let primarytext;
	let t;
	let secondarytext;
	let current;

	primarytext = new PrimaryText({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	secondarytext = new SecondaryText({
			props: {
				style: "white-space: normal;",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(primarytext.$$.fragment);
			t = space();
			create_component(secondarytext.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(primarytext.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(secondarytext.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(primarytext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(secondarytext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const primarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				primarytext_changes.$$scope = { dirty, ctx };
			}

			primarytext.$set(primarytext_changes);
			const secondarytext_changes = {};

			if (dirty & /*$$scope*/ 1) {
				secondarytext_changes.$$scope = { dirty, ctx };
			}

			secondarytext.$set(secondarytext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(primarytext.$$.fragment, local);
			transition_in(secondarytext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(primarytext.$$.fragment, local);
			transition_out(secondarytext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(primarytext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(secondarytext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(252:10) <Text>",
		ctx
	});

	return block;
}

// (242:8) <Item style="height: auto; min-height: 64px;">
function create_default_slot_1(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				style: "height: auto; width: auto;",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 1) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(242:8) <Item style=\\\"height: auto; min-height: 64px;\\\">",
		ctx
	});

	return block;
}

// (97:6) <List         twoLine         nonInteractive         style="border: 1px solid var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.1));"       >
function create_default_slot(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let t3;
	let item4;
	let t4;
	let item5;
	let t5;
	let item6;
	let t6;
	let item7;
	let current;

	item0 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_43] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item1 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item2 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item3 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item4 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item5 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item6 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item7 = new Item({
			props: {
				style: "height: auto; min-height: 64px;",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
			t3 = space();
			create_component(item4.$$.fragment);
			t4 = space();
			create_component(item5.$$.fragment);
			t5 = space();
			create_component(item6.$$.fragment);
			t6 = space();
			create_component(item7.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(item0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(item1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(item2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(item3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(item4.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(item5.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(item6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(item7.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(item0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(item3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(item4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(item5, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(item6, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(item7, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item0_changes.$$scope = { dirty, ctx };
			}

			item0.$set(item0_changes);
			const item1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item1_changes.$$scope = { dirty, ctx };
			}

			item1.$set(item1_changes);
			const item2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item2_changes.$$scope = { dirty, ctx };
			}

			item2.$set(item2_changes);
			const item3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item3_changes.$$scope = { dirty, ctx };
			}

			item3.$set(item3_changes);
			const item4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item4_changes.$$scope = { dirty, ctx };
			}

			item4.$set(item4_changes);
			const item5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item5_changes.$$scope = { dirty, ctx };
			}

			item5.$set(item5_changes);
			const item6_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item6_changes.$$scope = { dirty, ctx };
			}

			item6.$set(item6_changes);
			const item7_changes = {};

			if (dirty & /*$$scope*/ 1) {
				item7_changes.$$scope = { dirty, ctx };
			}

			item7.$set(item7_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			transition_in(item4.$$.fragment, local);
			transition_in(item5.$$.fragment, local);
			transition_in(item6.$$.fragment, local);
			transition_in(item7.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			transition_out(item4.$$.fragment, local);
			transition_out(item5.$$.fragment, local);
			transition_out(item6.$$.fragment, local);
			transition_out(item7.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(item1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(item2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(item3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(item4, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(item5, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(item6, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(item7, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(97:6) <List         twoLine         nonInteractive         style=\\\"border: 1px solid var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.1));\\\"       >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let div0;
	let h2;
	let t1;
	let t2;
	let p0;
	let t3;
	let t4;
	let div4;
	let div1;
	let paper0;
	let t5;
	let paper1;
	let t6;
	let paper2;
	let t7;
	let div2;
	let h4;
	let t8;
	let t9;
	let div3;
	let list;
	let t10;
	let div5;
	let p1;
	let t11;
	let a0;
	let t12;
	let t13;
	let a1;
	let t14;
	let t15;
	let a2;
	let t16;
	let t17;
	let current;

	paper0 = new Paper({
			props: {
				color: "primary",
				class: "box",
				$$slots: { default: [create_default_slot_57] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paper1 = new Paper({
			props: {
				color: "svelte-blue",
				class: "box",
				$$slots: { default: [create_default_slot_53] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paper2 = new Paper({
			props: {
				color: "secondary",
				class: "box",
				$$slots: { default: [create_default_slot_49] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	list = new List({
			props: {
				twoLine: true,
				nonInteractive: true,
				style: "border: 1px solid var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.1));",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			div0 = element("div");
			h2 = element("h2");
			t1 = text("Svelte Material UI");
			t2 = space();
			p0 = element("p");
			t3 = text("基于 Svelte 3 的 Material UI 组件库");
			t4 = space();
			div4 = element("div");
			div1 = element("div");
			create_component(paper0.$$.fragment);
			t5 = space();
			create_component(paper1.$$.fragment);
			t6 = space();
			create_component(paper2.$$.fragment);
			t7 = space();
			div2 = element("div");
			h4 = element("h4");
			t8 = text("SMUI Features and Values");
			t9 = space();
			div3 = element("div");
			create_component(list.$$.fragment);
			t10 = space();
			div5 = element("div");
			p1 = element("p");
			t11 = text("[\n      ");
			a0 = element("a");
			t12 = text("Discord");
			t13 = text("\n      |\n      ");
			a1 = element("a");
			t14 = text("GitHub");
			t15 = text("\n      |\n      ");
			a2 = element("a");
			t16 = text("Issue Tracker");
			t17 = text("\n      | © 2021 Hunter Perrin ]");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-yaceku\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { style: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Svelte Material UI");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "基于 Svelte 3 的 Material UI 组件库");
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			div4 = claim_element(section_nodes, "DIV", { style: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(paper0.$$.fragment, div1_nodes);
			t5 = claim_space(div1_nodes);
			claim_component(paper1.$$.fragment, div1_nodes);
			t6 = claim_space(div1_nodes);
			claim_component(paper2.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			h4 = claim_element(div2_nodes, "H4", {});
			var h4_nodes = children(h4);
			t8 = claim_text(h4_nodes, "SMUI Features and Values");
			h4_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t9 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { style: true });
			var div3_nodes = children(div3);
			claim_component(list.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t10 = claim_space(section_nodes);
			div5 = claim_element(section_nodes, "DIV", { style: true });
			var div5_nodes = children(div5);
			p1 = claim_element(div5_nodes, "P", {});
			var p1_nodes = children(p1);
			t11 = claim_text(p1_nodes, "[\n      ");
			a0 = claim_element(p1_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t12 = claim_text(a0_nodes, "Discord");
			a0_nodes.forEach(detach_dev);
			t13 = claim_text(p1_nodes, "\n      |\n      ");
			a1 = claim_element(p1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t14 = claim_text(a1_nodes, "GitHub");
			a1_nodes.forEach(detach_dev);
			t15 = claim_text(p1_nodes, "\n      |\n      ");
			a2 = claim_element(p1_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t16 = claim_text(a2_nodes, "Issue Tracker");
			a2_nodes.forEach(detach_dev);
			t17 = claim_text(p1_nodes, "\n      | © 2021 Hunter Perrin ]");
			p1_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Svelte Material UI 中文网";
			set_style(h2, "margin-bottom", "0");
			add_location(h2, file, 6, 4, 115);
			attr_dev(p0, "class", "mdc-typography--subtitle1");
			add_location(p0, file, 7, 4, 173);
			set_style(div0, "margin", "3em 0");
			add_location(div0, file, 5, 2, 82);
			attr_dev(div1, "class", "boxes svelte-bqryiy");
			add_location(div1, file, 11, 4, 289);
			add_location(h4, file, 92, 6, 4209);
			set_style(div2, "margin", "6em 0 3em");
			add_location(div2, file, 91, 4, 4170);
			set_style(div3, "margin", "3em 0");
			add_location(div3, file, 95, 4, 4259);
			set_style(div4, "margin", "3em 0");
			add_location(div4, file, 10, 2, 256);
			attr_dev(a0, "href", "https://discord.gg/aFzmkrmg9P");
			add_location(a0, file, 266, 6, 11008);
			attr_dev(a1, "href", "https://github.com/hperrin/svelte-material-ui");
			add_location(a1, file, 268, 6, 11074);
			attr_dev(a2, "href", "https://github.com/hperrin/svelte-material-ui/issues");
			add_location(a2, file, 270, 6, 11155);
			add_location(p1, file, 264, 4, 10990);
			set_style(div5, "margin", "3em 0");
			add_location(div5, file, 263, 2, 10957);
			attr_dev(section, "class", "svelte-bqryiy");
			add_location(section, file, 4, 0, 70);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(div0, h2);
			append_dev(h2, t1);
			append_dev(div0, t2);
			append_dev(div0, p0);
			append_dev(p0, t3);
			append_dev(section, t4);
			append_dev(section, div4);
			append_dev(div4, div1);
			mount_component(paper0, div1, null);
			append_dev(div1, t5);
			mount_component(paper1, div1, null);
			append_dev(div1, t6);
			mount_component(paper2, div1, null);
			append_dev(div4, t7);
			append_dev(div4, div2);
			append_dev(div2, h4);
			append_dev(h4, t8);
			append_dev(div4, t9);
			append_dev(div4, div3);
			mount_component(list, div3, null);
			append_dev(section, t10);
			append_dev(section, div5);
			append_dev(div5, p1);
			append_dev(p1, t11);
			append_dev(p1, a0);
			append_dev(a0, t12);
			append_dev(p1, t13);
			append_dev(p1, a1);
			append_dev(a1, t14);
			append_dev(p1, t15);
			append_dev(p1, a2);
			append_dev(a2, t16);
			append_dev(p1, t17);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper0_changes.$$scope = { dirty, ctx };
			}

			paper0.$set(paper0_changes);
			const paper1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper1_changes.$$scope = { dirty, ctx };
			}

			paper1.$set(paper1_changes);
			const paper2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper2_changes.$$scope = { dirty, ctx };
			}

			paper2.$set(paper2_changes);
			const list_changes = {};

			if (dirty & /*$$scope*/ 1) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper0.$$.fragment, local);
			transition_in(paper1.$$.fragment, local);
			transition_in(paper2.$$.fragment, local);
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper0.$$.fragment, local);
			transition_out(paper1.$$.fragment, local);
			transition_out(paper2.$$.fragment, local);
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(paper0);
			destroy_component(paper1);
			destroy_component(paper2);
			destroy_component(list);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		mdiMaterialDesign,
		mdiSass,
		mdiHuman,
		mdiGestureTap,
		mdiMonitorScreenshot,
		mdiPalette,
		mdiCommentArrowLeft,
		mdiAccountGroup,
		mdiRotateRightVariant,
		mdiClipboardCheck,
		Paper,
		Title,
		Content,
		List,
		Item,
		Graphic,
		Text,
		PrimaryText,
		SecondaryText,
		Icon: CommonIcon,
		Svg
	});

	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
