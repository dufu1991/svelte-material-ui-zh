import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, aY as TopAppBar, v as validate_slots, aZ as Row, a_ as Section, a$ as Title, as as IconButton, a6 as binding_callbacks, ak as bind, p as element, q as create_component, o as space, x as claim_element, y as children, A as claim_component, w as claim_space, u as detach_dev, D as add_location, E as attr_dev, B as set_style, F as insert_dev, H as mount_component, G as append_dev, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, t as text, z as claim_text, O as noop, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { C as Checkbox } from './Checkbox.52871e38.js';
import { F as FormField } from './FormField.2971fa15.js';
import { L as LoremIpsum } from './LoremIpsum.116fcbde.js';

/* src/routes/demo/top-app-bar/_Static.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/top-app-bar/_Static.svelte";

// (2:2) <FormField>
function create_default_slot_20(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[3](value);
	}

	let checkbox_props = {};

	if (/*prominent*/ ctx[0] !== void 0) {
		checkbox_props.checked = /*prominent*/ ctx[0];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*prominent*/ 1) {
				updating_checked = true;
				checkbox_changes.checked = /*prominent*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(2:2) <FormField>",
		ctx
	});

	return block;
}

// (4:4) 
function create_label_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Prominent");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Prominent");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 3, 4, 66);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_2.name,
		type: "slot",
		source: "(4:4) ",
		ctx
	});

	return block;
}

// (6:2) <FormField>
function create_default_slot_19(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding_1(value) {
		/*checkbox_checked_binding_1*/ ctx[4](value);
	}

	let checkbox_props = {};

	if (/*dense*/ ctx[1] !== void 0) {
		checkbox_props.checked = /*dense*/ ctx[1];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding_1));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*dense*/ 2) {
				updating_checked = true;
				checkbox_changes.checked = /*dense*/ ctx[1];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(6:2) <FormField>",
		ctx
	});

	return block;
}

// (8:4) 
function create_label_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Dense");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Dense");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 7, 4, 173);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_1.name,
		type: "slot",
		source: "(8:4) ",
		ctx
	});

	return block;
}

// (10:2) <FormField>
function create_default_slot_18(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding_2(value) {
		/*checkbox_checked_binding_2*/ ctx[5](value);
	}

	let checkbox_props = {};

	if (/*secondaryColor*/ ctx[2] !== void 0) {
		checkbox_props.checked = /*secondaryColor*/ ctx[2];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding_2));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*secondaryColor*/ 4) {
				updating_checked = true;
				checkbox_changes.checked = /*secondaryColor*/ ctx[2];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(10:2) <FormField>",
		ctx
	});

	return block;
}

// (12:4) 
function create_label_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Secondary");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Secondary");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 11, 4, 285);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(12:4) ",
		ctx
	});

	return block;
}

// (26:10) <IconButton class="material-icons">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("menu");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "menu");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(26:10) <IconButton class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (27:10) <Title>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Static");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Static");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(27:10) <Title>",
		ctx
	});

	return block;
}

// (25:8) <Section>
function create_default_slot_15(ctx) {
	let iconbutton;
	let t;
	let title;
	let current;

	iconbutton = new IconButton({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
			t = space();
			create_component(title.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(title.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(title, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const title_changes = {};

			if (dirty & /*$$scope*/ 64) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(title.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(title.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
			if (detaching) detach_dev(t);
			destroy_component(title, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(25:8) <Section>",
		ctx
	});

	return block;
}

// (30:10) <IconButton class="material-icons" aria-label="Download"             >
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("file_download");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "file_download");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(30:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Download\\\"             >",
		ctx
	});

	return block;
}

// (33:10) <IconButton class="material-icons" aria-label="Print this page"             >
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("print");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "print");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(33:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Print this page\\\"             >",
		ctx
	});

	return block;
}

// (36:10) <IconButton class="material-icons" aria-label="Bookmark this page"             >
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(36:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Bookmark this page\\\"             >",
		ctx
	});

	return block;
}

// (29:8) <Section align="end" toolbar>
function create_default_slot_11(ctx) {
	let iconbutton0;
	let t0;
	let iconbutton1;
	let t1;
	let iconbutton2;
	let current;

	iconbutton0 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Download",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Print this page",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton2 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Bookmark this page",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			create_component(iconbutton2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(iconbutton1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(iconbutton2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(iconbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(iconbutton2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton0_changes.$$scope = { dirty, ctx };
			}

			iconbutton0.$set(iconbutton0_changes);
			const iconbutton1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton1_changes.$$scope = { dirty, ctx };
			}

			iconbutton1.$set(iconbutton1_changes);
			const iconbutton2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton2_changes.$$scope = { dirty, ctx };
			}

			iconbutton2.$set(iconbutton2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(iconbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(iconbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(29:8) <Section align=\\\"end\\\" toolbar>",
		ctx
	});

	return block;
}

// (24:6) <Row>
function create_default_slot_10(ctx) {
	let section0;
	let t;
	let section1;
	let current;

	section0 = new Section({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	section1 = new Section({
			props: {
				align: "end",
				toolbar: true,
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(section0.$$.fragment);
			t = space();
			create_component(section1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(section0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(section1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(section0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(section1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const section0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				section0_changes.$$scope = { dirty, ctx };
			}

			section0.$set(section0_changes);
			const section1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				section1_changes.$$scope = { dirty, ctx };
			}

			section1.$set(section1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(section0.$$.fragment, local);
			transition_in(section1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(section0.$$.fragment, local);
			transition_out(section1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(section0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(section1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(24:6) <Row>",
		ctx
	});

	return block;
}

// (18:4) <TopAppBar       variant="static"       {prominent}       {dense}       color={secondaryColor ? 'secondary' : 'primary'}     >
function create_default_slot_9(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 64) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(18:4) <TopAppBar       variant=\\\"static\\\"       {prominent}       {dense}       color={secondaryColor ? 'secondary' : 'primary'}     >",
		ctx
	});

	return block;
}

// (61:10) <IconButton class="material-icons">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("menu");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "menu");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(61:10) <IconButton class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (62:10) <Title>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Flex Static");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Flex Static");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(62:10) <Title>",
		ctx
	});

	return block;
}

// (60:8) <Section>
function create_default_slot_6(ctx) {
	let iconbutton;
	let t;
	let title;
	let current;

	iconbutton = new IconButton({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
			t = space();
			create_component(title.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(title.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(title, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const title_changes = {};

			if (dirty & /*$$scope*/ 64) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(title.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(title.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
			if (detaching) detach_dev(t);
			destroy_component(title, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(60:8) <Section>",
		ctx
	});

	return block;
}

// (65:10) <IconButton class="material-icons" aria-label="Download"             >
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("file_download");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "file_download");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(65:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Download\\\"             >",
		ctx
	});

	return block;
}

// (68:10) <IconButton class="material-icons" aria-label="Print this page"             >
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("print");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "print");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(68:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Print this page\\\"             >",
		ctx
	});

	return block;
}

// (71:10) <IconButton class="material-icons" aria-label="Bookmark this page"             >
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(71:10) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Bookmark this page\\\"             >",
		ctx
	});

	return block;
}

// (64:8) <Section align="end" toolbar>
function create_default_slot_2(ctx) {
	let iconbutton0;
	let t0;
	let iconbutton1;
	let t1;
	let iconbutton2;
	let current;

	iconbutton0 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Download",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Print this page",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton2 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Bookmark this page",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			create_component(iconbutton2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(iconbutton1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(iconbutton2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(iconbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(iconbutton2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton0_changes.$$scope = { dirty, ctx };
			}

			iconbutton0.$set(iconbutton0_changes);
			const iconbutton1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton1_changes.$$scope = { dirty, ctx };
			}

			iconbutton1.$set(iconbutton1_changes);
			const iconbutton2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				iconbutton2_changes.$$scope = { dirty, ctx };
			}

			iconbutton2.$set(iconbutton2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(iconbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(iconbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(64:8) <Section align=\\\"end\\\" toolbar>",
		ctx
	});

	return block;
}

// (59:6) <Row>
function create_default_slot_1$1(ctx) {
	let section0;
	let t;
	let section1;
	let current;

	section0 = new Section({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	section1 = new Section({
			props: {
				align: "end",
				toolbar: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(section0.$$.fragment);
			t = space();
			create_component(section1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(section0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(section1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(section0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(section1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const section0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				section0_changes.$$scope = { dirty, ctx };
			}

			section0.$set(section0_changes);
			const section1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				section1_changes.$$scope = { dirty, ctx };
			}

			section1.$set(section1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(section0.$$.fragment, local);
			transition_in(section1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(section0.$$.fragment, local);
			transition_out(section1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(section0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(section1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(59:6) <Row>",
		ctx
	});

	return block;
}

// (53:4) <TopAppBar       variant="static"       {prominent}       {dense}       color={secondaryColor ? 'secondary' : 'primary'}     >
function create_default_slot$1(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 64) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(53:4) <TopAppBar       variant=\\\"static\\\"       {prominent}       {dense}       color={secondaryColor ? 'secondary' : 'primary'}     >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div0;
	let formfield0;
	let t0;
	let formfield1;
	let t1;
	let formfield2;
	let t2;
	let div5;
	let div2;
	let topappbar0;
	let t3;
	let div1;
	let loremipsum0;
	let t4;
	let img0;
	let img0_src_value;
	let t5;
	let div4;
	let topappbar1;
	let t6;
	let div3;
	let loremipsum1;
	let t7;
	let img1;
	let img1_src_value;
	let current;

	formfield0 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_2],
					default: [create_default_slot_20]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield1 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_1],
					default: [create_default_slot_19]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield2 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot_18]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	topappbar0 = new TopAppBar({
			props: {
				variant: "static",
				prominent: /*prominent*/ ctx[0],
				dense: /*dense*/ ctx[1],
				color: /*secondaryColor*/ ctx[2] ? "secondary" : "primary",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	loremipsum0 = new LoremIpsum({ $$inline: true });

	topappbar1 = new TopAppBar({
			props: {
				variant: "static",
				prominent: /*prominent*/ ctx[0],
				dense: /*dense*/ ctx[1],
				color: /*secondaryColor*/ ctx[2] ? "secondary" : "primary",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	loremipsum1 = new LoremIpsum({ $$inline: true });

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(formfield0.$$.fragment);
			t0 = space();
			create_component(formfield1.$$.fragment);
			t1 = space();
			create_component(formfield2.$$.fragment);
			t2 = space();
			div5 = element("div");
			div2 = element("div");
			create_component(topappbar0.$$.fragment);
			t3 = space();
			div1 = element("div");
			create_component(loremipsum0.$$.fragment);
			t4 = space();
			img0 = element("img");
			t5 = space();
			div4 = element("div");
			create_component(topappbar1.$$.fragment);
			t6 = space();
			div3 = element("div");
			create_component(loremipsum1.$$.fragment);
			t7 = space();
			img1 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {});
			var div0_nodes = children(div0);
			claim_component(formfield0.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			claim_component(formfield1.$$.fragment, div0_nodes);
			t1 = claim_space(div0_nodes);
			claim_component(formfield2.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(topappbar0.$$.fragment, div2_nodes);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			claim_component(loremipsum0.$$.fragment, div1_nodes);
			t4 = claim_space(div1_nodes);
			img0 = claim_element(div1_nodes, "IMG", { alt: true, src: true, style: true });
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			claim_component(topappbar1.$$.fragment, div4_nodes);
			t6 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(loremipsum1.$$.fragment, div3_nodes);
			t7 = claim_space(div3_nodes);
			img1 = claim_element(div3_nodes, "IMG", { alt: true, src: true, style: true });
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file$2, 0, 0, 0);
			attr_dev(img0, "alt", "Page content placeholder");
			if (img0.src !== (img0_src_value = "/page-content.jpg")) attr_dev(img0, "src", img0_src_value);
			set_style(img0, "display", "block");
			set_style(img0, "max-width", "100%");
			set_style(img0, "height", "auto");
			set_style(img0, "margin", "1em auto");
			add_location(img0, file$2, 43, 6, 1159);
			add_location(div1, file$2, 41, 4, 1126);
			attr_dev(div2, "class", "top-app-bar-container svelte-tuyvy");
			add_location(div2, file$2, 16, 2, 366);
			attr_dev(img1, "alt", "Page content placeholder");
			if (img1.src !== (img1_src_value = "/page-content.jpg")) attr_dev(img1, "src", img1_src_value);
			set_style(img1, "display", "block");
			set_style(img1, "max-width", "100%");
			set_style(img1, "height", "auto");
			set_style(img1, "margin", "1em auto");
			add_location(img1, file$2, 78, 6, 2176);
			attr_dev(div3, "class", "flexor-content svelte-tuyvy");
			add_location(div3, file$2, 76, 4, 2120);
			attr_dev(div4, "class", "top-app-bar-container flexor svelte-tuyvy");
			add_location(div4, file$2, 51, 2, 1348);
			attr_dev(div5, "class", "flexy svelte-tuyvy");
			add_location(div5, file$2, 15, 0, 344);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(formfield0, div0, null);
			append_dev(div0, t0);
			mount_component(formfield1, div0, null);
			append_dev(div0, t1);
			mount_component(formfield2, div0, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div2);
			mount_component(topappbar0, div2, null);
			append_dev(div2, t3);
			append_dev(div2, div1);
			mount_component(loremipsum0, div1, null);
			append_dev(div1, t4);
			append_dev(div1, img0);
			append_dev(div5, t5);
			append_dev(div5, div4);
			mount_component(topappbar1, div4, null);
			append_dev(div4, t6);
			append_dev(div4, div3);
			mount_component(loremipsum1, div3, null);
			append_dev(div3, t7);
			append_dev(div3, img1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield0_changes = {};

			if (dirty & /*$$scope, prominent*/ 65) {
				formfield0_changes.$$scope = { dirty, ctx };
			}

			formfield0.$set(formfield0_changes);
			const formfield1_changes = {};

			if (dirty & /*$$scope, dense*/ 66) {
				formfield1_changes.$$scope = { dirty, ctx };
			}

			formfield1.$set(formfield1_changes);
			const formfield2_changes = {};

			if (dirty & /*$$scope, secondaryColor*/ 68) {
				formfield2_changes.$$scope = { dirty, ctx };
			}

			formfield2.$set(formfield2_changes);
			const topappbar0_changes = {};
			if (dirty & /*prominent*/ 1) topappbar0_changes.prominent = /*prominent*/ ctx[0];
			if (dirty & /*dense*/ 2) topappbar0_changes.dense = /*dense*/ ctx[1];
			if (dirty & /*secondaryColor*/ 4) topappbar0_changes.color = /*secondaryColor*/ ctx[2] ? "secondary" : "primary";

			if (dirty & /*$$scope*/ 64) {
				topappbar0_changes.$$scope = { dirty, ctx };
			}

			topappbar0.$set(topappbar0_changes);
			const topappbar1_changes = {};
			if (dirty & /*prominent*/ 1) topappbar1_changes.prominent = /*prominent*/ ctx[0];
			if (dirty & /*dense*/ 2) topappbar1_changes.dense = /*dense*/ ctx[1];
			if (dirty & /*secondaryColor*/ 4) topappbar1_changes.color = /*secondaryColor*/ ctx[2] ? "secondary" : "primary";

			if (dirty & /*$$scope*/ 64) {
				topappbar1_changes.$$scope = { dirty, ctx };
			}

			topappbar1.$set(topappbar1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield0.$$.fragment, local);
			transition_in(formfield1.$$.fragment, local);
			transition_in(formfield2.$$.fragment, local);
			transition_in(topappbar0.$$.fragment, local);
			transition_in(loremipsum0.$$.fragment, local);
			transition_in(topappbar1.$$.fragment, local);
			transition_in(loremipsum1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield0.$$.fragment, local);
			transition_out(formfield1.$$.fragment, local);
			transition_out(formfield2.$$.fragment, local);
			transition_out(topappbar0.$$.fragment, local);
			transition_out(loremipsum0.$$.fragment, local);
			transition_out(topappbar1.$$.fragment, local);
			transition_out(loremipsum1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(formfield0);
			destroy_component(formfield1);
			destroy_component(formfield2);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div5);
			destroy_component(topappbar0);
			destroy_component(loremipsum0);
			destroy_component(topappbar1);
			destroy_component(loremipsum1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Static", slots, []);
	let prominent = false;
	let dense = false;
	let secondaryColor = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Static> was created with unknown prop '${key}'`);
	});

	function checkbox_checked_binding(value) {
		prominent = value;
		$$invalidate(0, prominent);
	}

	function checkbox_checked_binding_1(value) {
		dense = value;
		$$invalidate(1, dense);
	}

	function checkbox_checked_binding_2(value) {
		secondaryColor = value;
		$$invalidate(2, secondaryColor);
	}

	$$self.$capture_state = () => ({
		TopAppBar,
		Row,
		Section,
		Title,
		IconButton,
		Checkbox,
		FormField,
		LoremIpsum,
		prominent,
		dense,
		secondaryColor
	});

	$$self.$inject_state = $$props => {
		if ("prominent" in $$props) $$invalidate(0, prominent = $$props.prominent);
		if ("dense" in $$props) $$invalidate(1, dense = $$props.dense);
		if ("secondaryColor" in $$props) $$invalidate(2, secondaryColor = $$props.secondaryColor);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		prominent,
		dense,
		secondaryColor,
		checkbox_checked_binding,
		checkbox_checked_binding_1,
		checkbox_checked_binding_2
	];
}

class Static extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Static",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/top-app-bar/_Variants.svelte generated by Svelte v3.37.0 */

const file$1 = "src/routes/demo/top-app-bar/_Variants.svelte";

function create_fragment$1(ctx) {
	let iframe0;
	let iframe0_src_value;
	let t0;
	let a;
	let t1;
	let t2;
	let iframe1;
	let iframe1_src_value;
	let t3;
	let iframe2;
	let iframe2_src_value;
	let t4;
	let iframe3;
	let iframe3_src_value;
	let t5;
	let iframe4;
	let iframe4_src_value;
	let t6;
	let iframe5;
	let iframe5_src_value;

	const block = {
		c: function create() {
			iframe0 = element("iframe");
			t0 = space();
			a = element("a");
			t1 = text("helper needed for sapper export");
			t2 = space();
			iframe1 = element("iframe");
			t3 = space();
			iframe2 = element("iframe");
			t4 = space();
			iframe3 = element("iframe");
			t5 = space();
			iframe4 = element("iframe");
			t6 = space();
			iframe5 = element("iframe");
			this.h();
		},
		l: function claim(nodes) {
			iframe0 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe0).forEach(detach_dev);
			t0 = claim_space(nodes);
			a = claim_element(nodes, "A", { style: true, href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "helper needed for sapper export");
			a_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			iframe1 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe1).forEach(detach_dev);
			t3 = claim_space(nodes);
			iframe2 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe2).forEach(detach_dev);
			t4 = claim_space(nodes);
			iframe3 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe3).forEach(detach_dev);
			t5 = claim_space(nodes);
			iframe4 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe4).forEach(detach_dev);
			t6 = claim_space(nodes);
			iframe5 = claim_element(nodes, "IFRAME", { class: true, src: true, title: true });
			children(iframe5).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(iframe0, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe0.src !== (iframe0_src_value = "/demo/top-app-bar/iframe")) attr_dev(iframe0, "src", iframe0_src_value);
			attr_dev(iframe0, "title", "standard");
			add_location(iframe0, file$1, 1, 0, 57);
			set_style(a, "display", "none");
			attr_dev(a, "href", "/demo/top-app-bar/iframe");
			add_location(a, file$1, 6, 0, 149);
			attr_dev(iframe1, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe1.src !== (iframe1_src_value = "/demo/top-app-bar/iframe?style=fixed")) attr_dev(iframe1, "src", iframe1_src_value);
			attr_dev(iframe1, "title", "fixed");
			add_location(iframe1, file$1, 10, 0, 248);
			attr_dev(iframe2, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe2.src !== (iframe2_src_value = "/demo/top-app-bar/iframe?style=dense")) attr_dev(iframe2, "src", iframe2_src_value);
			attr_dev(iframe2, "title", "dense");
			add_location(iframe2, file$1, 16, 0, 350);
			attr_dev(iframe3, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe3.src !== (iframe3_src_value = "/demo/top-app-bar/iframe?style=prominent")) attr_dev(iframe3, "src", iframe3_src_value);
			attr_dev(iframe3, "title", "prominent");
			add_location(iframe3, file$1, 22, 0, 452);
			attr_dev(iframe4, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe4.src !== (iframe4_src_value = "/demo/top-app-bar/iframe?style=short")) attr_dev(iframe4, "src", iframe4_src_value);
			attr_dev(iframe4, "title", "short");
			add_location(iframe4, file$1, 28, 0, 562);
			attr_dev(iframe5, "class", "top-app-bar-iframe svelte-uqu7r4");
			if (iframe5.src !== (iframe5_src_value = "/demo/top-app-bar/iframe?style=short-closed")) attr_dev(iframe5, "src", iframe5_src_value);
			attr_dev(iframe5, "title", "short closed");
			add_location(iframe5, file$1, 34, 0, 664);
		},
		m: function mount(target, anchor) {
			insert_dev(target, iframe0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, iframe1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, iframe2, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, iframe3, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, iframe4, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, iframe5, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(iframe0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(iframe1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(iframe2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(iframe3);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(iframe4);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(iframe5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Variants", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Variants> was created with unknown prop '${key}'`);
	});

	return [];
}

class Variants extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Variants",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/top-app-bar/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/top-app-bar/index.svelte";

// (10:2) <Demo component={Static} file="top-app-bar/_Static.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Top app bars in a container");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Top app bars in a container");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(10:2) <Demo component={Static} file=\\\"top-app-bar/_Static.svelte\\\">",
		ctx
	});

	return block;
}

// (12:4) <svelte:fragment slot="subtitle">
function create_subtitle_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Only the \"static\" variant works inside containers.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Only the \"static\" variant works inside containers.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_subtitle_slot_1.name,
		type: "slot",
		source: "(12:4) <svelte:fragment slot=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

// (17:2) <Demo component={Variants} file="top-app-bar/iframe.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Page level top app bars");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Page level top app bars");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(17:2) <Demo component={Variants} file=\\\"top-app-bar/iframe.svelte\\\">",
		ctx
	});

	return block;
}

// (19:4) <svelte:fragment slot="subtitle">
function create_subtitle_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("These are displayed in iframes and the source viewer shows the iframe\n      source.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "These are displayed in iframes and the source viewer shows the iframe\n      source.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_subtitle_slot.name,
		type: "slot",
		source: "(19:4) <svelte:fragment slot=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let current;

	demo0 = new Demo({
			props: {
				component: Static,
				file: "top-app-bar/_Static.svelte",
				$$slots: {
					subtitle: [create_subtitle_slot_1],
					default: [create_default_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Variants,
				file: "top-app-bar/iframe.svelte",
				$$slots: {
					subtitle: [create_subtitle_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Top App Bar");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/top-app-bar");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1nlx7pd\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Top App Bar");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/top-app-bar");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Top App Bar - SMUI";
			add_location(h2, file, 5, 2, 78);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 102);
			add_location(section, file, 4, 0, 66);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo0_changes.$$scope = { dirty, ctx };
			}

			demo0.$set(demo0_changes);
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Top_app_bar", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Top_app_bar> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Static, Variants });
	return [];
}

class Top_app_bar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Top_app_bar",
			options,
			id: create_fragment.name
		});
	}
}

export default Top_app_bar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
