import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a6 as binding_callbacks, ak as bind, p as element, q as create_component, o as space, t as text, x as claim_element, y as children, A as claim_component, u as detach_dev, w as claim_space, z as claim_text, D as add_location, E as attr_dev, B as set_style, F as insert_dev, H as mount_component, G as append_dev, aw as set_data_dev, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, ag as validate_each_argument, a4 as group_outros, a5 as check_outros, aj as destroy_each, O as noop, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { S as Switch$1 } from './Switch.f22d860f.js';
import { F as FormField } from './FormField.2971fa15.js';
import { B as Button_1 } from './Button.d66ce348.js';

/* src/routes/demo/switch/_Simple.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/switch/_Simple.svelte";

// (2:2) <FormField>
function create_default_slot_2(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[2](value);
	}

	let switch_1_props = {};

	if (/*checked1*/ ctx[0] !== void 0) {
		switch_1_props.checked = /*checked1*/ ctx[0];
	}

	switch_1 = new Switch$1({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "checked", switch_1_checked_binding));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*checked1*/ 1) {
				updating_checked = true;
				switch_1_changes.checked = /*checked1*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(2:2) <FormField>",
		ctx
	});

	return block;
}

// (4:4) 
function create_label_slot_1$1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Fields of grain.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Fields of grain.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$3, 3, 4, 63);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_1$1.name,
		type: "slot",
		source: "(4:4) ",
		ctx
	});

	return block;
}

// (11:2) <FormField align="end">
function create_default_slot_1$3(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding_1(value) {
		/*switch_1_checked_binding_1*/ ctx[3](value);
	}

	let switch_1_props = {};

	if (/*checked2*/ ctx[1] !== void 0) {
		switch_1_props.checked = /*checked2*/ ctx[1];
	}

	switch_1 = new Switch$1({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "checked", switch_1_checked_binding_1));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*checked2*/ 2) {
				updating_checked = true;
				switch_1_changes.checked = /*checked2*/ ctx[1];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(11:2) <FormField align=\\\"end\\\">",
		ctx
	});

	return block;
}

// (13:4) 
function create_label_slot$2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Fields of grain.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Fields of grain.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$3, 12, 4, 276);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$2.name,
		type: "slot",
		source: "(13:4) ",
		ctx
	});

	return block;
}

// (18:2) <Button on:click={() => (checked2 = !checked2)}>
function create_default_slot$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle Programmatically");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle Programmatically");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(18:2) <Button on:click={() => (checked2 = !checked2)}>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div0;
	let formfield0;
	let t0;
	let pre0;
	let t1;
	let t2;
	let t3;
	let div1;
	let formfield1;
	let t4;
	let div2;
	let button;
	let t5;
	let pre1;
	let t6;
	let t7;
	let current;

	formfield0 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_1$1],
					default: [create_default_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield1 = new FormField({
			props: {
				align: "end",
				$$slots: {
					label: [create_label_slot$2],
					default: [create_default_slot_1$3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[4]);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(formfield0.$$.fragment);
			t0 = space();
			pre0 = element("pre");
			t1 = text("Checked: ");
			t2 = text(/*checked1*/ ctx[0]);
			t3 = space();
			div1 = element("div");
			create_component(formfield1.$$.fragment);
			t4 = space();
			div2 = element("div");
			create_component(button.$$.fragment);
			t5 = space();
			pre1 = element("pre");
			t6 = text("Checked: ");
			t7 = text(/*checked2*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {});
			var div0_nodes = children(div0);
			claim_component(formfield0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			t1 = claim_text(pre0_nodes, "Checked: ");
			t2 = claim_text(pre0_nodes, /*checked1*/ ctx[0]);
			pre0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(formfield1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			claim_component(button.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			t6 = claim_text(pre1_nodes, "Checked: ");
			t7 = claim_text(pre1_nodes, /*checked2*/ ctx[1]);
			pre1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file$3, 0, 0, 0);
			attr_dev(pre0, "class", "status");
			add_location(pre0, file$3, 7, 0, 129);
			set_style(div1, "margin-top", "1em");
			add_location(div1, file$3, 9, 0, 176);
			set_style(div2, "margin-top", "1em");
			add_location(div2, file$3, 16, 0, 342);
			attr_dev(pre1, "class", "status");
			add_location(pre1, file$3, 22, 0, 472);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(formfield0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre0, anchor);
			append_dev(pre0, t1);
			append_dev(pre0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			mount_component(formfield1, div1, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, div2, anchor);
			mount_component(button, div2, null);
			insert_dev(target, t5, anchor);
			insert_dev(target, pre1, anchor);
			append_dev(pre1, t6);
			append_dev(pre1, t7);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield0_changes = {};

			if (dirty & /*$$scope, checked1*/ 33) {
				formfield0_changes.$$scope = { dirty, ctx };
			}

			formfield0.$set(formfield0_changes);
			if (!current || dirty & /*checked1*/ 1) set_data_dev(t2, /*checked1*/ ctx[0]);
			const formfield1_changes = {};

			if (dirty & /*$$scope, checked2*/ 34) {
				formfield1_changes.$$scope = { dirty, ctx };
			}

			formfield1.$set(formfield1_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*checked2*/ 2) set_data_dev(t7, /*checked2*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield0.$$.fragment, local);
			transition_in(formfield1.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield0.$$.fragment, local);
			transition_out(formfield1.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(formfield0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			destroy_component(formfield1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div2);
			destroy_component(button);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(pre1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	let checked1 = false;
	let checked2 = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	function switch_1_checked_binding(value) {
		checked1 = value;
		$$invalidate(0, checked1);
	}

	function switch_1_checked_binding_1(value) {
		checked2 = value;
		$$invalidate(1, checked2);
	}

	const click_handler = () => $$invalidate(1, checked2 = !checked2);

	$$self.$capture_state = () => ({
		Switch: Switch$1,
		FormField,
		Button: Button_1,
		checked1,
		checked2
	});

	$$self.$inject_state = $$props => {
		if ("checked1" in $$props) $$invalidate(0, checked1 = $$props.checked1);
		if ("checked2" in $$props) $$invalidate(1, checked2 = $$props.checked2);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		checked1,
		checked2,
		switch_1_checked_binding,
		switch_1_checked_binding_1,
		click_handler
	];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/switch/_PrimaryColor.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/switch/_PrimaryColor.svelte";

// (2:2) <FormField>
function create_default_slot_1$2(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[2](value);
	}

	let switch_1_props = { color: "primary" };

	if (/*checked1*/ ctx[0] !== void 0) {
		switch_1_props.checked = /*checked1*/ ctx[0];
	}

	switch_1 = new Switch$1({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "checked", switch_1_checked_binding));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*checked1*/ 1) {
				updating_checked = true;
				switch_1_changes.checked = /*checked1*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(2:2) <FormField>",
		ctx
	});

	return block;
}

// (4:4) 
function create_label_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Fields of grain.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Fields of grain.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 3, 4, 79);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_1.name,
		type: "slot",
		source: "(4:4) ",
		ctx
	});

	return block;
}

// (11:2) <FormField align="end">
function create_default_slot$2(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding_1(value) {
		/*switch_1_checked_binding_1*/ ctx[3](value);
	}

	let switch_1_props = { color: "primary" };

	if (/*checked2*/ ctx[1] !== void 0) {
		switch_1_props.checked = /*checked2*/ ctx[1];
	}

	switch_1 = new Switch$1({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "checked", switch_1_checked_binding_1));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*checked2*/ 2) {
				updating_checked = true;
				switch_1_changes.checked = /*checked2*/ ctx[1];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(11:2) <FormField align=\\\"end\\\">",
		ctx
	});

	return block;
}

// (13:4) 
function create_label_slot$1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Fields of grain.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Fields of grain.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 12, 4, 308);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$1.name,
		type: "slot",
		source: "(13:4) ",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div0;
	let formfield0;
	let t0;
	let pre0;
	let t1;
	let t2;
	let t3;
	let div1;
	let formfield1;
	let t4;
	let pre1;
	let t5;
	let t6;
	let current;

	formfield0 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_1],
					default: [create_default_slot_1$2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield1 = new FormField({
			props: {
				align: "end",
				$$slots: {
					label: [create_label_slot$1],
					default: [create_default_slot$2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(formfield0.$$.fragment);
			t0 = space();
			pre0 = element("pre");
			t1 = text("Checked: ");
			t2 = text(/*checked1*/ ctx[0]);
			t3 = space();
			div1 = element("div");
			create_component(formfield1.$$.fragment);
			t4 = space();
			pre1 = element("pre");
			t5 = text("Checked: ");
			t6 = text(/*checked2*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {});
			var div0_nodes = children(div0);
			claim_component(formfield0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			t1 = claim_text(pre0_nodes, "Checked: ");
			t2 = claim_text(pre0_nodes, /*checked1*/ ctx[0]);
			pre0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(formfield1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			t5 = claim_text(pre1_nodes, "Checked: ");
			t6 = claim_text(pre1_nodes, /*checked2*/ ctx[1]);
			pre1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file$2, 0, 0, 0);
			attr_dev(pre0, "class", "status");
			add_location(pre0, file$2, 7, 0, 145);
			set_style(div1, "margin-top", "1em");
			add_location(div1, file$2, 9, 0, 192);
			attr_dev(pre1, "class", "status");
			add_location(pre1, file$2, 16, 0, 374);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(formfield0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre0, anchor);
			append_dev(pre0, t1);
			append_dev(pre0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			mount_component(formfield1, div1, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, pre1, anchor);
			append_dev(pre1, t5);
			append_dev(pre1, t6);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield0_changes = {};

			if (dirty & /*$$scope, checked1*/ 17) {
				formfield0_changes.$$scope = { dirty, ctx };
			}

			formfield0.$set(formfield0_changes);
			if (!current || dirty & /*checked1*/ 1) set_data_dev(t2, /*checked1*/ ctx[0]);
			const formfield1_changes = {};

			if (dirty & /*$$scope, checked2*/ 18) {
				formfield1_changes.$$scope = { dirty, ctx };
			}

			formfield1.$set(formfield1_changes);
			if (!current || dirty & /*checked2*/ 2) set_data_dev(t6, /*checked2*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield0.$$.fragment, local);
			transition_in(formfield1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield0.$$.fragment, local);
			transition_out(formfield1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(formfield0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			destroy_component(formfield1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(pre1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PrimaryColor", slots, []);
	let checked1 = false;
	let checked2 = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PrimaryColor> was created with unknown prop '${key}'`);
	});

	function switch_1_checked_binding(value) {
		checked1 = value;
		$$invalidate(0, checked1);
	}

	function switch_1_checked_binding_1(value) {
		checked2 = value;
		$$invalidate(1, checked2);
	}

	$$self.$capture_state = () => ({ Switch: Switch$1, FormField, checked1, checked2 });

	$$self.$inject_state = $$props => {
		if ("checked1" in $$props) $$invalidate(0, checked1 = $$props.checked1);
		if ("checked2" in $$props) $$invalidate(1, checked2 = $$props.checked2);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [checked1, checked2, switch_1_checked_binding, switch_1_checked_binding_1];
}

class PrimaryColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PrimaryColor",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/switch/_Group.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/switch/_Group.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (3:4) <FormField>
function create_default_slot_1$1(ctx) {
	let switch_1;
	let updating_group;
	let current;

	function switch_1_group_binding(value) {
		/*switch_1_group_binding*/ ctx[2](value);
	}

	let switch_1_props = {
		value: /*option*/ ctx[4].name,
		disabled: /*option*/ ctx[4].disabled
	};

	if (/*selected*/ ctx[0] !== void 0) {
		switch_1_props.group = /*selected*/ ctx[0];
	}

	switch_1 = new Switch$1({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "group", switch_1_group_binding));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_group && dirty & /*selected*/ 1) {
				updating_group = true;
				switch_1_changes.group = /*selected*/ ctx[0];
				add_flush_callback(() => updating_group = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(3:4) <FormField>",
		ctx
	});

	return block;
}

// (9:6) 
function create_label_slot(ctx) {
	let span;
	let t0_value = /*option*/ ctx[4].name + "";
	let t0;
	let t1_value = (/*option*/ ctx[4].disabled ? " (disabled)" : "") + "";
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$1, 8, 6, 196);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(9:6) ",
		ctx
	});

	return block;
}

// (1:0) {#each options as option}
function create_each_block(ctx) {
	let div;
	let formfield;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot_1$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(formfield.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(formfield.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin", "18px 0");
			add_location(div, file$1, 1, 2, 28);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(formfield, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfield_changes = {};

			if (dirty & /*$$scope, selected*/ 129) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(formfield);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(1:0) {#each options as option}",
		ctx
	});

	return block;
}

// (17:2) <Button     on:click={() => {       const idx = selected.indexOf('Doc');       if (idx > -1) {         selected.splice(idx, 1);       } else {         selected.push('Doc');       }       selected = selected;     }}   >
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle Doc Programmatically");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle Doc Programmatically");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(17:2) <Button     on:click={() => {       const idx = selected.indexOf('Doc');       if (idx > -1) {         selected.splice(idx, 1);       } else {         selected.push('Doc');       }       selected = selected;     }}   >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let div;
	let button;
	let t1;
	let pre;
	let t2;
	let t3_value = /*selected*/ ctx[0].join(", ") + "";
	let t3;
	let current;
	let each_value = /*options*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[3]);

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div = element("div");
			create_component(button.$$.fragment);
			t1 = space();
			pre = element("pre");
			t2 = text("Selected: ");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Selected: ");
			t3 = claim_text(pre_nodes, t3_value);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-top", "1em");
			add_location(div, file$1, 15, 0, 325);
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 31, 0, 629);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t2);
			append_dev(pre, t3);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*options, selected*/ 3) {
				each_value = /*options*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if ((!current || dirty & /*selected*/ 1) && t3_value !== (t3_value = /*selected*/ ctx[0].join(", ") + "")) set_data_dev(t3, t3_value);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Group", slots, []);

	let options = [
		{ name: "Bashful", disabled: false },
		{ name: "Doc", disabled: true },
		{ name: "Dopey", disabled: false },
		{ name: "Happy", disabled: false },
		{ name: "Sleepy", disabled: false },
		{ name: "Sneezy", disabled: false },
		{ name: "Grumpy", disabled: false }
	];

	let selected = ["Happy", "Grumpy"];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Group> was created with unknown prop '${key}'`);
	});

	function switch_1_group_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	const click_handler = () => {
		const idx = selected.indexOf("Doc");

		if (idx > -1) {
			selected.splice(idx, 1);
		} else {
			selected.push("Doc");
		}

		$$invalidate(0, selected);
	};

	$$self.$capture_state = () => ({
		Switch: Switch$1,
		FormField,
		Button: Button_1,
		options,
		selected
	});

	$$self.$inject_state = $$props => {
		if ("options" in $$props) $$invalidate(1, options = $$props.options);
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected, options, switch_1_group_binding, click_handler];
}

class Group extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Group",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/switch/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/switch/index.svelte";

// (12:2) <Demo component={PrimaryColor} file="switch/_PrimaryColor.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Primary color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Primary color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(12:2) <Demo component={PrimaryColor} file=\\\"switch/_PrimaryColor.svelte\\\">",
		ctx
	});

	return block;
}

// (16:2) <Demo component={Group} file="switch/_Group.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Group switch");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Group switch");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(16:2) <Demo component={Group} file=\\\"switch/_Group.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "switch/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: PrimaryColor,
				file: "switch/_PrimaryColor.svelte",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Group,
				file: "switch/_Group.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Switch");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/switch");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-jt4y6i\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Switch");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/switch");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Switch - SMUI";
			add_location(h2, file, 5, 2, 73);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 92);
			add_location(section, file, 4, 0, 61);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Switch", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Switch> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Simple, PrimaryColor, Group });
	return [];
}

class Switch extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Switch",
			options,
			id: create_fragment.name
		});
	}
}

export default Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
