import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';

/* SAPPER.md generated by Svelte v3.37.0 */

const file$1 = "SAPPER.md";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let sub;
	let t2;
	let t3;
	let p0;
	let t4;
	let a;
	let t5;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9;
	let pre0;
	let raw0_value = `<code class="language-sh">npm install --save-dev rollup-plugin-postcss sass</code>` + "";
	let t10;
	let p2;
	let t11;
	let code0;
	let t12;
	let t13;
	let t14;
	let pre1;
	let raw1_value = `<code class="language-sh">npx smui-theme template src/theme</code>` + "";
	let t15;
	let p3;
	let t16;
	let code1;
	let t17;
	let t18;
	let t19;
	let pre2;

	let raw2_value = `<code class="language-js"><span class="token comment">// ...</span>
<span class="token comment">// Put this along with the other imports.</span>
<span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">"rollup-plugin-postcss"</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// Insert the following right before the "export default &#123;" line:</span>
<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">extract</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  extract<span class="token operator">:</span> extract <span class="token operator">?</span> <span class="token string">'smui.css'</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  use<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">'sass'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/theme'</span><span class="token punctuation">,</span> <span class="token string">'./node_modules'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Right after the "svelte" plugin in the "client:" section, paste the following plugin.</span>
<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

<span class="token comment">// Right after the "svelte" plugin in the "server:" section, paste the following plugin.</span>
<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

<span class="token comment">// Don't touch the "serviceworker:" section.</span>
<span class="token comment">// ...</span></code>` + "";

	let t20;
	let p4;
	let t21;
	let code2;
	let t22;
	let t23;
	let code3;
	let t24;
	let t25;
	let code4;
	let t26;
	let t27;
	let t28;
	let pre3;

	let raw3_value = `<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- Material Icons --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/icon?family=Material+Icons<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- Roboto --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Roboto:300,400,500,600,700<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span></code>` + "";

	let t29;
	let p5;
	let t30;
	let t31;
	let pre4;

	let raw4_value = `<code class="language-svelte">&lt;Button on:click=&#123;() => alert('Clicked!')&#125;>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'@smui/button'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>` + "";

	let t32;
	let h2;
	let t33;
	let t34;
	let p6;
	let t35;
	let t36;
	let pre5;

	let raw5_value = `<code class="language-js"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  extract<span class="token operator">:</span> <span class="token string">'smui.css'</span><span class="token punctuation">,</span>
  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  onExtract<span class="token operator">:</span> light
    <span class="token operator">?</span> <span class="token function-variable function">null</span>
    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">getExtracted</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getExtracted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cssnano'</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> css <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/smui-dark.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
            fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  use<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">'sass'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./src/theme</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>light <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'/dark'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token string">'./node_modules'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>` + "";

	let t37;
	let p7;
	let t38;
	let t39;
	let p8;
	let t40;
	let t41;
	let p9;
	let t42;
	let t43;
	let pre6;

	let raw6_value = `<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span>
  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(prefers-color-scheme: light)<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui-dark.css<span class="token punctuation">"</span></span>
  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (prefers-color-scheme: dark)<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span></code>` + "";

	let t44;
	let p10;
	let t45;
	let t46;
	let pre7;

	let raw7_value = `<code class="language-js"><span class="token keyword">let</span> lightTheme <span class="token operator">=</span>
  <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span>
  window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: light)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">switchTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lightTheme <span class="token operator">=</span> <span class="token operator">!</span>lightTheme<span class="token punctuation">;</span>
  <span class="token keyword">let</span> themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#theme'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>themeLink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    themeLink<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">'stylesheet'</span><span class="token punctuation">;</span>
    themeLink<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'theme'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  themeLink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">client/smui</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>lightTheme <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'-dark'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>head
    <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'link[href="client/smui-dark.css"]'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">'afterend'</span><span class="token punctuation">,</span> themeLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>` + "";

	let t47;
	let p11;
	let t48;
	let code5;
	let t49;
	let t50;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Integration for Sapper");
			t1 = space();
			sub = element("sub");
			t2 = text("\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!");
			t3 = space();
			p0 = element("p");
			t4 = text("These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the ");
			a = element("a");
			t5 = text("Easy Styling Method");
			t6 = text(".");
			t7 = space();
			p1 = element("p");
			t8 = text("Install the following packages as dev dependencies.");
			t9 = space();
			pre0 = element("pre");
			t10 = space();
			p2 = element("p");
			t11 = text("Create the ");
			code0 = element("code");
			t12 = text("src/theme/_smui-theme.scss");
			t13 = text(" file.");
			t14 = space();
			pre1 = element("pre");
			t15 = space();
			p3 = element("p");
			t16 = text("Update ");
			code1 = element("code");
			t17 = text("rollup.config.js");
			t18 = text(" with the following configuration.");
			t19 = space();
			pre2 = element("pre");
			t20 = space();
			p4 = element("p");
			t21 = text("In the ");
			code2 = element("code");
			t22 = text("template.html");
			t23 = text(" file, in the ");
			code3 = element("code");
			t24 = text("<head>");
			t25 = text(" section right after ");
			code4 = element("code");
			t26 = text("%sapper.base%");
			t27 = text(", paste the following.");
			t28 = space();
			pre3 = element("pre");
			t29 = space();
			p5 = element("p");
			t30 = text("You’re now ready to use SMUI packages. Here’s some example code.");
			t31 = space();
			pre4 = element("pre");
			t32 = space();
			h2 = element("h2");
			t33 = text("Dark Mode");
			t34 = space();
			p6 = element("p");
			t35 = text("The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions.");
			t36 = space();
			pre5 = element("pre");
			t37 = space();
			p7 = element("p");
			t38 = text("This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration.");
			t39 = space();
			p8 = element("p");
			t40 = text("If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme.");
			t41 = space();
			p9 = element("p");
			t42 = text("Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following.");
			t43 = space();
			pre6 = element("pre");
			t44 = space();
			p10 = element("p");
			t45 = text("This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following.");
			t46 = space();
			pre7 = element("pre");
			t47 = space();
			p11 = element("p");
			t48 = text("Now just call ");
			code5 = element("code");
			t49 = text("switchTheme()");
			t50 = text(" from a toggle button or something, and the theme will be switched to the other one.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { id: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Integration for Sapper");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			sub = claim_element(nodes, "SUB", {});
			var sub_nodes = children(sub);
			t2 = claim_text(sub_nodes, "\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!");
			sub_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, "These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the ");
			a = claim_element(p0_nodes, "A", { href: true });
			var a_nodes = children(a);
			t5 = claim_text(a_nodes, "Easy Styling Method");
			a_nodes.forEach(detach_dev);
			t6 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t8 = claim_text(p1_nodes, "Install the following packages as dev dependencies.");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			pre0_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Create the ");
			code0 = claim_element(p2_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t12 = claim_text(code0_nodes, "src/theme/_smui-theme.scss");
			code0_nodes.forEach(detach_dev);
			t13 = claim_text(p2_nodes, " file.");
			p2_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			pre1_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t16 = claim_text(p3_nodes, "Update ");
			code1 = claim_element(p3_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t17 = claim_text(code1_nodes, "rollup.config.js");
			code1_nodes.forEach(detach_dev);
			t18 = claim_text(p3_nodes, " with the following configuration.");
			p3_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			pre2 = claim_element(nodes, "PRE", { class: true });
			var pre2_nodes = children(pre2);
			pre2_nodes.forEach(detach_dev);
			t20 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t21 = claim_text(p4_nodes, "In the ");
			code2 = claim_element(p4_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t22 = claim_text(code2_nodes, "template.html");
			code2_nodes.forEach(detach_dev);
			t23 = claim_text(p4_nodes, " file, in the ");
			code3 = claim_element(p4_nodes, "CODE", {});
			var code3_nodes = children(code3);
			t24 = claim_text(code3_nodes, "<head>");
			code3_nodes.forEach(detach_dev);
			t25 = claim_text(p4_nodes, " section right after ");
			code4 = claim_element(p4_nodes, "CODE", {});
			var code4_nodes = children(code4);
			t26 = claim_text(code4_nodes, "%sapper.base%");
			code4_nodes.forEach(detach_dev);
			t27 = claim_text(p4_nodes, ", paste the following.");
			p4_nodes.forEach(detach_dev);
			t28 = claim_space(nodes);
			pre3 = claim_element(nodes, "PRE", { class: true });
			var pre3_nodes = children(pre3);
			pre3_nodes.forEach(detach_dev);
			t29 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children(p5);
			t30 = claim_text(p5_nodes, "You’re now ready to use SMUI packages. Here’s some example code.");
			p5_nodes.forEach(detach_dev);
			t31 = claim_space(nodes);
			pre4 = claim_element(nodes, "PRE", { class: true });
			var pre4_nodes = children(pre4);
			pre4_nodes.forEach(detach_dev);
			t32 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { id: true });
			var h2_nodes = children(h2);
			t33 = claim_text(h2_nodes, "Dark Mode");
			h2_nodes.forEach(detach_dev);
			t34 = claim_space(nodes);
			p6 = claim_element(nodes, "P", {});
			var p6_nodes = children(p6);
			t35 = claim_text(p6_nodes, "The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions.");
			p6_nodes.forEach(detach_dev);
			t36 = claim_space(nodes);
			pre5 = claim_element(nodes, "PRE", { class: true });
			var pre5_nodes = children(pre5);
			pre5_nodes.forEach(detach_dev);
			t37 = claim_space(nodes);
			p7 = claim_element(nodes, "P", {});
			var p7_nodes = children(p7);
			t38 = claim_text(p7_nodes, "This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration.");
			p7_nodes.forEach(detach_dev);
			t39 = claim_space(nodes);
			p8 = claim_element(nodes, "P", {});
			var p8_nodes = children(p8);
			t40 = claim_text(p8_nodes, "If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme.");
			p8_nodes.forEach(detach_dev);
			t41 = claim_space(nodes);
			p9 = claim_element(nodes, "P", {});
			var p9_nodes = children(p9);
			t42 = claim_text(p9_nodes, "Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following.");
			p9_nodes.forEach(detach_dev);
			t43 = claim_space(nodes);
			pre6 = claim_element(nodes, "PRE", { class: true });
			var pre6_nodes = children(pre6);
			pre6_nodes.forEach(detach_dev);
			t44 = claim_space(nodes);
			p10 = claim_element(nodes, "P", {});
			var p10_nodes = children(p10);
			t45 = claim_text(p10_nodes, "This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following.");
			p10_nodes.forEach(detach_dev);
			t46 = claim_space(nodes);
			pre7 = claim_element(nodes, "PRE", { class: true });
			var pre7_nodes = children(pre7);
			pre7_nodes.forEach(detach_dev);
			t47 = claim_space(nodes);
			p11 = claim_element(nodes, "P", {});
			var p11_nodes = children(p11);
			t48 = claim_text(p11_nodes, "Now just call ");
			code5 = claim_element(p11_nodes, "CODE", {});
			var code5_nodes = children(code5);
			t49 = claim_text(code5_nodes, "switchTheme()");
			code5_nodes.forEach(detach_dev);
			t50 = claim_text(p11_nodes, " from a toggle button or something, and the theme will be switched to the other one.");
			p11_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "id", "integration-for-sapper");
			add_location(h1, file$1, 1, 0, 1);
			add_location(sub, file$1, 2, 0, 61);
			attr_dev(a, "href", "SASS.md#easy-styling-method");
			add_location(a, file$1, 3, 136, 300);
			add_location(p0, file$1, 3, 0, 164);
			add_location(p1, file$1, 6, 0, 370);
			attr_dev(pre0, "class", "language-sh");
			add_location(pre0, file$1, 7, 0, 429);
			add_location(code0, file$1, 8, 14, 567);
			add_location(p2, file$1, 8, 0, 553);
			attr_dev(pre1, "class", "language-sh");
			add_location(pre1, file$1, 9, 0, 617);
			add_location(code1, file$1, 10, 10, 735);
			add_location(p3, file$1, 10, 0, 725);
			attr_dev(pre2, "class", "language-js");
			add_location(pre2, file$1, 11, 0, 803);
			add_location(code2, file$1, 40, 10, 4350);
			add_location(code3, file$1, 40, 50, 4390);
			add_location(code4, file$1, 40, 96, 4436);
			add_location(p4, file$1, 40, 0, 4340);
			attr_dev(pre3, "class", "language-html");
			add_location(pre3, file$1, 41, 0, 4489);
			add_location(p5, file$1, 53, 0, 6641);
			attr_dev(pre4, "class", "language-svelte");
			add_location(pre4, file$1, 54, 0, 6713);
			attr_dev(h2, "id", "dark-mode");
			add_location(h2, file$1, 59, 0, 7580);
			add_location(p6, file$1, 60, 0, 7614);
			attr_dev(pre5, "class", "language-js");
			add_location(pre5, file$1, 61, 0, 7932);
			add_location(p7, file$1, 90, 0, 13785);
			add_location(p8, file$1, 91, 0, 13959);
			add_location(p9, file$1, 92, 0, 14153);
			attr_dev(pre6, "class", "language-html");
			add_location(pre6, file$1, 93, 0, 14276);
			add_location(p10, file$1, 104, 0, 16124);
			attr_dev(pre7, "class", "language-js");
			add_location(pre7, file$1, 105, 0, 16317);
			add_location(code5, file$1, 121, 17, 20068);
			add_location(p11, file$1, 121, 0, 20051);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, sub, anchor);
			append_dev(sub, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t4);
			append_dev(p0, a);
			append_dev(a, t5);
			append_dev(p0, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			append_dev(p2, code0);
			append_dev(code0, t12);
			append_dev(p2, t13);
			insert_dev(target, t14, anchor);
			insert_dev(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			insert_dev(target, t15, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t16);
			append_dev(p3, code1);
			append_dev(code1, t17);
			append_dev(p3, t18);
			insert_dev(target, t19, anchor);
			insert_dev(target, pre2, anchor);
			pre2.innerHTML = raw2_value;
			insert_dev(target, t20, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t21);
			append_dev(p4, code2);
			append_dev(code2, t22);
			append_dev(p4, t23);
			append_dev(p4, code3);
			append_dev(code3, t24);
			append_dev(p4, t25);
			append_dev(p4, code4);
			append_dev(code4, t26);
			append_dev(p4, t27);
			insert_dev(target, t28, anchor);
			insert_dev(target, pre3, anchor);
			pre3.innerHTML = raw3_value;
			insert_dev(target, t29, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, t30);
			insert_dev(target, t31, anchor);
			insert_dev(target, pre4, anchor);
			pre4.innerHTML = raw4_value;
			insert_dev(target, t32, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t33);
			insert_dev(target, t34, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t35);
			insert_dev(target, t36, anchor);
			insert_dev(target, pre5, anchor);
			pre5.innerHTML = raw5_value;
			insert_dev(target, t37, anchor);
			insert_dev(target, p7, anchor);
			append_dev(p7, t38);
			insert_dev(target, t39, anchor);
			insert_dev(target, p8, anchor);
			append_dev(p8, t40);
			insert_dev(target, t41, anchor);
			insert_dev(target, p9, anchor);
			append_dev(p9, t42);
			insert_dev(target, t43, anchor);
			insert_dev(target, pre6, anchor);
			pre6.innerHTML = raw6_value;
			insert_dev(target, t44, anchor);
			insert_dev(target, p10, anchor);
			append_dev(p10, t45);
			insert_dev(target, t46, anchor);
			insert_dev(target, pre7, anchor);
			pre7.innerHTML = raw7_value;
			insert_dev(target, t47, anchor);
			insert_dev(target, p11, anchor);
			append_dev(p11, t48);
			append_dev(p11, code5);
			append_dev(code5, t49);
			append_dev(p11, t50);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(sub);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(pre1);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(pre2);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(pre3);
			if (detaching) detach_dev(t29);
			if (detaching) detach_dev(p5);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(pre4);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t34);
			if (detaching) detach_dev(p6);
			if (detaching) detach_dev(t36);
			if (detaching) detach_dev(pre5);
			if (detaching) detach_dev(t37);
			if (detaching) detach_dev(p7);
			if (detaching) detach_dev(t39);
			if (detaching) detach_dev(p8);
			if (detaching) detach_dev(t41);
			if (detaching) detach_dev(p9);
			if (detaching) detach_dev(t43);
			if (detaching) detach_dev(pre6);
			if (detaching) detach_dev(t44);
			if (detaching) detach_dev(p10);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(pre7);
			if (detaching) detach_dev(t47);
			if (detaching) detach_dev(p11);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SAPPER", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SAPPER> was created with unknown prop '${key}'`);
	});

	return [];
}

class SAPPER extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SAPPER",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/SAPPER.md.svelte generated by Svelte v3.37.0 */
const file = "src/routes/SAPPER.md.svelte";

function create_fragment(ctx) {
	let t;
	let section;
	let sapper;
	let current;
	sapper = new SAPPER({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			create_component(sapper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-12erzwb\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(sapper.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper - SMUI";
			attr_dev(section, "class", "markdown");
			add_location(section, file, 4, 0, 61);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			mount_component(sapper, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(sapper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sapper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_component(sapper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SAPPER_md", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SAPPER_md> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Sapper: SAPPER });
	return [];
}

class SAPPER_md extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SAPPER_md",
			options,
			id: create_fragment.name
		});
	}
}

export default SAPPER_md;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0FQUEVSLm1kLmRkMmVkNTIwLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
