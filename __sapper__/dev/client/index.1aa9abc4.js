import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, bf as Drawer$1, bg as AppContent, v as validate_slots, bh as Content, L as List, I as Item, T as Text, p as element, q as create_component, o as space, x as claim_element, y as children, A as claim_component, w as claim_space, u as detach_dev, E as attr_dev, D as add_location, F as insert_dev, H as mount_component, G as append_dev, J as transition_in, K as transition_out, M as destroy_component, t as text, z as claim_text, aw as set_data_dev, a6 as binding_callbacks, ak as bind, bi as Header, bj as Title, bk as Subtitle, al as add_flush_callback, a7 as create_slot, $ as assign, W as compute_rest_props, aP as forwardEventsBuilder, Y as get_current_component, a0 as exclude_internal_props, aQ as useActions, a9 as set_attributes, aa as action_destroyer, a8 as update_slot, a2 as get_spread_update, ab as is_function, ac as run_all, bl as Scrim, aS as Separator, bm as Subheader, B as set_style, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { B as Button_1 } from './Button.d66ce348.js';
import { C as CommonLabel } from './CommonLabel.6290f478.js';
import { G as Graphic } from './Graphic.805b8c09.js';

/* src/routes/demo/drawer/_Permanent.svelte generated by Svelte v3.37.0 */
const file$4 = "src/routes/demo/drawer/_Permanent.svelte";

// (9:10) <Text>
function create_default_slot_13$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Gray Kittens");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Gray Kittens");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13$2.name,
		type: "slot",
		source: "(9:10) <Text>",
		ctx
	});

	return block;
}

// (5:8) <Item           href="javascript:void(0)"           on:click={() => (clicked = 'Gray Kittens')}         >
function create_default_slot_12$2(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_13$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12$2.name,
		type: "slot",
		source: "(5:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => (clicked = 'Gray Kittens')}         >",
		ctx
	});

	return block;
}

// (15:10) <Text>
function create_default_slot_11$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A Space Rocket");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A Space Rocket");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11$2.name,
		type: "slot",
		source: "(15:10) <Text>",
		ctx
	});

	return block;
}

// (11:8) <Item           href="javascript:void(0)"           on:click={() => (clicked = 'A Space Rocket')}         >
function create_default_slot_10$2(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_11$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10$2.name,
		type: "slot",
		source: "(11:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => (clicked = 'A Space Rocket')}         >",
		ctx
	});

	return block;
}

// (21:10) <Text>
function create_default_slot_9$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("100 Pounds of Gravel");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "100 Pounds of Gravel");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$2.name,
		type: "slot",
		source: "(21:10) <Text>",
		ctx
	});

	return block;
}

// (17:8) <Item           href="javascript:void(0)"           on:click={() => (clicked = '100 Pounds of Gravel')}         >
function create_default_slot_8$2(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_9$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$2.name,
		type: "slot",
		source: "(17:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => (clicked = '100 Pounds of Gravel')}         >",
		ctx
	});

	return block;
}

// (27:10) <Text>
function create_default_slot_7$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("All of the Shrimp");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "All of the Shrimp");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$2.name,
		type: "slot",
		source: "(27:10) <Text>",
		ctx
	});

	return block;
}

// (23:8) <Item           href="javascript:void(0)"           on:click={() => (clicked = 'All of the Shrimp')}         >
function create_default_slot_6$2(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_7$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$2.name,
		type: "slot",
		source: "(23:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => (clicked = 'All of the Shrimp')}         >",
		ctx
	});

	return block;
}

// (33:10) <Text>
function create_default_slot_5$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A Planet with a Mall");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A Planet with a Mall");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$2.name,
		type: "slot",
		source: "(33:10) <Text>",
		ctx
	});

	return block;
}

// (29:8) <Item           href="javascript:void(0)"           on:click={() => (clicked = 'A Planet with a Mall')}         >
function create_default_slot_4$2(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_5$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$2.name,
		type: "slot",
		source: "(29:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => (clicked = 'A Planet with a Mall')}         >",
		ctx
	});

	return block;
}

// (4:6) <List>
function create_default_slot_3$2(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let t3;
	let item4;
	let current;

	item0 = new Item({
			props: {
				href: "javascript:void(0)",
				$$slots: { default: [create_default_slot_12$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item0.$on("click", /*click_handler*/ ctx[1]);

	item1 = new Item({
			props: {
				href: "javascript:void(0)",
				$$slots: { default: [create_default_slot_10$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item1.$on("click", /*click_handler_1*/ ctx[2]);

	item2 = new Item({
			props: {
				href: "javascript:void(0)",
				$$slots: { default: [create_default_slot_8$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item2.$on("click", /*click_handler_2*/ ctx[3]);

	item3 = new Item({
			props: {
				href: "javascript:void(0)",
				$$slots: { default: [create_default_slot_6$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item3.$on("click", /*click_handler_3*/ ctx[4]);

	item4 = new Item({
			props: {
				href: "javascript:void(0)",
				$$slots: { default: [create_default_slot_4$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item4.$on("click", /*click_handler_4*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
			t3 = space();
			create_component(item4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(item0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(item1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(item2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(item3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(item4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(item0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(item3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(item4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				item0_changes.$$scope = { dirty, ctx };
			}

			item0.$set(item0_changes);
			const item1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				item1_changes.$$scope = { dirty, ctx };
			}

			item1.$set(item1_changes);
			const item2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				item2_changes.$$scope = { dirty, ctx };
			}

			item2.$set(item2_changes);
			const item3_changes = {};

			if (dirty & /*$$scope*/ 64) {
				item3_changes.$$scope = { dirty, ctx };
			}

			item3.$set(item3_changes);
			const item4_changes = {};

			if (dirty & /*$$scope*/ 64) {
				item4_changes.$$scope = { dirty, ctx };
			}

			item4.$set(item4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			transition_in(item4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			transition_out(item4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(item1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(item2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(item3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(item4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(4:6) <List>",
		ctx
	});

	return block;
}

// (3:4) <Content>
function create_default_slot_2$3(ctx) {
	let list;
	let current;

	list = new List({
			props: {
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(list.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(list.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(list, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const list_changes = {};

			if (dirty & /*$$scope, clicked*/ 65) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(list, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(3:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Drawer>
function create_default_slot_1$3(ctx) {
	let content;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const content_changes = {};

			if (dirty & /*$$scope, clicked*/ 65) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(2:2) <Drawer>",
		ctx
	});

	return block;
}

// (39:2) <AppContent class="app-content">
function create_default_slot$3(ctx) {
	let main;
	let t0;
	let br;
	let t1;
	let pre;
	let t2;
	let t3;

	const block = {
		c: function create() {
			main = element("main");
			t0 = text("App content.\n      ");
			br = element("br");
			t1 = space();
			pre = element("pre");
			t2 = text("Clicked: ");
			t3 = text(/*clicked*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			t0 = claim_text(main_nodes, "App content.\n      ");
			br = claim_element(main_nodes, "BR", { class: true });
			t1 = claim_space(main_nodes);
			pre = claim_element(main_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Clicked: ");
			t3 = claim_text(pre_nodes, /*clicked*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "class", "svelte-lq8geb");
			add_location(br, file$4, 41, 6, 1079);
			attr_dev(pre, "class", "status svelte-lq8geb");
			add_location(pre, file$4, 42, 6, 1092);
			attr_dev(main, "class", "main-content svelte-lq8geb");
			add_location(main, file$4, 39, 4, 1026);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, t0);
			append_dev(main, br);
			append_dev(main, t1);
			append_dev(main, pre);
			append_dev(pre, t2);
			append_dev(pre, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*clicked*/ 1) set_data_dev(t3, /*clicked*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(39:2) <AppContent class=\\\"app-content\\\">",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let div;
	let drawer;
	let t;
	let appcontent;
	let current;

	drawer = new Drawer$1({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	appcontent = new AppContent({
			props: {
				class: "app-content",
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(drawer.$$.fragment);
			t = space();
			create_component(appcontent.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(drawer.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(appcontent.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "drawer-container svelte-lq8geb");
			add_location(div, file$4, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(drawer, div, null);
			append_dev(div, t);
			mount_component(appcontent, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const drawer_changes = {};

			if (dirty & /*$$scope, clicked*/ 65) {
				drawer_changes.$$scope = { dirty, ctx };
			}

			drawer.$set(drawer_changes);
			const appcontent_changes = {};

			if (dirty & /*$$scope, clicked*/ 65) {
				appcontent_changes.$$scope = { dirty, ctx };
			}

			appcontent.$set(appcontent_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(drawer.$$.fragment, local);
			transition_in(appcontent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(drawer.$$.fragment, local);
			transition_out(appcontent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(drawer);
			destroy_component(appcontent);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Permanent", slots, []);
	let clicked = "nothing yet";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Permanent> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, clicked = "Gray Kittens");
	const click_handler_1 = () => $$invalidate(0, clicked = "A Space Rocket");
	const click_handler_2 = () => $$invalidate(0, clicked = "100 Pounds of Gravel");
	const click_handler_3 = () => $$invalidate(0, clicked = "All of the Shrimp");
	const click_handler_4 = () => $$invalidate(0, clicked = "A Planet with a Mall");

	$$self.$capture_state = () => ({
		Drawer: Drawer$1,
		AppContent,
		Content,
		List,
		Item,
		Text,
		clicked
	});

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		clicked,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class Permanent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Permanent",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/demo/drawer/_Dismissible.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/drawer/_Dismissible.svelte";

// (4:6) <Title>
function create_default_slot_18$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Super Drawer");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Super Drawer");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18$1.name,
		type: "slot",
		source: "(4:6) <Title>",
		ctx
	});

	return block;
}

// (5:6) <Subtitle>
function create_default_slot_17$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("It's the best drawer.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "It's the best drawer.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17$1.name,
		type: "slot",
		source: "(5:6) <Subtitle>",
		ctx
	});

	return block;
}

// (3:4) <Header>
function create_default_slot_16$1(ctx) {
	let title;
	let t;
	let subtitle;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_18$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	subtitle = new Subtitle({
			props: {
				$$slots: { default: [create_default_slot_17$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(subtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(subtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(subtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const subtitle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				subtitle_changes.$$scope = { dirty, ctx };
			}

			subtitle.$set(subtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(subtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(subtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(subtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16$1.name,
		type: "slot",
		source: "(3:4) <Header>",
		ctx
	});

	return block;
}

// (14:10) <Text>
function create_default_slot_15$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Gray Kittens");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Gray Kittens");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15$1.name,
		type: "slot",
		source: "(14:10) <Text>",
		ctx
	});

	return block;
}

// (9:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Gray Kittens')}           activated={active === 'Gray Kittens'}         >
function create_default_slot_14$1(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_15$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14$1.name,
		type: "slot",
		source: "(9:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Gray Kittens')}           activated={active === 'Gray Kittens'}         >",
		ctx
	});

	return block;
}

// (21:10) <Text>
function create_default_slot_13$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A Space Rocket");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A Space Rocket");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13$1.name,
		type: "slot",
		source: "(21:10) <Text>",
		ctx
	});

	return block;
}

// (16:8) <Item           href="javascript:void(0)"           on:click={() => setActive('A Space Rocket')}           activated={active === 'A Space Rocket'}         >
function create_default_slot_12$1(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_13$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12$1.name,
		type: "slot",
		source: "(16:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('A Space Rocket')}           activated={active === 'A Space Rocket'}         >",
		ctx
	});

	return block;
}

// (28:10) <Text>
function create_default_slot_11$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("100 Pounds of Gravel");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "100 Pounds of Gravel");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11$1.name,
		type: "slot",
		source: "(28:10) <Text>",
		ctx
	});

	return block;
}

// (23:8) <Item           href="javascript:void(0)"           on:click={() => setActive('100 Pounds of Gravel')}           activated={active === '100 Pounds of Gravel'}         >
function create_default_slot_10$1(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_11$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10$1.name,
		type: "slot",
		source: "(23:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('100 Pounds of Gravel')}           activated={active === '100 Pounds of Gravel'}         >",
		ctx
	});

	return block;
}

// (35:10) <Text>
function create_default_slot_9$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("All of the Shrimp");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "All of the Shrimp");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$1.name,
		type: "slot",
		source: "(35:10) <Text>",
		ctx
	});

	return block;
}

// (30:8) <Item           href="javascript:void(0)"           on:click={() => setActive('All of the Shrimp')}           activated={active === 'All of the Shrimp'}         >
function create_default_slot_8$1(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_9$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$1.name,
		type: "slot",
		source: "(30:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('All of the Shrimp')}           activated={active === 'All of the Shrimp'}         >",
		ctx
	});

	return block;
}

// (42:10) <Text>
function create_default_slot_7$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A Planet with a Mall");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A Planet with a Mall");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$1.name,
		type: "slot",
		source: "(42:10) <Text>",
		ctx
	});

	return block;
}

// (37:8) <Item           href="javascript:void(0)"           on:click={() => setActive('A Planet with a Mall')}           activated={active === 'A Planet with a Mall'}         >
function create_default_slot_6$1(ctx) {
	let text_1;
	let current;

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_7$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$1.name,
		type: "slot",
		source: "(37:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('A Planet with a Mall')}           activated={active === 'A Planet with a Mall'}         >",
		ctx
	});

	return block;
}

// (8:6) <List>
function create_default_slot_5$1(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let t3;
	let item4;
	let current;

	item0 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Gray Kittens",
				$$slots: { default: [create_default_slot_14$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item0.$on("click", /*click_handler*/ ctx[3]);

	item1 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "A Space Rocket",
				$$slots: { default: [create_default_slot_12$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item1.$on("click", /*click_handler_1*/ ctx[4]);

	item2 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "100 Pounds of Gravel",
				$$slots: { default: [create_default_slot_10$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item2.$on("click", /*click_handler_2*/ ctx[5]);

	item3 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "All of the Shrimp",
				$$slots: { default: [create_default_slot_8$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item3.$on("click", /*click_handler_3*/ ctx[6]);

	item4 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "A Planet with a Mall",
				$$slots: { default: [create_default_slot_6$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item4.$on("click", /*click_handler_4*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
			t3 = space();
			create_component(item4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(item0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(item1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(item2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(item3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(item4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(item0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(item3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(item4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item0_changes = {};
			if (dirty & /*active*/ 2) item0_changes.activated = /*active*/ ctx[1] === "Gray Kittens";

			if (dirty & /*$$scope*/ 1024) {
				item0_changes.$$scope = { dirty, ctx };
			}

			item0.$set(item0_changes);
			const item1_changes = {};
			if (dirty & /*active*/ 2) item1_changes.activated = /*active*/ ctx[1] === "A Space Rocket";

			if (dirty & /*$$scope*/ 1024) {
				item1_changes.$$scope = { dirty, ctx };
			}

			item1.$set(item1_changes);
			const item2_changes = {};
			if (dirty & /*active*/ 2) item2_changes.activated = /*active*/ ctx[1] === "100 Pounds of Gravel";

			if (dirty & /*$$scope*/ 1024) {
				item2_changes.$$scope = { dirty, ctx };
			}

			item2.$set(item2_changes);
			const item3_changes = {};
			if (dirty & /*active*/ 2) item3_changes.activated = /*active*/ ctx[1] === "All of the Shrimp";

			if (dirty & /*$$scope*/ 1024) {
				item3_changes.$$scope = { dirty, ctx };
			}

			item3.$set(item3_changes);
			const item4_changes = {};
			if (dirty & /*active*/ 2) item4_changes.activated = /*active*/ ctx[1] === "A Planet with a Mall";

			if (dirty & /*$$scope*/ 1024) {
				item4_changes.$$scope = { dirty, ctx };
			}

			item4.$set(item4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			transition_in(item4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			transition_out(item4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(item1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(item2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(item3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(item4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$1.name,
		type: "slot",
		source: "(8:6) <List>",
		ctx
	});

	return block;
}

// (7:4) <Content>
function create_default_slot_4$1(ctx) {
	let list;
	let current;

	list = new List({
			props: {
				$$slots: { default: [create_default_slot_5$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(list.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(list.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(list, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const list_changes = {};

			if (dirty & /*$$scope, active*/ 1026) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(list, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(7:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Drawer variant="dismissible" bind:open>
function create_default_slot_3$1(ctx) {
	let header;
	let t;
	let content;
	let current;

	header = new Header({
			props: {
				$$slots: { default: [create_default_slot_16$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(header.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const header_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const content_changes = {};

			if (dirty & /*$$scope, active*/ 1026) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(2:2) <Drawer variant=\\\"dismissible\\\" bind:open>",
		ctx
	});

	return block;
}

// (51:9) <Label>
function create_default_slot_2$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle Drawer");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle Drawer");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(51:9) <Label>",
		ctx
	});

	return block;
}

// (50:6) <Button on:click={() => (open = !open)}         >
function create_default_slot_1$2(ctx) {
	let label;
	let current;

	label = new CommonLabel({
			props: {
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(50:6) <Button on:click={() => (open = !open)}         >",
		ctx
	});

	return block;
}

// (48:2) <AppContent class="app-content">
function create_default_slot$2(ctx) {
	let main;
	let button;
	let t0;
	let br;
	let t1;
	let pre;
	let t2;
	let t3;
	let current;

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_5*/ ctx[9]);

	const block = {
		c: function create() {
			main = element("main");
			create_component(button.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();
			pre = element("pre");
			t2 = text("Active: ");
			t3 = text(/*active*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			claim_component(button.$$.fragment, main_nodes);
			t0 = claim_space(main_nodes);
			br = claim_element(main_nodes, "BR", { class: true });
			t1 = claim_space(main_nodes);
			pre = claim_element(main_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Active: ");
			t3 = claim_text(pre_nodes, /*active*/ ctx[1]);
			pre_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "class", "svelte-lq8geb");
			add_location(br, file$3, 52, 6, 1560);
			attr_dev(pre, "class", "status svelte-lq8geb");
			add_location(pre, file$3, 53, 6, 1573);
			attr_dev(main, "class", "main-content svelte-lq8geb");
			add_location(main, file$3, 48, 4, 1426);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			mount_component(button, main, null);
			append_dev(main, t0);
			append_dev(main, br);
			append_dev(main, t1);
			append_dev(main, pre);
			append_dev(pre, t2);
			append_dev(pre, t3);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*active*/ 2) set_data_dev(t3, /*active*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(48:2) <AppContent class=\\\"app-content\\\">",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let drawer;
	let updating_open;
	let t;
	let appcontent;
	let current;

	function drawer_open_binding(value) {
		/*drawer_open_binding*/ ctx[8](value);
	}

	let drawer_props = {
		variant: "dismissible",
		$$slots: { default: [create_default_slot_3$1] },
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		drawer_props.open = /*open*/ ctx[0];
	}

	drawer = new Drawer$1({ props: drawer_props, $$inline: true });
	binding_callbacks.push(() => bind(drawer, "open", drawer_open_binding));

	appcontent = new AppContent({
			props: {
				class: "app-content",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(drawer.$$.fragment);
			t = space();
			create_component(appcontent.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(drawer.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(appcontent.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "drawer-container svelte-lq8geb");
			add_location(div, file$3, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(drawer, div, null);
			append_dev(div, t);
			mount_component(appcontent, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const drawer_changes = {};

			if (dirty & /*$$scope, active*/ 1026) {
				drawer_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 1) {
				updating_open = true;
				drawer_changes.open = /*open*/ ctx[0];
				add_flush_callback(() => updating_open = false);
			}

			drawer.$set(drawer_changes);
			const appcontent_changes = {};

			if (dirty & /*$$scope, active, open*/ 1027) {
				appcontent_changes.$$scope = { dirty, ctx };
			}

			appcontent.$set(appcontent_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(drawer.$$.fragment, local);
			transition_in(appcontent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(drawer.$$.fragment, local);
			transition_out(appcontent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(drawer);
			destroy_component(appcontent);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Dismissible", slots, []);
	let open = false;
	let active = "Gray Kittens";

	function setActive(value) {
		$$invalidate(1, active = value);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dismissible> was created with unknown prop '${key}'`);
	});

	const click_handler = () => setActive("Gray Kittens");
	const click_handler_1 = () => setActive("A Space Rocket");
	const click_handler_2 = () => setActive("100 Pounds of Gravel");
	const click_handler_3 = () => setActive("All of the Shrimp");
	const click_handler_4 = () => setActive("A Planet with a Mall");

	function drawer_open_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	const click_handler_5 = () => $$invalidate(0, open = !open);

	$$self.$capture_state = () => ({
		Drawer: Drawer$1,
		AppContent,
		Content,
		Header,
		Title,
		Subtitle,
		Button: Button_1,
		Label: CommonLabel,
		List,
		Item,
		Text,
		open,
		active,
		setActive
	});

	$$self.$inject_state = $$props => {
		if ("open" in $$props) $$invalidate(0, open = $$props.open);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		open,
		active,
		setActive,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		drawer_open_binding,
		click_handler_5
	];
}

class Dismissible extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dismissible",
			options,
			id: create_fragment$3.name
		});
	}
}

/* packages/common/H6.svelte generated by Svelte v3.37.0 */
const file$2 = "packages/common/H6.svelte";

function create_fragment$2(ctx) {
	let h6;
	let useActions_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let h6_levels = [/*$$restProps*/ ctx[3]];
	let h6_data = {};

	for (let i = 0; i < h6_levels.length; i += 1) {
		h6_data = assign(h6_data, h6_levels[i]);
	}

	const block = {
		c: function create() {
			h6 = element("h6");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			h6 = claim_element(nodes, "H6", {});
			var h6_nodes = children(h6);
			if (default_slot) default_slot.l(h6_nodes);
			h6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(h6, h6_data);
			add_location(h6, file$2, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h6, anchor);

			if (default_slot) {
				default_slot.m(h6, null);
			}

			/*h6_binding*/ ctx[7](h6);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useActions_action = useActions.call(null, h6, /*use*/ ctx[0])),
					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h6))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			set_attributes(h6, h6_data = get_spread_update(h6_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h6);
			if (default_slot) default_slot.d(detaching);
			/*h6_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["use","getElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("H6", slots, ['default']);
	let { use = [] } = $$props;
	const forwardEvents = forwardEventsBuilder(get_current_component());
	let element = null;

	function getElement() {
		return element;
	}

	function h6_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		forwardEventsBuilder,
		useActions,
		use,
		forwardEvents,
		element,
		getElement
	});

	$$self.$inject_state = $$new_props => {
		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
		if ("element" in $$props) $$invalidate(1, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		use,
		element,
		forwardEvents,
		$$restProps,
		getElement,
		$$scope,
		slots,
		h6_binding
	];
}

class H6 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { use: 0, getElement: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "H6",
			options,
			id: create_fragment$2.name
		});
	}

	get use() {
		throw new Error("<H6>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set use(value) {
		throw new Error("<H6>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getElement() {
		return this.$$.ctx[4];
	}

	set getElement(value) {
		throw new Error("<H6>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/demo/drawer/_Modal.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/drawer/_Modal.svelte";

// (6:6) <Title>
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Super Mail");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Super Mail");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(6:6) <Title>",
		ctx
	});

	return block;
}

// (7:6) <Subtitle>
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("It's the best fake mail app drawer.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "It's the best fake mail app drawer.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(7:6) <Subtitle>",
		ctx
	});

	return block;
}

// (5:4) <Header>
function create_default_slot_28(ctx) {
	let title;
	let t;
	let subtitle;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	subtitle = new Subtitle({
			props: {
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(subtitle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(subtitle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(subtitle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const subtitle_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				subtitle_changes.$$scope = { dirty, ctx };
			}

			subtitle.$set(subtitle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(subtitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(subtitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(subtitle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(5:4) <Header>",
		ctx
	});

	return block;
}

// (16:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("inbox");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "inbox");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(16:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (17:10) <Text>
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Inbox");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Inbox");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(17:10) <Text>",
		ctx
	});

	return block;
}

// (11:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Inbox')}           activated={active === 'Inbox'}         >
function create_default_slot_25(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(11:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Inbox')}           activated={active === 'Inbox'}         >",
		ctx
	});

	return block;
}

// (24:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("star");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "star");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(24:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (25:10) <Text>
function create_default_slot_23(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Star");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Star");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(25:10) <Text>",
		ctx
	});

	return block;
}

// (19:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Star')}           activated={active === 'Star'}         >
function create_default_slot_22(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(19:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Star')}           activated={active === 'Star'}         >",
		ctx
	});

	return block;
}

// (32:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("send");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "send");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(32:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (33:10) <Text>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Sent Mail");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Sent Mail");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(33:10) <Text>",
		ctx
	});

	return block;
}

// (27:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Sent Mail')}           activated={active === 'Sent Mail'}         >
function create_default_slot_19(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(27:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Sent Mail')}           activated={active === 'Sent Mail'}         >",
		ctx
	});

	return block;
}

// (40:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("drafts");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "drafts");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(40:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (41:10) <Text>
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Drafts");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Drafts");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(41:10) <Text>",
		ctx
	});

	return block;
}

// (35:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Drafts')}           activated={active === 'Drafts'}         >
function create_default_slot_16(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(35:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Drafts')}           activated={active === 'Drafts'}         >",
		ctx
	});

	return block;
}

// (45:8) <Subheader component={H6}>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Labels");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Labels");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(45:8) <Subheader component={H6}>",
		ctx
	});

	return block;
}

// (51:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(51:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (52:10) <Text>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Family");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Family");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(52:10) <Text>",
		ctx
	});

	return block;
}

// (46:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Family')}           activated={active === 'Family'}         >
function create_default_slot_12(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(46:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Family')}           activated={active === 'Family'}         >",
		ctx
	});

	return block;
}

// (59:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(59:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (60:10) <Text>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Friends");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Friends");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(60:10) <Text>",
		ctx
	});

	return block;
}

// (54:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Friends')}           activated={active === 'Friends'}         >
function create_default_slot_9(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(54:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Friends')}           activated={active === 'Friends'}         >",
		ctx
	});

	return block;
}

// (67:10) <Graphic class="material-icons" aria-hidden="true">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(67:10) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
		ctx
	});

	return block;
}

// (68:10) <Text>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Work");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Work");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(68:10) <Text>",
		ctx
	});

	return block;
}

// (62:8) <Item           href="javascript:void(0)"           on:click={() => setActive('Work')}           activated={active === 'Work'}         >
function create_default_slot_6(ctx) {
	let graphic;
	let t;
	let text_1;
	let current;

	graphic = new Graphic({
			props: {
				class: "material-icons",
				"aria-hidden": "true",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(graphic.$$.fragment);
			t = space();
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(graphic.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(graphic, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(text_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const graphic_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				graphic_changes.$$scope = { dirty, ctx };
			}

			graphic.$set(graphic_changes);
			const text_1_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				text_1_changes.$$scope = { dirty, ctx };
			}

			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(graphic.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(graphic.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(graphic, detaching);
			if (detaching) detach_dev(t);
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(62:8) <Item           href=\\\"javascript:void(0)\\\"           on:click={() => setActive('Work')}           activated={active === 'Work'}         >",
		ctx
	});

	return block;
}

// (10:6) <List>
function create_default_slot_5(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let t3;
	let separator;
	let t4;
	let subheader;
	let t5;
	let item4;
	let t6;
	let item5;
	let t7;
	let item6;
	let current;

	item0 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Inbox",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item0.$on("click", /*click_handler*/ ctx[3]);

	item1 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Star",
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item1.$on("click", /*click_handler_1*/ ctx[4]);

	item2 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Sent Mail",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item2.$on("click", /*click_handler_2*/ ctx[5]);

	item3 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Drafts",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item3.$on("click", /*click_handler_3*/ ctx[6]);
	separator = new Separator({ $$inline: true });

	subheader = new Subheader({
			props: {
				component: H6,
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item4 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Family",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item4.$on("click", /*click_handler_4*/ ctx[7]);

	item5 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Friends",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item5.$on("click", /*click_handler_5*/ ctx[8]);

	item6 = new Item({
			props: {
				href: "javascript:void(0)",
				activated: /*active*/ ctx[1] === "Work",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	item6.$on("click", /*click_handler_6*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
			t3 = space();
			create_component(separator.$$.fragment);
			t4 = space();
			create_component(subheader.$$.fragment);
			t5 = space();
			create_component(item4.$$.fragment);
			t6 = space();
			create_component(item5.$$.fragment);
			t7 = space();
			create_component(item6.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(item0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(item1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(item2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(item3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(separator.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(subheader.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(item4.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(item5.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(item6.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(item0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(item3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(separator, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(subheader, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(item4, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(item5, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(item6, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item0_changes = {};
			if (dirty & /*active*/ 2) item0_changes.activated = /*active*/ ctx[1] === "Inbox";

			if (dirty & /*$$scope*/ 4096) {
				item0_changes.$$scope = { dirty, ctx };
			}

			item0.$set(item0_changes);
			const item1_changes = {};
			if (dirty & /*active*/ 2) item1_changes.activated = /*active*/ ctx[1] === "Star";

			if (dirty & /*$$scope*/ 4096) {
				item1_changes.$$scope = { dirty, ctx };
			}

			item1.$set(item1_changes);
			const item2_changes = {};
			if (dirty & /*active*/ 2) item2_changes.activated = /*active*/ ctx[1] === "Sent Mail";

			if (dirty & /*$$scope*/ 4096) {
				item2_changes.$$scope = { dirty, ctx };
			}

			item2.$set(item2_changes);
			const item3_changes = {};
			if (dirty & /*active*/ 2) item3_changes.activated = /*active*/ ctx[1] === "Drafts";

			if (dirty & /*$$scope*/ 4096) {
				item3_changes.$$scope = { dirty, ctx };
			}

			item3.$set(item3_changes);
			const subheader_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				subheader_changes.$$scope = { dirty, ctx };
			}

			subheader.$set(subheader_changes);
			const item4_changes = {};
			if (dirty & /*active*/ 2) item4_changes.activated = /*active*/ ctx[1] === "Family";

			if (dirty & /*$$scope*/ 4096) {
				item4_changes.$$scope = { dirty, ctx };
			}

			item4.$set(item4_changes);
			const item5_changes = {};
			if (dirty & /*active*/ 2) item5_changes.activated = /*active*/ ctx[1] === "Friends";

			if (dirty & /*$$scope*/ 4096) {
				item5_changes.$$scope = { dirty, ctx };
			}

			item5.$set(item5_changes);
			const item6_changes = {};
			if (dirty & /*active*/ 2) item6_changes.activated = /*active*/ ctx[1] === "Work";

			if (dirty & /*$$scope*/ 4096) {
				item6_changes.$$scope = { dirty, ctx };
			}

			item6.$set(item6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(subheader.$$.fragment, local);
			transition_in(item4.$$.fragment, local);
			transition_in(item5.$$.fragment, local);
			transition_in(item6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(subheader.$$.fragment, local);
			transition_out(item4.$$.fragment, local);
			transition_out(item5.$$.fragment, local);
			transition_out(item6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(item1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(item2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(item3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(subheader, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(item4, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(item5, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(item6, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(10:6) <List>",
		ctx
	});

	return block;
}

// (9:4) <Content>
function create_default_slot_4(ctx) {
	let list;
	let current;

	list = new List({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(list.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(list.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(list, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const list_changes = {};

			if (dirty & /*$$scope, active*/ 4098) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(list, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(9:4) <Content>",
		ctx
	});

	return block;
}

// (4:2) <Drawer variant="modal" fixed={false} bind:open>
function create_default_slot_3(ctx) {
	let header;
	let t;
	let content;
	let current;

	header = new Header({
			props: {
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(header.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const header_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const content_changes = {};

			if (dirty & /*$$scope, active*/ 4098) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(4:2) <Drawer variant=\\\"modal\\\" fixed={false} bind:open>",
		ctx
	});

	return block;
}

// (80:8) <Label>
function create_default_slot_2$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle Drawer");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle Drawer");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(80:8) <Label>",
		ctx
	});

	return block;
}

// (79:6) <Button on:click={() => (open = !open)}>
function create_default_slot_1$1(ctx) {
	let label;
	let current;

	label = new CommonLabel({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(79:6) <Button on:click={() => (open = !open)}>",
		ctx
	});

	return block;
}

// (77:2) <AppContent class="app-content">
function create_default_slot$1(ctx) {
	let main;
	let button;
	let t0;
	let br;
	let t1;
	let pre;
	let t2;
	let t3;
	let t4;
	let div;
	let t5;
	let t6;
	let current;

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_7*/ ctx[11]);

	const block = {
		c: function create() {
			main = element("main");
			create_component(button.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();
			pre = element("pre");
			t2 = text("Active: ");
			t3 = text(/*active*/ ctx[1]);
			t4 = space();
			div = element("div");
			t5 = text(" ");
			t6 = text("\n      And some stuff at the bottom.");
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			claim_component(button.$$.fragment, main_nodes);
			t0 = claim_space(main_nodes);
			br = claim_element(main_nodes, "BR", { class: true });
			t1 = claim_space(main_nodes);
			pre = claim_element(main_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Active: ");
			t3 = claim_text(pre_nodes, /*active*/ ctx[1]);
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(main_nodes);
			div = claim_element(main_nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t5 = claim_text(div_nodes, " ");
			div_nodes.forEach(detach_dev);
			t6 = claim_text(main_nodes, "\n      And some stuff at the bottom.");
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "class", "svelte-lq8geb");
			add_location(br, file$1, 81, 6, 2697);
			attr_dev(pre, "class", "status svelte-lq8geb");
			add_location(pre, file$1, 82, 6, 2710);
			set_style(div, "height", "700px");
			attr_dev(div, "class", "svelte-lq8geb");
			add_location(div, file$1, 83, 6, 2759);
			attr_dev(main, "class", "main-content svelte-lq8geb");
			add_location(main, file$1, 77, 4, 2563);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			mount_component(button, main, null);
			append_dev(main, t0);
			append_dev(main, br);
			append_dev(main, t1);
			append_dev(main, pre);
			append_dev(pre, t2);
			append_dev(pre, t3);
			append_dev(main, t4);
			append_dev(main, div);
			append_dev(div, t5);
			append_dev(main, t6);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*active*/ 2) set_data_dev(t3, /*active*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(77:2) <AppContent class=\\\"app-content\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let drawer;
	let updating_open;
	let t0;
	let scrim;
	let t1;
	let appcontent;
	let current;

	function drawer_open_binding(value) {
		/*drawer_open_binding*/ ctx[10](value);
	}

	let drawer_props = {
		variant: "modal",
		fixed: false,
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		drawer_props.open = /*open*/ ctx[0];
	}

	drawer = new Drawer$1({ props: drawer_props, $$inline: true });
	binding_callbacks.push(() => bind(drawer, "open", drawer_open_binding));
	scrim = new Scrim({ props: { fixed: false }, $$inline: true });

	appcontent = new AppContent({
			props: {
				class: "app-content",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(drawer.$$.fragment);
			t0 = space();
			create_component(scrim.$$.fragment);
			t1 = space();
			create_component(appcontent.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(drawer.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(scrim.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(appcontent.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "drawer-container svelte-lq8geb");
			add_location(div, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(drawer, div, null);
			append_dev(div, t0);
			mount_component(scrim, div, null);
			append_dev(div, t1);
			mount_component(appcontent, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const drawer_changes = {};

			if (dirty & /*$$scope, active*/ 4098) {
				drawer_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 1) {
				updating_open = true;
				drawer_changes.open = /*open*/ ctx[0];
				add_flush_callback(() => updating_open = false);
			}

			drawer.$set(drawer_changes);
			const appcontent_changes = {};

			if (dirty & /*$$scope, active, open*/ 4099) {
				appcontent_changes.$$scope = { dirty, ctx };
			}

			appcontent.$set(appcontent_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(drawer.$$.fragment, local);
			transition_in(scrim.$$.fragment, local);
			transition_in(appcontent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(drawer.$$.fragment, local);
			transition_out(scrim.$$.fragment, local);
			transition_out(appcontent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(drawer);
			destroy_component(scrim);
			destroy_component(appcontent);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Modal", slots, []);
	let open = false;
	let active = "Inbox";

	function setActive(value) {
		$$invalidate(1, active = value);
		$$invalidate(0, open = false);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Modal> was created with unknown prop '${key}'`);
	});

	const click_handler = () => setActive("Inbox");
	const click_handler_1 = () => setActive("Star");
	const click_handler_2 = () => setActive("Sent Mail");
	const click_handler_3 = () => setActive("Drafts");
	const click_handler_4 = () => setActive("Family");
	const click_handler_5 = () => setActive("Friends");
	const click_handler_6 = () => setActive("Work");

	function drawer_open_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	const click_handler_7 = () => $$invalidate(0, open = !open);

	$$self.$capture_state = () => ({
		Drawer: Drawer$1,
		AppContent,
		Content,
		Header,
		Title,
		Subtitle,
		Scrim,
		Button: Button_1,
		Label: CommonLabel,
		List,
		Item,
		Text,
		Graphic,
		Separator,
		Subheader,
		H6,
		open,
		active,
		setActive
	});

	$$self.$inject_state = $$props => {
		if ("open" in $$props) $$invalidate(0, open = $$props.open);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		open,
		active,
		setActive,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		drawer_open_binding,
		click_handler_7
	];
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Modal",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/drawer/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/drawer/index.svelte";

// (10:2) <Demo component={Permanent} file="drawer/_Permanent.svelte">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A permanent drawer");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A permanent drawer");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(10:2) <Demo component={Permanent} file=\\\"drawer/_Permanent.svelte\\\">",
		ctx
	});

	return block;
}

// (14:2) <Demo component={Dismissible} file="drawer/_Dismissible.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A dismissible drawer with a header and activated items");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A dismissible drawer with a header and activated items");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(14:2) <Demo component={Dismissible} file=\\\"drawer/_Dismissible.svelte\\\">",
		ctx
	});

	return block;
}

// (18:2) <Demo component={Modal} file="drawer/_Modal.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A modal drawer with header, activated items, subheading, icons, list groups");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A modal drawer with header, activated items, subheading, icons, list groups");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(18:2) <Demo component={Modal} file=\\\"drawer/_Modal.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let current;

	demo0 = new Demo({
			props: {
				component: Permanent,
				file: "drawer/_Permanent.svelte",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Dismissible,
				file: "drawer/_Dismissible.svelte",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Modal,
				file: "drawer/_Modal.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Drawers");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/drawer");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-2an9ly\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Drawers");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/drawer");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Drawers - SMUI";
			add_location(h2, file, 5, 2, 74);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 94);
			add_location(section, file, 4, 0, 62);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo0_changes.$$scope = { dirty, ctx };
			}

			demo0.$set(demo0_changes);
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Drawer", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Drawer> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Permanent, Dismissible, Modal });
	return [];
}

class Drawer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Drawer",
			options,
			id: create_fragment.name
		});
	}
}

export default Drawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
