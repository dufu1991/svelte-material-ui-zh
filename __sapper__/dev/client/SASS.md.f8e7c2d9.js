import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';

/* SASS.md generated by Svelte v3.37.0 */

const file$1 = "SASS.md";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let pre0;
	let raw0_value = `<code class="language-sh">npm install --save-dev smui-theme</code>` + "";
	let t4;
	let p1;
	let t5;
	let t6;
	let pre1;
	let raw1_value = `<code class="language-sh">npx smui-theme template src/theme</code>` + "";
	let t7;
	let p2;
	let t8;
	let code0;
	let t9;
	let t10;
	let code1;
	let t11;
	let t12;
	let a0;
	let t13;
	let t14;
	let t15;
	let h20;
	let t16;
	let t17;
	let p3;
	let t18;
	let t19;
	let p4;
	let t20;
	let t21;
	let pre2;
	let raw2_value = `<code class="language-null">&quot;prepare&quot;: &quot;smui-theme compile build/smui.css -i src/theme&quot;,</code>` + "";
	let t22;
	let p5;
	let t23;
	let t24;
	let pre3;

	let raw3_value = `<code class="language-null">&quot;prepare&quot;: &quot;npm run smui-theme-light &amp;&amp; npm run smui-theme-dark&quot;,
&quot;smui-theme-light&quot;: &quot;smui-theme compile build/smui.css -i src/theme&quot;,
&quot;smui-theme-dark&quot;: &quot;smui-theme compile build/smui-dark.css -i src/theme/dark&quot;,</code>` + "";

	let t25;
	let p6;
	let t26;
	let code2;
	let t27;
	let t28;
	let t29;
	let h21;
	let t30;
	let t31;
	let p7;
	let t32;
	let t33;
	let p8;
	let t34;
	let a1;
	let t35;
	let t36;
	let t37;
	let p9;
	let t38;
	let a2;
	let t39;
	let t40;
	let t41;
	let pre4;
	let raw4_value = `<code class="language-sh">npm install --save-dev sass rollup-plugin-postcss</code>` + "";
	let t42;
	let p10;
	let t43;
	let a3;
	let t44;
	let t45;
	let t46;
	let pre5;
	let raw5_value = `<code class="language-sh">npm install --save-dev sass style-loader css-loader sass-loader</code>` + "";
	let t47;
	let p11;
	let strong;
	let t48;
	let t49;
	let h3;
	let t50;
	let t51;
	let p12;
	let t52;
	let t53;
	let p13;
	let t54;
	let t55;
	let pre6;

	let raw6_value = `<code class="language-js"><span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">'rollup-plugin-postcss'</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>

    <span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      extract<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
          <span class="token string">'sass'</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/theme'</span><span class="token punctuation">,</span> <span class="token string">'./node_modules'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>` + "";

	let t56;
	let p14;
	let t57;
	let t58;
	let pre7;

	let raw7_value = `<code class="language-js"><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// ...</span>

      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.s?css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>
          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            loader<span class="token operator">:</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span>
            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// Prefer &#96;dart-sass&#96;</span>
              implementation<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sass'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              sassOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/theme'</span><span class="token punctuation">,</span> <span class="token string">'./node_modules'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

      <span class="token comment">// ...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>` + "";

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Custom Theme with Sass");
			t1 = space();
			p0 = element("p");
			t2 = text("To create a custom theme, install the SMUI Theme Builder.");
			t3 = space();
			pre0 = element("pre");
			t4 = space();
			p1 = element("p");
			t5 = text("You can use it to create your theme directory from a template. Adjust to your source directory if needed.");
			t6 = space();
			pre1 = element("pre");
			t7 = space();
			p2 = element("p");
			t8 = text("This creates ");
			code0 = element("code");
			t9 = text("_smui-theme.scss");
			t10 = text(" files in ");
			code1 = element("code");
			t11 = text("src/theme");
			t12 = text(". That is where you ");
			a0 = element("a");
			t13 = text("set the theme variables");
			t14 = text(".");
			t15 = space();
			h20 = element("h2");
			t16 = text("Easy Styling Method");
			t17 = space();
			p3 = element("p");
			t18 = text("The Easy Styling Method builds styles into a CSS file that you can include on your page easily.");
			t19 = space();
			p4 = element("p");
			t20 = text("In your package.json file, add this script in the “scripts” section, adjusting the source/destination files as needed.");
			t21 = space();
			pre2 = element("pre");
			t22 = space();
			p5 = element("p");
			t23 = text("Or for dark mode.");
			t24 = space();
			pre3 = element("pre");
			t25 = space();
			p6 = element("p");
			t26 = text("Now run ");
			code2 = element("code");
			t27 = text("npm run prepare");
			t28 = text(" to build the CSS file(s), then add it/them on your page.");
			t29 = space();
			h21 = element("h2");
			t30 = text("Advanced Styling Method");
			t31 = space();
			p7 = element("p");
			t32 = text("The Advanced Styling Method bundles SMUI’s CSS with your app’s CSS.");
			t33 = space();
			p8 = element("p");
			t34 = text("(From here there are ");
			a1 = element("a");
			t35 = text("different instructions");
			t36 = text(" for Sapper.)");
			t37 = space();
			p9 = element("p");
			t38 = text("For Rollup, you will need the PostCSS plugin. (Check out the ");
			a2 = element("a");
			t39 = text("Rollup template");
			t40 = text(".)");
			t41 = space();
			pre4 = element("pre");
			t42 = space();
			p10 = element("p");
			t43 = text("Or, for Webpack, you will need the Style, CSS, and Sass Loaders. (Check out the ");
			a3 = element("a");
			t44 = text("Webpack template");
			t45 = text(".)");
			t46 = space();
			pre5 = element("pre");
			t47 = space();
			p11 = element("p");
			strong = element("strong");
			t48 = text("Remember to import components with the “/styled” endpoint.");
			t49 = space();
			h3 = element("h3");
			t50 = text("Setting up Sass");
			t51 = space();
			p12 = element("p");
			t52 = text("In your bundler’s config, you’ll need to tell your bundler to compile Sass files.");
			t53 = space();
			p13 = element("p");
			t54 = text("For Rollup, add the following plugin to your “rollup.config.js”. (Adjusting the source path if needed.)");
			t55 = space();
			pre6 = element("pre");
			t56 = space();
			p14 = element("p");
			t57 = text("Or, for Webpack, add the following module rule to your “webpack.config.js”. (Adjusting the source path if needed.)");
			t58 = space();
			pre7 = element("pre");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { id: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Custom Theme with Sass");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "To create a custom theme, install the SMUI Theme Builder.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			pre0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, "You can use it to create your theme directory from a template. Adjust to your source directory if needed.");
			p1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			pre1_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, "This creates ");
			code0 = claim_element(p2_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t9 = claim_text(code0_nodes, "_smui-theme.scss");
			code0_nodes.forEach(detach_dev);
			t10 = claim_text(p2_nodes, " files in ");
			code1 = claim_element(p2_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t11 = claim_text(code1_nodes, "src/theme");
			code1_nodes.forEach(detach_dev);
			t12 = claim_text(p2_nodes, ". That is where you ");
			a0 = claim_element(p2_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t13 = claim_text(a0_nodes, "set the theme variables");
			a0_nodes.forEach(detach_dev);
			t14 = claim_text(p2_nodes, ".");
			p2_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			h20 = claim_element(nodes, "H2", { id: true });
			var h20_nodes = children(h20);
			t16 = claim_text(h20_nodes, "Easy Styling Method");
			h20_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t18 = claim_text(p3_nodes, "The Easy Styling Method builds styles into a CSS file that you can include on your page easily.");
			p3_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t20 = claim_text(p4_nodes, "In your package.json file, add this script in the “scripts” section, adjusting the source/destination files as needed.");
			p4_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			pre2 = claim_element(nodes, "PRE", { class: true });
			var pre2_nodes = children(pre2);
			pre2_nodes.forEach(detach_dev);
			t22 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children(p5);
			t23 = claim_text(p5_nodes, "Or for dark mode.");
			p5_nodes.forEach(detach_dev);
			t24 = claim_space(nodes);
			pre3 = claim_element(nodes, "PRE", { class: true });
			var pre3_nodes = children(pre3);
			pre3_nodes.forEach(detach_dev);
			t25 = claim_space(nodes);
			p6 = claim_element(nodes, "P", {});
			var p6_nodes = children(p6);
			t26 = claim_text(p6_nodes, "Now run ");
			code2 = claim_element(p6_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t27 = claim_text(code2_nodes, "npm run prepare");
			code2_nodes.forEach(detach_dev);
			t28 = claim_text(p6_nodes, " to build the CSS file(s), then add it/them on your page.");
			p6_nodes.forEach(detach_dev);
			t29 = claim_space(nodes);
			h21 = claim_element(nodes, "H2", { id: true });
			var h21_nodes = children(h21);
			t30 = claim_text(h21_nodes, "Advanced Styling Method");
			h21_nodes.forEach(detach_dev);
			t31 = claim_space(nodes);
			p7 = claim_element(nodes, "P", {});
			var p7_nodes = children(p7);
			t32 = claim_text(p7_nodes, "The Advanced Styling Method bundles SMUI’s CSS with your app’s CSS.");
			p7_nodes.forEach(detach_dev);
			t33 = claim_space(nodes);
			p8 = claim_element(nodes, "P", {});
			var p8_nodes = children(p8);
			t34 = claim_text(p8_nodes, "(From here there are ");
			a1 = claim_element(p8_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t35 = claim_text(a1_nodes, "different instructions");
			a1_nodes.forEach(detach_dev);
			t36 = claim_text(p8_nodes, " for Sapper.)");
			p8_nodes.forEach(detach_dev);
			t37 = claim_space(nodes);
			p9 = claim_element(nodes, "P", {});
			var p9_nodes = children(p9);
			t38 = claim_text(p9_nodes, "For Rollup, you will need the PostCSS plugin. (Check out the ");
			a2 = claim_element(p9_nodes, "A", { href: true, rel: true });
			var a2_nodes = children(a2);
			t39 = claim_text(a2_nodes, "Rollup template");
			a2_nodes.forEach(detach_dev);
			t40 = claim_text(p9_nodes, ".)");
			p9_nodes.forEach(detach_dev);
			t41 = claim_space(nodes);
			pre4 = claim_element(nodes, "PRE", { class: true });
			var pre4_nodes = children(pre4);
			pre4_nodes.forEach(detach_dev);
			t42 = claim_space(nodes);
			p10 = claim_element(nodes, "P", {});
			var p10_nodes = children(p10);
			t43 = claim_text(p10_nodes, "Or, for Webpack, you will need the Style, CSS, and Sass Loaders. (Check out the ");
			a3 = claim_element(p10_nodes, "A", { href: true, rel: true });
			var a3_nodes = children(a3);
			t44 = claim_text(a3_nodes, "Webpack template");
			a3_nodes.forEach(detach_dev);
			t45 = claim_text(p10_nodes, ".)");
			p10_nodes.forEach(detach_dev);
			t46 = claim_space(nodes);
			pre5 = claim_element(nodes, "PRE", { class: true });
			var pre5_nodes = children(pre5);
			pre5_nodes.forEach(detach_dev);
			t47 = claim_space(nodes);
			p11 = claim_element(nodes, "P", {});
			var p11_nodes = children(p11);
			strong = claim_element(p11_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t48 = claim_text(strong_nodes, "Remember to import components with the “/styled” endpoint.");
			strong_nodes.forEach(detach_dev);
			p11_nodes.forEach(detach_dev);
			t49 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", { id: true });
			var h3_nodes = children(h3);
			t50 = claim_text(h3_nodes, "Setting up Sass");
			h3_nodes.forEach(detach_dev);
			t51 = claim_space(nodes);
			p12 = claim_element(nodes, "P", {});
			var p12_nodes = children(p12);
			t52 = claim_text(p12_nodes, "In your bundler’s config, you’ll need to tell your bundler to compile Sass files.");
			p12_nodes.forEach(detach_dev);
			t53 = claim_space(nodes);
			p13 = claim_element(nodes, "P", {});
			var p13_nodes = children(p13);
			t54 = claim_text(p13_nodes, "For Rollup, add the following plugin to your “rollup.config.js”. (Adjusting the source path if needed.)");
			p13_nodes.forEach(detach_dev);
			t55 = claim_space(nodes);
			pre6 = claim_element(nodes, "PRE", { class: true });
			var pre6_nodes = children(pre6);
			pre6_nodes.forEach(detach_dev);
			t56 = claim_space(nodes);
			p14 = claim_element(nodes, "P", {});
			var p14_nodes = children(p14);
			t57 = claim_text(p14_nodes, "Or, for Webpack, add the following module rule to your “webpack.config.js”. (Adjusting the source path if needed.)");
			p14_nodes.forEach(detach_dev);
			t58 = claim_space(nodes);
			pre7 = claim_element(nodes, "PRE", { class: true });
			var pre7_nodes = children(pre7);
			pre7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "id", "custom-theme-with-sass");
			add_location(h1, file$1, 1, 0, 1);
			add_location(p0, file$1, 2, 0, 61);
			attr_dev(pre0, "class", "language-sh");
			add_location(pre0, file$1, 3, 0, 126);
			add_location(p1, file$1, 4, 0, 234);
			attr_dev(pre1, "class", "language-sh");
			add_location(pre1, file$1, 5, 0, 347);
			add_location(code0, file$1, 6, 16, 471);
			add_location(code1, file$1, 6, 55, 510);
			attr_dev(a0, "href", "THEMING.md");
			add_location(a0, file$1, 6, 97, 552);
			add_location(p2, file$1, 6, 0, 455);
			attr_dev(h20, "id", "easy-styling-method");
			add_location(h20, file$1, 7, 0, 606);
			add_location(p3, file$1, 8, 0, 660);
			add_location(p4, file$1, 9, 0, 763);
			attr_dev(pre2, "class", "language-null");
			add_location(pre2, file$1, 10, 0, 889);
			add_location(p5, file$1, 11, 0, 1048);
			attr_dev(pre3, "class", "language-null");
			add_location(pre3, file$1, 12, 0, 1073);
			add_location(code2, file$1, 15, 11, 1445);
			add_location(p6, file$1, 15, 0, 1434);
			attr_dev(h21, "id", "advanced-styling-method");
			add_location(h21, file$1, 16, 0, 1535);
			add_location(p7, file$1, 17, 0, 1597);
			attr_dev(a1, "href", "SAPPER.md");
			add_location(a1, file$1, 18, 24, 1696);
			add_location(p8, file$1, 18, 0, 1672);
			attr_dev(a2, "href", "https://github.com/hperrin/smui-example-rollup");
			attr_dev(a2, "rel", "nofollow");
			add_location(a2, file$1, 19, 64, 1824);
			add_location(p9, file$1, 19, 0, 1760);
			attr_dev(pre4, "class", "language-sh");
			add_location(pre4, file$1, 23, 0, 1927);
			attr_dev(a3, "href", "https://github.com/hperrin/smui-example-webpack");
			attr_dev(a3, "rel", "nofollow");
			add_location(a3, file$1, 24, 83, 2134);
			add_location(p10, file$1, 24, 0, 2051);
			attr_dev(pre5, "class", "language-sh");
			add_location(pre5, file$1, 28, 0, 2239);
			add_location(strong, file$1, 29, 3, 2380);
			add_location(p11, file$1, 29, 0, 2377);
			attr_dev(h3, "id", "setting-up-sass");
			add_location(h3, file$1, 30, 0, 2460);
			add_location(p12, file$1, 31, 0, 2506);
			add_location(p13, file$1, 32, 0, 2595);
			attr_dev(pre6, "class", "language-js");
			add_location(pre6, file$1, 33, 0, 2706);
			add_location(p14, file$1, 58, 0, 4948);
			attr_dev(pre7, "class", "language-js");
			add_location(pre7, file$1, 59, 0, 5070);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert_dev(target, t4, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			insert_dev(target, t7, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t8);
			append_dev(p2, code0);
			append_dev(code0, t9);
			append_dev(p2, t10);
			append_dev(p2, code1);
			append_dev(code1, t11);
			append_dev(p2, t12);
			append_dev(p2, a0);
			append_dev(a0, t13);
			append_dev(p2, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t16);
			insert_dev(target, t17, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t18);
			insert_dev(target, t19, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t20);
			insert_dev(target, t21, anchor);
			insert_dev(target, pre2, anchor);
			pre2.innerHTML = raw2_value;
			insert_dev(target, t22, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, t23);
			insert_dev(target, t24, anchor);
			insert_dev(target, pre3, anchor);
			pre3.innerHTML = raw3_value;
			insert_dev(target, t25, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t26);
			append_dev(p6, code2);
			append_dev(code2, t27);
			append_dev(p6, t28);
			insert_dev(target, t29, anchor);
			insert_dev(target, h21, anchor);
			append_dev(h21, t30);
			insert_dev(target, t31, anchor);
			insert_dev(target, p7, anchor);
			append_dev(p7, t32);
			insert_dev(target, t33, anchor);
			insert_dev(target, p8, anchor);
			append_dev(p8, t34);
			append_dev(p8, a1);
			append_dev(a1, t35);
			append_dev(p8, t36);
			insert_dev(target, t37, anchor);
			insert_dev(target, p9, anchor);
			append_dev(p9, t38);
			append_dev(p9, a2);
			append_dev(a2, t39);
			append_dev(p9, t40);
			insert_dev(target, t41, anchor);
			insert_dev(target, pre4, anchor);
			pre4.innerHTML = raw4_value;
			insert_dev(target, t42, anchor);
			insert_dev(target, p10, anchor);
			append_dev(p10, t43);
			append_dev(p10, a3);
			append_dev(a3, t44);
			append_dev(p10, t45);
			insert_dev(target, t46, anchor);
			insert_dev(target, pre5, anchor);
			pre5.innerHTML = raw5_value;
			insert_dev(target, t47, anchor);
			insert_dev(target, p11, anchor);
			append_dev(p11, strong);
			append_dev(strong, t48);
			insert_dev(target, t49, anchor);
			insert_dev(target, h3, anchor);
			append_dev(h3, t50);
			insert_dev(target, t51, anchor);
			insert_dev(target, p12, anchor);
			append_dev(p12, t52);
			insert_dev(target, t53, anchor);
			insert_dev(target, p13, anchor);
			append_dev(p13, t54);
			insert_dev(target, t55, anchor);
			insert_dev(target, pre6, anchor);
			pre6.innerHTML = raw6_value;
			insert_dev(target, t56, anchor);
			insert_dev(target, p14, anchor);
			append_dev(p14, t57);
			insert_dev(target, t58, anchor);
			insert_dev(target, pre7, anchor);
			pre7.innerHTML = raw7_value;
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(pre1);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(pre2);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(p5);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(pre3);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(p6);
			if (detaching) detach_dev(t29);
			if (detaching) detach_dev(h21);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(p7);
			if (detaching) detach_dev(t33);
			if (detaching) detach_dev(p8);
			if (detaching) detach_dev(t37);
			if (detaching) detach_dev(p9);
			if (detaching) detach_dev(t41);
			if (detaching) detach_dev(pre4);
			if (detaching) detach_dev(t42);
			if (detaching) detach_dev(p10);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(pre5);
			if (detaching) detach_dev(t47);
			if (detaching) detach_dev(p11);
			if (detaching) detach_dev(t49);
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t51);
			if (detaching) detach_dev(p12);
			if (detaching) detach_dev(t53);
			if (detaching) detach_dev(p13);
			if (detaching) detach_dev(t55);
			if (detaching) detach_dev(pre6);
			if (detaching) detach_dev(t56);
			if (detaching) detach_dev(p14);
			if (detaching) detach_dev(t58);
			if (detaching) detach_dev(pre7);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SASS", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SASS> was created with unknown prop '${key}'`);
	});

	return [];
}

class SASS extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SASS",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/SASS.md.svelte generated by Svelte v3.37.0 */
const file = "src/routes/SASS.md.svelte";

function create_fragment(ctx) {
	let t;
	let section;
	let sass;
	let current;
	sass = new SASS({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			create_component(sass.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1jdgpq6\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(sass.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Custom Theme with Sass - SMUI";
			attr_dev(section, "class", "markdown");
			add_location(section, file, 4, 0, 77);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			mount_component(sass, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(sass.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sass.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_component(sass);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SASS_md", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SASS_md> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Sass: SASS });
	return [];
}

class SASS_md extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SASS_md",
			options,
			id: create_fragment.name
		});
	}
}

export default SASS_md;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0FTUy5tZC5mOGU3YzJkOS5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
