import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, as as IconButton, v as validate_slots, p as element, q as create_component, o as space, t as text, x as claim_element, y as children, A as claim_component, u as detach_dev, w as claim_space, z as claim_text, B as set_style, D as add_location, E as attr_dev, F as insert_dev, H as mount_component, G as append_dev, aw as set_data_dev, J as transition_in, K as transition_out, M as destroy_component, a6 as binding_callbacks, ak as bind, al as add_flush_callback, aV as mdiFormatColorFill, aW as mdiWrench, aX as mdiCurrencyUsd, n as Svg, N as svg_element, O as noop, r as query_selector_all } from './client.ec94238b.js';
import { C as CommonIcon, D as Demo } from './Demo.9c515360.js';
import { B as Button_1 } from './Button.d66ce348.js';
import { C as CommonLabel } from './CommonLabel.6290f478.js';

/* src/routes/demo/icon-button/_Simple.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/icon-button/_Simple.svelte";

// (2:2) <IconButton class="material-icons" on:click={() => clicked++}     >
function create_default_slot_2$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("build");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "build");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(2:2) <IconButton class=\\\"material-icons\\\" on:click={() => clicked++}     >",
		ctx
	});

	return block;
}

// (7:2) <IconButton class="material-icons" on:click={() => clicked++} disabled     >
function create_default_slot_1$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("search");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "search");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(7:2) <IconButton class=\\\"material-icons\\\" on:click={() => clicked++} disabled     >",
		ctx
	});

	return block;
}

// (12:2) <IconButton class="material-icons" on:click={() => clicked++} ripple={false}     >
function create_default_slot$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("add_shopping_cart");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "add_shopping_cart");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(12:2) <IconButton class=\\\"material-icons\\\" on:click={() => clicked++} ripple={false}     >",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div0;
	let iconbutton0;
	let t0;
	let div1;
	let iconbutton1;
	let t1;
	let t2;
	let div2;
	let iconbutton2;
	let t3;
	let t4;
	let pre;
	let t5;
	let t6;
	let current;

	iconbutton0 = new IconButton({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton0.$on("click", /*click_handler*/ ctx[1]);

	iconbutton1 = new IconButton({
			props: {
				class: "material-icons",
				disabled: true,
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton1.$on("click", /*click_handler_1*/ ctx[2]);

	iconbutton2 = new IconButton({
			props: {
				class: "material-icons",
				ripple: false,
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton2.$on("click", /*click_handler_2*/ ctx[3]);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(iconbutton1.$$.fragment);
			t1 = text(" (disabled)");
			t2 = space();
			div2 = element("div");
			create_component(iconbutton2.$$.fragment);
			t3 = text(" (no ripple)");
			t4 = space();
			pre = element("pre");
			t5 = text("Clicked: ");
			t6 = text(/*clicked*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(iconbutton0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(iconbutton1.$$.fragment, div1_nodes);
			t1 = claim_text(div1_nodes, " (disabled)");
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			claim_component(iconbutton2.$$.fragment, div2_nodes);
			t3 = claim_text(div2_nodes, " (no ripple)");
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t5 = claim_text(pre_nodes, "Clicked: ");
			t6 = claim_text(pre_nodes, /*clicked*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "display", "flex");
			set_style(div0, "align-items", "center");
			add_location(div0, file$3, 0, 0, 0);
			set_style(div1, "display", "flex");
			set_style(div1, "align-items", "center");
			add_location(div1, file$3, 5, 0, 148);
			set_style(div2, "display", "flex");
			set_style(div2, "align-items", "center");
			add_location(div2, file$3, 10, 0, 317);
			attr_dev(pre, "class", "status");
			add_location(pre, file$3, 16, 0, 505);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(iconbutton0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(iconbutton1, div1, null);
			append_dev(div1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div2, anchor);
			mount_component(iconbutton2, div2, null);
			append_dev(div2, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t5);
			append_dev(pre, t6);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbutton0_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton0_changes.$$scope = { dirty, ctx };
			}

			iconbutton0.$set(iconbutton0_changes);
			const iconbutton1_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton1_changes.$$scope = { dirty, ctx };
			}

			iconbutton1.$set(iconbutton1_changes);
			const iconbutton2_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton2_changes.$$scope = { dirty, ctx };
			}

			iconbutton2.$set(iconbutton2_changes);
			if (!current || dirty & /*clicked*/ 1) set_data_dev(t6, /*clicked*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(iconbutton0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(iconbutton1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div2);
			destroy_component(iconbutton2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	let clicked = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, clicked++, clicked);
	const click_handler_1 = () => $$invalidate(0, clicked++, clicked);
	const click_handler_2 = () => $$invalidate(0, clicked++, clicked);
	$$self.$capture_state = () => ({ IconButton, clicked });

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [clicked, click_handler, click_handler_1, click_handler_2];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/icon-button/_Toggle.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/icon-button/_Toggle.svelte";

// (3:4) <Icon class="material-icons" on>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("star");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "star");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(3:4) <Icon class=\\\"material-icons\\\" on>",
		ctx
	});

	return block;
}

// (4:4) <Icon class="material-icons">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("star_border");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "star_border");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(4:4) <Icon class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (2:2) <IconButton on:click={() => toggleClicked++} toggle bind:pressed={initialOff}>
function create_default_slot_8(ctx) {
	let icon0;
	let t;
	let icon1;
	let current;

	icon0 = new CommonIcon({
			props: {
				class: "material-icons",
				on: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	icon1 = new CommonIcon({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon0.$$.fragment);
			t = space();
			create_component(icon1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(icon1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(icon1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon0_changes.$$scope = { dirty, ctx };
			}

			icon0.$set(icon0_changes);
			const icon1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon1_changes.$$scope = { dirty, ctx };
			}

			icon1.$set(icon1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(icon1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(2:2) <IconButton on:click={() => toggleClicked++} toggle bind:pressed={initialOff}>",
		ctx
	});

	return block;
}

// (9:4) <Icon class="material-icons" on>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("alarm_on");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "alarm_on");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(9:4) <Icon class=\\\"material-icons\\\" on>",
		ctx
	});

	return block;
}

// (10:4) <Icon class="material-icons">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("alarm_off");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "alarm_off");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(10:4) <Icon class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (8:2) <IconButton on:click={() => toggleClicked++} toggle bind:pressed={initialOn}>
function create_default_slot_5$1(ctx) {
	let icon0;
	let t;
	let icon1;
	let current;

	icon0 = new CommonIcon({
			props: {
				class: "material-icons",
				on: true,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	icon1 = new CommonIcon({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon0.$$.fragment);
			t = space();
			create_component(icon1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(icon1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(icon1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon0_changes.$$scope = { dirty, ctx };
			}

			icon0.$set(icon0_changes);
			const icon1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon1_changes.$$scope = { dirty, ctx };
			}

			icon1.$set(icon1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(icon1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$1.name,
		type: "slot",
		source: "(8:2) <IconButton on:click={() => toggleClicked++} toggle bind:pressed={initialOn}>",
		ctx
	});

	return block;
}

// (15:4) <Label>
function create_default_slot_4$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle Programmatically");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle Programmatically");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(15:4) <Label>",
		ctx
	});

	return block;
}

// (14:2) <Button on:click={() => (initialOn = !initialOn)}>
function create_default_slot_3$1(ctx) {
	let label;
	let current;

	label = new CommonLabel({
			props: {
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(14:2) <Button on:click={() => (initialOn = !initialOn)}>",
		ctx
	});

	return block;
}

// (25:4) <Icon class="material-icons" on>
function create_default_slot_2$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(25:4) <Icon class=\\\"material-icons\\\" on>",
		ctx
	});

	return block;
}

// (26:4) <Icon class="material-icons">
function create_default_slot_1$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark_border");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark_border");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(26:4) <Icon class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (20:2) <IconButton     on:click={() => toggleClicked++}     on:click={() => (usingEvents = !usingEvents)}     pressed={usingEvents}   >
function create_default_slot$2(ctx) {
	let icon0;
	let t;
	let icon1;
	let current;

	icon0 = new CommonIcon({
			props: {
				class: "material-icons",
				on: true,
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	icon1 = new CommonIcon({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon0.$$.fragment);
			t = space();
			create_component(icon1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(icon1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(icon1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon0_changes.$$scope = { dirty, ctx };
			}

			icon0.$set(icon0_changes);
			const icon1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				icon1_changes.$$scope = { dirty, ctx };
			}

			icon1.$set(icon1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(icon1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(20:2) <IconButton     on:click={() => toggleClicked++}     on:click={() => (usingEvents = !usingEvents)}     pressed={usingEvents}   >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div0;
	let iconbutton0;
	let updating_pressed;
	let t0;
	let div1;
	let iconbutton1;
	let updating_pressed_1;
	let t1;
	let button;
	let t2;
	let div3;
	let iconbutton2;
	let t3;
	let div2;
	let t4;
	let t5;
	let pre;
	let t6;
	let t7;
	let current;

	function iconbutton0_pressed_binding(value) {
		/*iconbutton0_pressed_binding*/ ctx[4](value);
	}

	let iconbutton0_props = {
		toggle: true,
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	};

	if (/*initialOff*/ ctx[1] !== void 0) {
		iconbutton0_props.pressed = /*initialOff*/ ctx[1];
	}

	iconbutton0 = new IconButton({ props: iconbutton0_props, $$inline: true });
	binding_callbacks.push(() => bind(iconbutton0, "pressed", iconbutton0_pressed_binding));
	iconbutton0.$on("click", /*click_handler*/ ctx[5]);

	function iconbutton1_pressed_binding(value) {
		/*iconbutton1_pressed_binding*/ ctx[6](value);
	}

	let iconbutton1_props = {
		toggle: true,
		$$slots: { default: [create_default_slot_5$1] },
		$$scope: { ctx }
	};

	if (/*initialOn*/ ctx[2] !== void 0) {
		iconbutton1_props.pressed = /*initialOn*/ ctx[2];
	}

	iconbutton1 = new IconButton({ props: iconbutton1_props, $$inline: true });
	binding_callbacks.push(() => bind(iconbutton1, "pressed", iconbutton1_pressed_binding));
	iconbutton1.$on("click", /*click_handler_1*/ ctx[7]);

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_2*/ ctx[8]);

	iconbutton2 = new IconButton({
			props: {
				pressed: /*usingEvents*/ ctx[3],
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton2.$on("click", /*click_handler_3*/ ctx[9]);
	iconbutton2.$on("click", /*click_handler_4*/ ctx[10]);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			create_component(button.$$.fragment);
			t2 = space();
			div3 = element("div");
			create_component(iconbutton2.$$.fragment);
			t3 = space();
			div2 = element("div");
			t4 = text("Using events instead of bound variables.");
			t5 = space();
			pre = element("pre");
			t6 = text("Clicked: ");
			t7 = text(/*toggleClicked*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(iconbutton0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(iconbutton1.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(button.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { style: true });
			var div3_nodes = children(div3);
			claim_component(iconbutton2.$$.fragment, div3_nodes);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			t4 = claim_text(div2_nodes, "Using events instead of bound variables.");
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t6 = claim_text(pre_nodes, "Clicked: ");
			t7 = claim_text(pre_nodes, /*toggleClicked*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "display", "flex");
			set_style(div0, "align-items", "center");
			add_location(div0, file$2, 0, 0, 0);
			set_style(div1, "display", "flex");
			set_style(div1, "align-items", "center");
			add_location(div1, file$2, 6, 0, 254);
			add_location(div2, file$2, 27, 2, 1053);
			set_style(div3, "display", "flex");
			set_style(div3, "align-items", "center");
			add_location(div3, file$2, 17, 0, 691);
			attr_dev(pre, "class", "status");
			add_location(pre, file$2, 30, 0, 1113);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(iconbutton0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(iconbutton1, div1, null);
			append_dev(div1, t1);
			mount_component(button, div1, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div3, anchor);
			mount_component(iconbutton2, div3, null);
			append_dev(div3, t3);
			append_dev(div3, div2);
			append_dev(div2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t6);
			append_dev(pre, t7);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbutton0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				iconbutton0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_pressed && dirty & /*initialOff*/ 2) {
				updating_pressed = true;
				iconbutton0_changes.pressed = /*initialOff*/ ctx[1];
				add_flush_callback(() => updating_pressed = false);
			}

			iconbutton0.$set(iconbutton0_changes);
			const iconbutton1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				iconbutton1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_pressed_1 && dirty & /*initialOn*/ 4) {
				updating_pressed_1 = true;
				iconbutton1_changes.pressed = /*initialOn*/ ctx[2];
				add_flush_callback(() => updating_pressed_1 = false);
			}

			iconbutton1.$set(iconbutton1_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const iconbutton2_changes = {};
			if (dirty & /*usingEvents*/ 8) iconbutton2_changes.pressed = /*usingEvents*/ ctx[3];

			if (dirty & /*$$scope*/ 2048) {
				iconbutton2_changes.$$scope = { dirty, ctx };
			}

			iconbutton2.$set(iconbutton2_changes);
			if (!current || dirty & /*toggleClicked*/ 1) set_data_dev(t7, /*toggleClicked*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(iconbutton0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(iconbutton1);
			destroy_component(button);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div3);
			destroy_component(iconbutton2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Toggle", slots, []);
	let toggleClicked = 0;
	let initialOff = false;
	let initialOn = true;
	let usingEvents = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Toggle> was created with unknown prop '${key}'`);
	});

	function iconbutton0_pressed_binding(value) {
		initialOff = value;
		$$invalidate(1, initialOff);
	}

	const click_handler = () => $$invalidate(0, toggleClicked++, toggleClicked);

	function iconbutton1_pressed_binding(value) {
		initialOn = value;
		$$invalidate(2, initialOn);
	}

	const click_handler_1 = () => $$invalidate(0, toggleClicked++, toggleClicked);
	const click_handler_2 = () => $$invalidate(2, initialOn = !initialOn);
	const click_handler_3 = () => $$invalidate(0, toggleClicked++, toggleClicked);
	const click_handler_4 = () => $$invalidate(3, usingEvents = !usingEvents);

	$$self.$capture_state = () => ({
		IconButton,
		Icon: CommonIcon,
		Button: Button_1,
		Label: CommonLabel,
		toggleClicked,
		initialOff,
		initialOn,
		usingEvents
	});

	$$self.$inject_state = $$props => {
		if ("toggleClicked" in $$props) $$invalidate(0, toggleClicked = $$props.toggleClicked);
		if ("initialOff" in $$props) $$invalidate(1, initialOff = $$props.initialOff);
		if ("initialOn" in $$props) $$invalidate(2, initialOn = $$props.initialOn);
		if ("usingEvents" in $$props) $$invalidate(3, usingEvents = $$props.usingEvents);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		toggleClicked,
		initialOff,
		initialOn,
		usingEvents,
		iconbutton0_pressed_binding,
		click_handler,
		iconbutton1_pressed_binding,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class Toggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Toggle",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/icon-button/_Svgs.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/icon-button/_Svgs.svelte";

// (3:4) <Icon component={Svg} viewBox="0 0 24 24">
function create_default_slot_5(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiFormatColorFill);
			add_location(path, file$1, 3, 6, 145);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(3:4) <Icon component={Svg} viewBox=\\\"0 0 24 24\\\">",
		ctx
	});

	return block;
}

// (2:2) <IconButton on:click={() => clicked++}>
function create_default_slot_4(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 16) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(2:2) <IconButton on:click={() => clicked++}>",
		ctx
	});

	return block;
}

// (10:4) <Icon component={Svg} viewBox="0 0 24 24">
function create_default_slot_3(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiWrench);
			add_location(path, file$1, 10, 6, 386);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(10:4) <Icon component={Svg} viewBox=\\\"0 0 24 24\\\">",
		ctx
	});

	return block;
}

// (9:2) <IconButton on:click={() => clicked++} disabled>
function create_default_slot_2(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 16) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(9:2) <IconButton on:click={() => clicked++} disabled>",
		ctx
	});

	return block;
}

// (17:4) <Icon component={Svg} viewBox="0 0 24 24">
function create_default_slot_1$1(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { fill: true, d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", mdiCurrencyUsd);
			add_location(path, file$1, 17, 6, 635);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(17:4) <Icon component={Svg} viewBox=\\\"0 0 24 24\\\">",
		ctx
	});

	return block;
}

// (16:2) <IconButton on:click={() => clicked++} ripple={false}>
function create_default_slot$1(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				component: Svg,
				viewBox: "0 0 24 24",
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 16) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(16:2) <IconButton on:click={() => clicked++} ripple={false}>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div0;
	let iconbutton0;
	let t0;
	let div1;
	let iconbutton1;
	let t1;
	let t2;
	let div2;
	let iconbutton2;
	let t3;
	let t4;
	let pre;
	let t5;
	let t6;
	let current;

	iconbutton0 = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton0.$on("click", /*click_handler*/ ctx[1]);

	iconbutton1 = new IconButton({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton1.$on("click", /*click_handler_1*/ ctx[2]);

	iconbutton2 = new IconButton({
			props: {
				ripple: false,
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton2.$on("click", /*click_handler_2*/ ctx[3]);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(iconbutton1.$$.fragment);
			t1 = text(" (disabled)");
			t2 = space();
			div2 = element("div");
			create_component(iconbutton2.$$.fragment);
			t3 = text(" (no ripple)");
			t4 = space();
			pre = element("pre");
			t5 = text("Clicked: ");
			t6 = text(/*clicked*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(iconbutton0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(iconbutton1.$$.fragment, div1_nodes);
			t1 = claim_text(div1_nodes, " (disabled)");
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			claim_component(iconbutton2.$$.fragment, div2_nodes);
			t3 = claim_text(div2_nodes, " (no ripple)");
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t5 = claim_text(pre_nodes, "Clicked: ");
			t6 = claim_text(pre_nodes, /*clicked*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "display", "flex");
			set_style(div0, "align-items", "center");
			add_location(div0, file$1, 0, 0, 0);
			set_style(div1, "display", "flex");
			set_style(div1, "align-items", "center");
			add_location(div1, file$1, 7, 0, 232);
			set_style(div2, "display", "flex");
			set_style(div2, "align-items", "center");
			add_location(div2, file$1, 14, 0, 475);
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 22, 0, 731);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(iconbutton0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(iconbutton1, div1, null);
			append_dev(div1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div2, anchor);
			mount_component(iconbutton2, div2, null);
			append_dev(div2, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t5);
			append_dev(pre, t6);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbutton0_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton0_changes.$$scope = { dirty, ctx };
			}

			iconbutton0.$set(iconbutton0_changes);
			const iconbutton1_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton1_changes.$$scope = { dirty, ctx };
			}

			iconbutton1.$set(iconbutton1_changes);
			const iconbutton2_changes = {};

			if (dirty & /*$$scope*/ 16) {
				iconbutton2_changes.$$scope = { dirty, ctx };
			}

			iconbutton2.$set(iconbutton2_changes);
			if (!current || dirty & /*clicked*/ 1) set_data_dev(t6, /*clicked*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(iconbutton0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(iconbutton1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div2);
			destroy_component(iconbutton2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Svgs", slots, []);
	let clicked = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Svgs> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, clicked++, clicked);
	const click_handler_1 = () => $$invalidate(0, clicked++, clicked);
	const click_handler_2 = () => $$invalidate(0, clicked++, clicked);

	$$self.$capture_state = () => ({
		mdiFormatColorFill,
		mdiWrench,
		mdiCurrencyUsd,
		IconButton,
		Icon: CommonIcon,
		Svg,
		clicked
	});

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [clicked, click_handler, click_handler_1, click_handler_2];
}

class Svgs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Svgs",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/icon-button/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/icon-button/index.svelte";

// (12:2) <Demo component={Toggle} file="icon-button/_Toggle.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle buttons");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle buttons");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(12:2) <Demo component={Toggle} file=\\\"icon-button/_Toggle.svelte\\\">",
		ctx
	});

	return block;
}

// (16:2) <Demo component={Svgs} file="icon-button/_Svgs.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Using SVGs");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Using SVGs");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(16:2) <Demo component={Svgs} file=\\\"icon-button/_Svgs.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "icon-button/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Toggle,
				file: "icon-button/_Toggle.svelte",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Svgs,
				file: "icon-button/_Svgs.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Icon Button");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/icon-button");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-15to4kr\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Icon Button");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/icon-button");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Icon Button - SMUI";
			add_location(h2, file, 5, 2, 78);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 102);
			add_location(section, file, 4, 0, 66);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Icon_button", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Icon_button> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Simple, Toggle, Svgs });
	return [];
}

class Icon_button extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Icon_button",
			options,
			id: create_fragment.name
		});
	}
}

export default Icon_button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
