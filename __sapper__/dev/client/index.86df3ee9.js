import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, ag as validate_each_argument, v as validate_slots, q as create_component, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component, p as element, o as space, t as text, x as claim_element, y as children, u as detach_dev, w as claim_space, z as claim_text, E as attr_dev, D as add_location, B as set_style, F as insert_dev, G as append_dev, a4 as group_outros, a5 as check_outros, aw as set_data_dev, aj as destroy_each, a6 as binding_callbacks, ak as bind, al as add_flush_callback, O as noop, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { R as Radio$1 } from './Radio.52add3e3.js';
import { F as FormField } from './FormField.2971fa15.js';
import { B as Button_1 } from './Button.d66ce348.js';

/* src/routes/demo/radio/_Simple.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/radio/_Simple.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (3:4) <FormField>
function create_default_slot_1(ctx) {
	let radio;
	let updating_group;
	let t;
	let current;

	function radio_group_binding(value) {
		/*radio_group_binding*/ ctx[2](value);
	}

	let radio_props = {
		value: /*option*/ ctx[4].name,
		disabled: /*option*/ ctx[4].disabled
	};

	if (/*selected*/ ctx[0] !== void 0) {
		radio_props.group = /*selected*/ ctx[0];
	}

	radio = new Radio$1({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*selected*/ 1) {
				updating_group = true;
				radio_changes.group = /*selected*/ ctx[0];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(3:4) <FormField>",
		ctx
	});

	return block;
}

// (9:6) 
function create_label_slot$1(ctx) {
	let span;
	let t0_value = /*option*/ ctx[4].name + "";
	let t0;
	let t1_value = (/*option*/ ctx[4].disabled ? " (disabled)" : "") + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			t1 = claim_text(span_nodes, t1_value);
			t2 = claim_space(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 8, 6, 190);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
			append_dev(span, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$1.name,
		type: "slot",
		source: "(9:6) ",
		ctx
	});

	return block;
}

// (2:2) {#each options as option}
function create_each_block$1(ctx) {
	let formfield;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot$1],
					default: [create_default_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfield_changes = {};

			if (dirty & /*$$scope, selected*/ 129) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(2:2) {#each options as option}",
		ctx
	});

	return block;
}

// (17:2) <Button     on:click={() => {       selected = 'Doc';     }}   >
function create_default_slot$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Select Doc Programmatically");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Select Doc Programmatically");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(17:2) <Button     on:click={() => {       selected = 'Doc';     }}   >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div0;
	let t0;
	let div1;
	let button;
	let t1;
	let pre;
	let t2;
	let t3;
	let current;
	let each_value = /*options*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[3]);

	const block = {
		c: function create() {
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			create_component(button.$$.fragment);
			t1 = space();
			pre = element("pre");
			t2 = text("Selected: ");
			t3 = text(/*selected*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(button.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Selected: ");
			t3 = claim_text(pre_nodes, /*selected*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "radio-demo svelte-t4otdb");
			add_location(div0, file$2, 0, 0, 0);
			set_style(div1, "margin-top", "1em");
			add_location(div1, file$2, 15, 0, 319);
			attr_dev(pre, "class", "status");
			add_location(pre, file$2, 25, 0, 469);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(button, div1, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t2);
			append_dev(pre, t3);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*options, selected*/ 3) {
				each_value = /*options*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*selected*/ 1) set_data_dev(t3, /*selected*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);

	let options = [
		{ name: "Bashful", disabled: false },
		{ name: "Doc", disabled: true },
		{ name: "Dopey", disabled: false },
		{ name: "Happy", disabled: false },
		{ name: "Sleepy", disabled: false },
		{ name: "Sneezy", disabled: false },
		{ name: "Grumpy", disabled: false }
	];

	let selected = "Grumpy";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	function radio_group_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	const click_handler = () => {
		$$invalidate(0, selected = "Doc");
	};

	$$self.$capture_state = () => ({
		Radio: Radio$1,
		FormField,
		Button: Button_1,
		options,
		selected
	});

	$$self.$inject_state = $$props => {
		if ("options" in $$props) $$invalidate(1, options = $$props.options);
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected, options, radio_group_binding, click_handler];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/radio/_Touch.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/radio/_Touch.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (3:4) <FormField>
function create_default_slot$1(ctx) {
	let radio;
	let updating_group;
	let t;
	let current;

	function radio_group_binding(value) {
		/*radio_group_binding*/ ctx[1](value);
	}

	let radio_props = { value: /*option*/ ctx[2], touch: true };

	if (/*onoff*/ ctx[0] !== void 0) {
		radio_props.group = /*onoff*/ ctx[0];
	}

	radio = new Radio$1({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*onoff*/ 1) {
				updating_group = true;
				radio_changes.group = /*onoff*/ ctx[0];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(3:4) <FormField>",
		ctx
	});

	return block;
}

// (5:6) 
function create_label_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*option*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*option*/ ctx[2]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$1, 4, 6, 137);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(5:6) ",
		ctx
	});

	return block;
}

// (2:2) {#each ['On', 'Off'] as option}
function create_each_block(ctx) {
	let formfield;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfield_changes = {};

			if (dirty & /*$$scope, onoff*/ 33) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(2:2) {#each ['On', 'Off'] as option}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let t0;
	let pre;
	let t1;
	let t2;
	let current;
	let each_value = ["On", "Off"];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < 2; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			pre = element("pre");
			t1 = text("Selected: ");
			t2 = text(/*onoff*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Selected: ");
			t2 = claim_text(pre_nodes, /*onoff*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "radio-demo svelte-t4otdb");
			add_location(div, file$1, 0, 0, 0);
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 9, 0, 207);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*onoff*/ 1) {
				each_value = ["On", "Off"];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < 2; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = 2; i < 2; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*onoff*/ 1) set_data_dev(t2, /*onoff*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < 2; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < 2; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Touch", slots, []);
	let onoff = "On";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Touch> was created with unknown prop '${key}'`);
	});

	function radio_group_binding(value) {
		onoff = value;
		$$invalidate(0, onoff);
	}

	$$self.$capture_state = () => ({ Radio: Radio$1, FormField, onoff });

	$$self.$inject_state = $$props => {
		if ("onoff" in $$props) $$invalidate(0, onoff = $$props.onoff);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [onoff, radio_group_binding];
}

class Touch extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Touch",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/radio/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/radio/index.svelte";

// (12:2) <Demo component={Touch} file="radio/_Touch.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Increased touch target");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Increased touch target");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(12:2) <Demo component={Touch} file=\\\"radio/_Touch.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "radio/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Touch,
				file: "radio/_Touch.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Radio");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/radio");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-nufucr\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Radio");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/radio");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Radio - SMUI";
			add_location(h2, file, 5, 2, 72);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 90);
			add_location(section, file, 4, 0, 60);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Radio", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Radio> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Simple, Touch });
	return [];
}

class Radio extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Radio",
			options,
			id: create_fragment.name
		});
	}
}

export default Radio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguODZkZjNlZTkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9yYWRpby9fU2ltcGxlLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9yYWRpby9fVG91Y2guc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9kZW1vL3JhZGlvL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8ZGl2IGNsYXNzPVwicmFkaW8tZGVtb1wiPlxuICB7I2VhY2ggb3B0aW9ucyBhcyBvcHRpb259XG4gICAgPEZvcm1GaWVsZD5cbiAgICAgIDxSYWRpb1xuICAgICAgICBiaW5kOmdyb3VwPXtzZWxlY3RlZH1cbiAgICAgICAgdmFsdWU9e29wdGlvbi5uYW1lfVxuICAgICAgICBkaXNhYmxlZD17b3B0aW9uLmRpc2FibGVkfVxuICAgICAgLz5cbiAgICAgIDxzcGFuIHNsb3Q9XCJsYWJlbFwiPlxuICAgICAgICB7b3B0aW9uLm5hbWV9e29wdGlvbi5kaXNhYmxlZCA/ICcgKGRpc2FibGVkKScgOiAnJ31cbiAgICAgIDwvc3Bhbj5cbiAgICA8L0Zvcm1GaWVsZD5cbiAgey9lYWNofVxuPC9kaXY+XG5cbjxkaXYgc3R5bGU9XCJtYXJnaW4tdG9wOiAxZW07XCI+XG4gIDxCdXR0b25cbiAgICBvbjpjbGljaz17KCkgPT4ge1xuICAgICAgc2VsZWN0ZWQgPSAnRG9jJztcbiAgICB9fVxuICA+XG4gICAgU2VsZWN0IERvYyBQcm9ncmFtbWF0aWNhbGx5XG4gIDwvQnV0dG9uPlxuPC9kaXY+XG5cbjxwcmUgY2xhc3M9XCJzdGF0dXNcIj5TZWxlY3RlZDoge3NlbGVjdGVkfTwvcHJlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgUmFkaW8gZnJvbSAnQHNtdWkvcmFkaW8nO1xuICBpbXBvcnQgRm9ybUZpZWxkIGZyb20gJ0BzbXVpL2Zvcm0tZmllbGQnO1xuICBpbXBvcnQgQnV0dG9uIGZyb20gJ0BzbXVpL2J1dHRvbic7XG5cbiAgbGV0IG9wdGlvbnMgPSBbXG4gICAge1xuICAgICAgbmFtZTogJ0Jhc2hmdWwnLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0RvYycsXG4gICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdEb3BleScsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnSGFwcHknLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ1NsZWVweScsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnU25lZXp5JyxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdHcnVtcHknLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH0sXG4gIF07XG4gIGxldCBzZWxlY3RlZCA9ICdHcnVtcHknO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLnJhZGlvLWRlbW8gPiA6Z2xvYmFsKCopIHtcbiAgICBtYXJnaW46IDAgMC4yZW07XG4gIH1cbjwvc3R5bGU+XG4iLCI8ZGl2IGNsYXNzPVwicmFkaW8tZGVtb1wiPlxuICB7I2VhY2ggWydPbicsICdPZmYnXSBhcyBvcHRpb259XG4gICAgPEZvcm1GaWVsZD5cbiAgICAgIDxSYWRpbyBiaW5kOmdyb3VwPXtvbm9mZn0gdmFsdWU9e29wdGlvbn0gdG91Y2ggLz5cbiAgICAgIDxzcGFuIHNsb3Q9XCJsYWJlbFwiPntvcHRpb259PC9zcGFuPlxuICAgIDwvRm9ybUZpZWxkPlxuICB7L2VhY2h9XG48L2Rpdj5cblxuPHByZSBjbGFzcz1cInN0YXR1c1wiPlNlbGVjdGVkOiB7b25vZmZ9PC9wcmU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBSYWRpbyBmcm9tICdAc211aS9yYWRpbyc7XG4gIGltcG9ydCBGb3JtRmllbGQgZnJvbSAnQHNtdWkvZm9ybS1maWVsZCc7XG5cbiAgbGV0IG9ub2ZmID0gJ09uJztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5yYWRpby1kZW1vID4gOmdsb2JhbCgqKSB7XG4gICAgbWFyZ2luOiAwIDAuMmVtO1xuICB9XG48L3N0eWxlPlxuIiwiPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+UmFkaW8gLSBTTVVJPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzZWN0aW9uPlxuICA8aDI+UmFkaW88L2gyPlxuXG4gIDxwcmUgY2xhc3M9XCJkZW1vLXNwYWNlZFwiPm5wbSBpIC1EIEBzbXVpL3JhZGlvPC9wcmU+XG5cbiAgPERlbW8gY29tcG9uZW50PXtTaW1wbGV9IGZpbGU9XCJyYWRpby9fU2ltcGxlLnN2ZWx0ZVwiIC8+XG5cbiAgPERlbW8gY29tcG9uZW50PXtUb3VjaH0gZmlsZT1cInJhZGlvL19Ub3VjaC5zdmVsdGVcIj5cbiAgICBJbmNyZWFzZWQgdG91Y2ggdGFyZ2V0XG4gIDwvRGVtbz5cbjwvc2VjdGlvbj5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IERlbW8gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9EZW1vLnN2ZWx0ZSc7XG4gIGltcG9ydCBTaW1wbGUgZnJvbSAnLi9fU2ltcGxlLnN2ZWx0ZSc7XG4gIGltcG9ydCBUb3VjaCBmcm9tICcuL19Ub3VjaC5zdmVsdGUnO1xuPC9zY3JpcHQ+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUtlLEdBQU0sSUFBQyxJQUFJO3VCQUNSLEdBQU0sSUFBQyxRQUFROzs7a0JBRmIsR0FBUTttQ0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VDQUFSLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUtuQixHQUFNLElBQUMsSUFBSTs7NEJBQUUsR0FBTSxJQUFDLFFBQVEsR0FBRyxhQUFhLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBUmpELEdBQU87Ozs7Z0NBQVosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBd0J1QixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBQVIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQXhCOUIsR0FBTzs7OzsrQkFBWixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7O3lFQXdCdUIsR0FBUTs7Ozs7a0NBeEJuQyxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBK0JGLE9BQU87SUFFUCxJQUFJLEVBQUUsU0FBUyxFQUNmLFFBQVEsRUFBRSxLQUFLO0lBR2YsSUFBSSxFQUFFLEtBQUssRUFDWCxRQUFRLEVBQUUsSUFBSTtJQUdkLElBQUksRUFBRSxPQUFPLEVBQ2IsUUFBUSxFQUFFLEtBQUs7SUFHZixJQUFJLEVBQUUsT0FBTyxFQUNiLFFBQVEsRUFBRSxLQUFLO0lBR2YsSUFBSSxFQUFFLFFBQVEsRUFDZCxRQUFRLEVBQUUsS0FBSztJQUdmLElBQUksRUFBRSxRQUFRLEVBQ2QsUUFBUSxFQUFFLEtBQUs7SUFHZixJQUFJLEVBQUUsUUFBUSxFQUNkLFFBQVEsRUFBRSxLQUFLOzs7S0FHZixRQUFRLEdBQUcsUUFBUTs7Ozs7Ozs7RUExREwsUUFBUTs7Ozs7a0JBY3RCLFFBQVEsR0FBRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNDZmlCLEdBQU07O2VBQXBCLEdBQUs7Z0NBQUwsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQUNKLEdBQU07Ozs7Ozt5Q0FBTixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQUh0QixJQUFJLEVBQUUsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBUVUsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FBTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQVIxQixJQUFJLEVBQUUsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21FQVFVLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQU05QixLQUFLLEdBQUcsSUFBSTs7Ozs7Ozs7RUFaTyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQ01YLE1BQU07Ozs7Ozs7O2VBRU4sS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
