import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a6 as binding_callbacks, ak as bind, p as element, t as text, x as claim_element, y as children, z as claim_text, u as detach_dev, D as add_location, F as insert_dev, G as append_dev, q as create_component, o as space, A as claim_component, w as claim_space, E as attr_dev, H as mount_component, aw as set_data_dev, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, B as set_style, O as noop, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { S as Slider$1 } from './Slider.91ac28a7.js';
import { F as FormField } from './FormField.2971fa15.js';
import { B as Button_1 } from './Button.d66ce348.js';

/* src/routes/demo/slider/_Simple.svelte generated by Svelte v3.37.0 */
const file$6 = "src/routes/demo/slider/_Simple.svelte";

// (1:0) <FormField align="end" style="display: flex;">
function create_default_slot_1$1(ctx) {
	let slider;
	let updating_value;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[1](value);
	}

	let slider_props = { style: "flex-grow: 1;" };

	if (/*value*/ ctx[0] !== void 0) {
		slider_props.value = /*value*/ ctx[0];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const slider_changes = {};

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				slider_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(1:0) <FormField align=\\\"end\\\" style=\\\"display: flex;\\\">",
		ctx
	});

	return block;
}

// (3:2) 
function create_label_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Amount of Wonder");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true, style: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Amount of Wonder");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			set_style(span, "padding-right", "12px");
			set_style(span, "width", "max-content");
			set_style(span, "display", "block");
			add_location(span, file$6, 2, 2, 95);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(3:2) ",
		ctx
	});

	return block;
}

// (11:0) {#if value == 0}
function create_if_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("No wonder.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No wonder.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$6, 11, 2, 255);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(11:0) {#if value == 0}",
		ctx
	});

	return block;
}

// (15:5) <Button on:click={() => (value = 100)}>
function create_default_slot$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Maximum Wonder!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Maximum Wonder!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(15:5) <Button on:click={() => (value = 100)}>",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let formfield;
	let t0;
	let t1;
	let div;
	let button;
	let t2;
	let pre;
	let t3;
	let t4;
	let current;

	formfield = new FormField({
			props: {
				align: "end",
				style: "display: flex;",
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot_1$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*value*/ ctx[0] == 0 && create_if_block(ctx);

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[2]);

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			div = element("div");
			create_component(button.$$.fragment);
			t2 = space();
			pre = element("pre");
			t3 = text("Value: ");
			t4 = text(/*value*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "Value: ");
			t4 = claim_text(pre_nodes, /*value*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 14, 0, 280);
			attr_dev(pre, "class", "status");
			add_location(pre, file$6, 16, 0, 356);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t3);
			append_dev(pre, t4);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield_changes = {};

			if (dirty & /*$$scope, value*/ 9) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);

			if (/*value*/ ctx[0] == 0) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*value*/ 1) set_data_dev(t4, /*value*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
			if (detaching) detach_dev(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_component(button);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	let value = 50;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const click_handler = () => $$invalidate(0, value = 100);
	$$self.$capture_state = () => ({ Slider: Slider$1, FormField, Button: Button_1, value });

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, slider_value_binding, click_handler];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$7.name
		});
	}
}

/* src/routes/demo/slider/_Continuous.svelte generated by Svelte v3.37.0 */
const file$5 = "src/routes/demo/slider/_Continuous.svelte";

function create_fragment$6(ctx) {
	let slider;
	let updating_value;
	let t0;
	let pre;
	let t1;
	let t2;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[1](value);
	}

	let slider_props = {
		min: -10,
		max: 10,
		step: 0.001,
		"input$aria-label": "Continuous slider"
	};

	if (/*value*/ ctx[0] !== void 0) {
		slider_props.value = /*value*/ ctx[0];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Value: ");
			t2 = text(/*value*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Value: ");
			t2 = claim_text(pre_nodes, /*value*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$5, 8, 0, 102);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const slider_changes = {};

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				slider_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
			if (!current || dirty & /*value*/ 1) set_data_dev(t2, /*value*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Continuous", slots, []);
	let value = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Continuous> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$capture_state = () => ({ Slider: Slider$1, value });

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, slider_value_binding];
}

class Continuous extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Continuous",
			options,
			id: create_fragment$6.name
		});
	}
}

/* src/routes/demo/slider/_Discrete.svelte generated by Svelte v3.37.0 */
const file$4 = "src/routes/demo/slider/_Discrete.svelte";

function create_fragment$5(ctx) {
	let slider;
	let updating_value;
	let t0;
	let pre;
	let t1;
	let t2;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[1](value);
	}

	let slider_props = {
		min: -10,
		max: 10,
		step: 2,
		discrete: true,
		"input$aria-label": "Discrete slider"
	};

	if (/*value*/ ctx[0] !== void 0) {
		slider_props.value = /*value*/ ctx[0];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Value: ");
			t2 = text(/*value*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Value: ");
			t2 = claim_text(pre_nodes, /*value*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$4, 9, 0, 107);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const slider_changes = {};

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				slider_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
			if (!current || dirty & /*value*/ 1) set_data_dev(t2, /*value*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Discrete", slots, []);
	let value = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Discrete> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$capture_state = () => ({ Slider: Slider$1, value });

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, slider_value_binding];
}

class Discrete extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Discrete",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/routes/demo/slider/_TickMarks.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/slider/_TickMarks.svelte";

function create_fragment$4(ctx) {
	let slider;
	let updating_value;
	let t0;
	let pre;
	let t1;
	let t2;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[1](value);
	}

	let slider_props = {
		min: -100,
		max: 100,
		step: 5,
		discrete: true,
		tickMarks: true,
		"input$aria-label": "Tick mark slider"
	};

	if (/*value*/ ctx[0] !== void 0) {
		slider_props.value = /*value*/ ctx[0];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Value: ");
			t2 = text(/*value*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Value: ");
			t2 = claim_text(pre_nodes, /*value*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$3, 10, 0, 122);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const slider_changes = {};

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				slider_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
			if (!current || dirty & /*value*/ 1) set_data_dev(t2, /*value*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TickMarks", slots, []);
	let value = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TickMarks> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$capture_state = () => ({ Slider: Slider$1, value });

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, slider_value_binding];
}

class TickMarks extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TickMarks",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/demo/slider/_Range.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/slider/_Range.svelte";

// (12:2) <Button     on:click={() => {       valueStart = 0;       valueEnd = 10;     }}>
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Maximum Range!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Maximum Range!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(12:2) <Button     on:click={() => {       valueStart = 0;       valueEnd = 10;     }}>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let slider;
	let updating_start;
	let updating_end;
	let t0;
	let div;
	let button;
	let t1;
	let pre;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	function slider_start_binding(value) {
		/*slider_start_binding*/ ctx[2](value);
	}

	function slider_end_binding(value) {
		/*slider_end_binding*/ ctx[3](value);
	}

	let slider_props = {
		range: true,
		min: 0,
		max: 10,
		step: 0.1,
		"input$aria-label": "Range slider"
	};

	if (/*valueStart*/ ctx[0] !== void 0) {
		slider_props.start = /*valueStart*/ ctx[0];
	}

	if (/*valueEnd*/ ctx[1] !== void 0) {
		slider_props.end = /*valueEnd*/ ctx[1];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "start", slider_start_binding));
	binding_callbacks.push(() => bind(slider, "end", slider_end_binding));

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[4]);

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(button.$$.fragment);
			t1 = space();
			pre = element("pre");
			t2 = text("Value: ");
			t3 = text(/*valueStart*/ ctx[0]);
			t4 = text(" - ");
			t5 = text(/*valueEnd*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t2 = claim_text(pre_nodes, "Value: ");
			t3 = claim_text(pre_nodes, /*valueStart*/ ctx[0]);
			t4 = claim_text(pre_nodes, " - ");
			t5 = claim_text(pre_nodes, /*valueEnd*/ ctx[1]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$2, 10, 0, 136);
			attr_dev(pre, "class", "status");
			add_location(pre, file$2, 19, 0, 259);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t2);
			append_dev(pre, t3);
			append_dev(pre, t4);
			append_dev(pre, t5);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const slider_changes = {};

			if (!updating_start && dirty & /*valueStart*/ 1) {
				updating_start = true;
				slider_changes.start = /*valueStart*/ ctx[0];
				add_flush_callback(() => updating_start = false);
			}

			if (!updating_end && dirty & /*valueEnd*/ 2) {
				updating_end = true;
				slider_changes.end = /*valueEnd*/ ctx[1];
				add_flush_callback(() => updating_end = false);
			}

			slider.$set(slider_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*valueStart*/ 1) set_data_dev(t3, /*valueStart*/ ctx[0]);
			if (!current || dirty & /*valueEnd*/ 2) set_data_dev(t5, /*valueEnd*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Range", slots, []);
	let valueStart = 1;
	let valueEnd = 4;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Range> was created with unknown prop '${key}'`);
	});

	function slider_start_binding(value) {
		valueStart = value;
		$$invalidate(0, valueStart);
	}

	function slider_end_binding(value) {
		valueEnd = value;
		$$invalidate(1, valueEnd);
	}

	const click_handler = () => {
		$$invalidate(0, valueStart = 0);
		$$invalidate(1, valueEnd = 10);
	};

	$$self.$capture_state = () => ({ Slider: Slider$1, Button: Button_1, valueStart, valueEnd });

	$$self.$inject_state = $$props => {
		if ("valueStart" in $$props) $$invalidate(0, valueStart = $$props.valueStart);
		if ("valueEnd" in $$props) $$invalidate(1, valueEnd = $$props.valueEnd);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [valueStart, valueEnd, slider_start_binding, slider_end_binding, click_handler];
}

class Range extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Range",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/slider/_DiscreteRange.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/slider/_DiscreteRange.svelte";

function create_fragment$2(ctx) {
	let slider;
	let updating_start;
	let updating_end;
	let t0;
	let pre;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;

	function slider_start_binding(value) {
		/*slider_start_binding*/ ctx[2](value);
	}

	function slider_end_binding(value) {
		/*slider_end_binding*/ ctx[3](value);
	}

	let slider_props = {
		range: true,
		min: 0,
		max: 10,
		step: 1,
		discrete: true,
		tickMarks: true,
		"input$aria-label": "Range slider"
	};

	if (/*valueStart*/ ctx[0] !== void 0) {
		slider_props.start = /*valueStart*/ ctx[0];
	}

	if (/*valueEnd*/ ctx[1] !== void 0) {
		slider_props.end = /*valueEnd*/ ctx[1];
	}

	slider = new Slider$1({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "start", slider_start_binding));
	binding_callbacks.push(() => bind(slider, "end", slider_end_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Value: ");
			t2 = text(/*valueStart*/ ctx[0]);
			t3 = text(" - ");
			t4 = text(/*valueEnd*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Value: ");
			t2 = claim_text(pre_nodes, /*valueStart*/ ctx[0]);
			t3 = claim_text(pre_nodes, " - ");
			t4 = claim_text(pre_nodes, /*valueEnd*/ ctx[1]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 12, 0, 157);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			append_dev(pre, t3);
			append_dev(pre, t4);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const slider_changes = {};

			if (!updating_start && dirty & /*valueStart*/ 1) {
				updating_start = true;
				slider_changes.start = /*valueStart*/ ctx[0];
				add_flush_callback(() => updating_start = false);
			}

			if (!updating_end && dirty & /*valueEnd*/ 2) {
				updating_end = true;
				slider_changes.end = /*valueEnd*/ ctx[1];
				add_flush_callback(() => updating_end = false);
			}

			slider.$set(slider_changes);
			if (!current || dirty & /*valueStart*/ 1) set_data_dev(t2, /*valueStart*/ ctx[0]);
			if (!current || dirty & /*valueEnd*/ 2) set_data_dev(t4, /*valueEnd*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("DiscreteRange", slots, []);
	let valueStart = 4;
	let valueEnd = 6;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DiscreteRange> was created with unknown prop '${key}'`);
	});

	function slider_start_binding(value) {
		valueStart = value;
		$$invalidate(0, valueStart);
	}

	function slider_end_binding(value) {
		valueEnd = value;
		$$invalidate(1, valueEnd);
	}

	$$self.$capture_state = () => ({ Slider: Slider$1, valueStart, valueEnd });

	$$self.$inject_state = $$props => {
		if ("valueStart" in $$props) $$invalidate(0, valueStart = $$props.valueStart);
		if ("valueEnd" in $$props) $$invalidate(1, valueEnd = $$props.valueEnd);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [valueStart, valueEnd, slider_start_binding, slider_end_binding];
}

class DiscreteRange extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DiscreteRange",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/slider/_Disabled.svelte generated by Svelte v3.37.0 */

function create_fragment$1(ctx) {
	let slider;
	let current;

	slider = new Slider$1({
			props: { disabled: true, value: 5 },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Disabled", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Disabled> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Slider: Slider$1 });
	return [];
}

class Disabled extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Disabled",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/slider/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/slider/index.svelte";

// (12:2) <Demo component={Continuous} file="slider/_Continuous.svelte">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Continuous");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Continuous");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(12:2) <Demo component={Continuous} file=\\\"slider/_Continuous.svelte\\\">",
		ctx
	});

	return block;
}

// (16:2) <Demo component={Discrete} file="slider/_Discrete.svelte">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Discrete with min/max/step");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Discrete with min/max/step");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(16:2) <Demo component={Discrete} file=\\\"slider/_Discrete.svelte\\\">",
		ctx
	});

	return block;
}

// (20:2) <Demo component={TickMarks} file="slider/_TickMarks.svelte">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Adding tick marks to discrete");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Adding tick marks to discrete");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(20:2) <Demo component={TickMarks} file=\\\"slider/_TickMarks.svelte\\\">",
		ctx
	});

	return block;
}

// (24:2) <Demo component={Range} file="slider/_Range.svelte">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Range slider");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Range slider");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(24:2) <Demo component={Range} file=\\\"slider/_Range.svelte\\\">",
		ctx
	});

	return block;
}

// (26:2) <Demo component={DiscreteRange} file="slider/_DiscreteRange.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Discrete range slider with tick marks");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Discrete range slider with tick marks");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(26:2) <Demo component={DiscreteRange} file=\\\"slider/_DiscreteRange.svelte\\\">",
		ctx
	});

	return block;
}

// (30:2) <Demo component={Disabled} file="slider/_Disabled.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Disabled");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Disabled");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(30:2) <Demo component={Disabled} file=\\\"slider/_Disabled.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let t7;
	let demo3;
	let t8;
	let demo4;
	let t9;
	let demo5;
	let t10;
	let demo6;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "slider/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Continuous,
				file: "slider/_Continuous.svelte",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Discrete,
				file: "slider/_Discrete.svelte",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo3 = new Demo({
			props: {
				component: TickMarks,
				file: "slider/_TickMarks.svelte",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo4 = new Demo({
			props: {
				component: Range,
				file: "slider/_Range.svelte",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo5 = new Demo({
			props: {
				component: DiscreteRange,
				file: "slider/_DiscreteRange.svelte",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo6 = new Demo({
			props: {
				component: Disabled,
				file: "slider/_Disabled.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Slider");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/slider");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			t7 = space();
			create_component(demo3.$$.fragment);
			t8 = space();
			create_component(demo4.$$.fragment);
			t9 = space();
			create_component(demo5.$$.fragment);
			t10 = space();
			create_component(demo6.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1onfh7p\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Slider");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/slider");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			t7 = claim_space(section_nodes);
			claim_component(demo3.$$.fragment, section_nodes);
			t8 = claim_space(section_nodes);
			claim_component(demo4.$$.fragment, section_nodes);
			t9 = claim_space(section_nodes);
			claim_component(demo5.$$.fragment, section_nodes);
			t10 = claim_space(section_nodes);
			claim_component(demo6.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Slider - SMUI";
			add_location(h2, file, 5, 2, 73);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 92);
			add_location(section, file, 4, 0, 61);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			append_dev(section, t7);
			mount_component(demo3, section, null);
			append_dev(section, t8);
			mount_component(demo4, section, null);
			append_dev(section, t9);
			mount_component(demo5, section, null);
			append_dev(section, t10);
			mount_component(demo6, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
			const demo3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo3_changes.$$scope = { dirty, ctx };
			}

			demo3.$set(demo3_changes);
			const demo4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo4_changes.$$scope = { dirty, ctx };
			}

			demo4.$set(demo4_changes);
			const demo5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo5_changes.$$scope = { dirty, ctx };
			}

			demo5.$set(demo5_changes);
			const demo6_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo6_changes.$$scope = { dirty, ctx };
			}

			demo6.$set(demo6_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			transition_in(demo3.$$.fragment, local);
			transition_in(demo4.$$.fragment, local);
			transition_in(demo5.$$.fragment, local);
			transition_in(demo6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			transition_out(demo3.$$.fragment, local);
			transition_out(demo4.$$.fragment, local);
			transition_out(demo5.$$.fragment, local);
			transition_out(demo6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
			destroy_component(demo3);
			destroy_component(demo4);
			destroy_component(demo5);
			destroy_component(demo6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Slider", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Slider> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Demo,
		Simple,
		Continuous,
		Discrete,
		TickMarks,
		Range,
		DiscreteRange,
		Disabled
	});

	return [];
}

class Slider extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Slider",
			options,
			id: create_fragment.name
		});
	}
}

export default Slider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
