import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, q as create_component, x as claim_element, y as children, A as claim_component, u as detach_dev, E as attr_dev, D as add_location, F as insert_dev, H as mount_component, J as transition_in, K as transition_out, M as destroy_component, o as space, w as claim_space, t as text, z as claim_text, G as append_dev, a6 as binding_callbacks, ak as bind, al as add_flush_callback, B as set_style, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { P as Paper$1, T as Title, S as Subtitle, C as Content } from './Subtitle.1be01128.js';
import { S as Slider } from './Slider.91ac28a7.js';
import { R as Radio } from './Radio.52add3e3.js';
import { F as FormField } from './FormField.2971fa15.js';

/* src/routes/demo/paper/_Simple.svelte generated by Svelte v3.37.0 */
const file$6 = "src/routes/demo/paper/_Simple.svelte";

// (3:4) <Title>
function create_default_slot_3$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (4:4) <Subtitle>
function create_default_slot_2$6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("This is a sheet of paper.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "This is a sheet of paper.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$6.name,
		type: "slot",
		source: "(4:4) <Subtitle>",
		ctx
	});

	return block;
}

// (5:4) <Content>
function create_default_slot_1$6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paper is used to build an elevated surface.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paper is used to build an elevated surface.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$6.name,
		type: "slot",
		source: "(5:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper class="paper-demo">
function create_default_slot$6(ctx) {
	let title;
	let t0;
	let subtitle;
	let t1;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	subtitle = new Subtitle({
			props: {
				$$slots: { default: [create_default_slot_2$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t0 = space();
			create_component(subtitle.$$.fragment);
			t1 = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(subtitle.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(subtitle, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const subtitle_changes = {};

			if (dirty & /*$$scope*/ 1) {
				subtitle_changes.$$scope = { dirty, ctx };
			}

			subtitle.$set(subtitle_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(subtitle.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(subtitle.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(subtitle, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(2:2) <Paper class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				class: "paper-demo",
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$6, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Paper: Paper$1, Title, Subtitle, Content });
	return [];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$6.name
		});
	}
}

/* src/routes/demo/paper/_Square.svelte generated by Svelte v3.37.0 */
const file$5 = "src/routes/demo/paper/_Square.svelte";

// (3:4) <Title>
function create_default_slot_2$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Square Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Square Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$5.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (4:4) <Content>
function create_default_slot_1$5(ctx) {
	let t0;
	let code;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("By adding the ");
			code = element("code");
			t1 = text("square");
			t2 = text(" property, the paper gains sharper corners\n      and can be used to intimidate foes.");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "By adding the ");
			code = claim_element(nodes, "CODE", { class: true });
			var code_nodes = children(code);
			t1 = claim_text(code_nodes, "square");
			code_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, " property, the paper gains sharper corners\n      and can be used to intimidate foes.");
			this.h();
		},
		h: function hydrate() {
			attr_dev(code, "class", "svelte-16j8ny");
			add_location(code, file$5, 4, 20, 132);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, code, anchor);
			append_dev(code, t1);
			insert_dev(target, t2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(code);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$5.name,
		type: "slot",
		source: "(4:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper square class="paper-demo">
function create_default_slot$5(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_2$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(2:2) <Paper square class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				square: true,
				class: "paper-demo",
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$5, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Square", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Square> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Paper: Paper$1, Title, Content });
	return [];
}

class Square extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Square",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/routes/demo/paper/_PrimaryColor.svelte generated by Svelte v3.37.0 */
const file$4 = "src/routes/demo/paper/_PrimaryColor.svelte";

// (3:4) <Title>
function create_default_slot_2$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Primary Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Primary Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$4.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (4:4) <Content>
function create_default_slot_1$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$4.name,
		type: "slot",
		source: "(4:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper color="primary" class="paper-demo">
function create_default_slot$4(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(2:2) <Paper color=\\\"primary\\\" class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				color: "primary",
				class: "paper-demo",
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$4, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PrimaryColor", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PrimaryColor> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Paper: Paper$1, Title, Content });
	return [];
}

class PrimaryColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PrimaryColor",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/demo/paper/_SecondaryColor.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/paper/_SecondaryColor.svelte";

// (3:4) <Title>
function create_default_slot_2$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Secondary Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Secondary Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (4:4) <Content>
function create_default_slot_1$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(4:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper color="secondary" class="paper-demo">
function create_default_slot$3(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(2:2) <Paper color=\\\"secondary\\\" class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				color: "secondary",
				class: "paper-demo",
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$3, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SecondaryColor", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SecondaryColor> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Paper: Paper$1, Title, Content });
	return [];
}

class SecondaryColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SecondaryColor",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/paper/_CustomColor.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/paper/_CustomColor.svelte";

// (3:4) <Title>
function create_default_slot_2$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Custom Color Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Custom Color Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (4:4) <Content>
function create_default_slot_1$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paper can have a color, allowing you to construct fancy school projects\n      with the colored paper and glue sticks.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(4:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper color="custom-green" class="paper-demo">
function create_default_slot$2(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 1) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 1) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(2:2) <Paper color=\\\"custom-green\\\" class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				color: "custom-green",
				class: "paper-demo",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$2, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};

			if (dirty & /*$$scope*/ 1) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("CustomColor", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CustomColor> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Paper: Paper$1, Title, Content });
	return [];
}

class CustomColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CustomColor",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/paper/_ElevationTransition.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/paper/_ElevationTransition.svelte";

// (3:4) <Title>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Elevated Paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Elevated Paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(3:4) <Title>",
		ctx
	});

	return block;
}

// (12:10) <FormField align="end" style="display: flex;">
function create_default_slot_6(ctx) {
	let slider;
	let updating_value;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[2](value);
	}

	let slider_props = {
		style: "flex-grow: 1;",
		min: 0,
		max: 24,
		discrete: true
	};

	if (/*elevation*/ ctx[0] !== void 0) {
		slider_props.value = /*elevation*/ ctx[0];
	}

	slider = new Slider({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));

	const block = {
		c: function create() {
			create_component(slider.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(slider.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(slider, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const slider_changes = {};

			if (!updating_value && dirty & /*elevation*/ 1) {
				updating_value = true;
				slider_changes.value = /*elevation*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slider, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(12:10) <FormField align=\\\"end\\\" style=\\\"display: flex;\\\">",
		ctx
	});

	return block;
}

// (20:12) 
function create_label_slot_3(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Elevation");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true, style: true, class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Elevation");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			set_style(span, "padding-right", "12px");
			set_style(span, "width", "max-content");
			set_style(span, "display", "block");
			attr_dev(span, "class", "svelte-16j8ny");
			add_location(span, file$1, 19, 12, 539);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_3.name,
		type: "slot",
		source: "(20:12) ",
		ctx
	});

	return block;
}

// (30:10) <FormField>
function create_default_slot_5(ctx) {
	let radio;
	let updating_group;
	let current;

	function radio_group_binding(value) {
		/*radio_group_binding*/ ctx[3](value);
	}

	let radio_props = { value: "default" };

	if (/*color*/ ctx[1] !== void 0) {
		radio_props.group = /*color*/ ctx[1];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*color*/ 2) {
				updating_group = true;
				radio_changes.group = /*color*/ ctx[1];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(30:10) <FormField>",
		ctx
	});

	return block;
}

// (32:12) 
function create_label_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Default");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true, class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Default");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			attr_dev(span, "class", "svelte-16j8ny");
			add_location(span, file$1, 31, 12, 853);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_2.name,
		type: "slot",
		source: "(32:12) ",
		ctx
	});

	return block;
}

// (34:10) <FormField>
function create_default_slot_4$1(ctx) {
	let radio;
	let updating_group;
	let current;

	function radio_group_binding_1(value) {
		/*radio_group_binding_1*/ ctx[4](value);
	}

	let radio_props = { value: "primary" };

	if (/*color*/ ctx[1] !== void 0) {
		radio_props.group = /*color*/ ctx[1];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding_1));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*color*/ 2) {
				updating_group = true;
				radio_changes.group = /*color*/ ctx[1];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(34:10) <FormField>",
		ctx
	});

	return block;
}

// (36:12) 
function create_label_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Primary");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true, class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Primary");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			attr_dev(span, "class", "svelte-16j8ny");
			add_location(span, file$1, 35, 12, 1001);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot_1.name,
		type: "slot",
		source: "(36:12) ",
		ctx
	});

	return block;
}

// (38:10) <FormField>
function create_default_slot_3$1(ctx) {
	let radio;
	let updating_group;
	let current;

	function radio_group_binding_2(value) {
		/*radio_group_binding_2*/ ctx[5](value);
	}

	let radio_props = { value: "secondary" };

	if (/*color*/ ctx[1] !== void 0) {
		radio_props.group = /*color*/ ctx[1];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding_2));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*color*/ 2) {
				updating_group = true;
				radio_changes.group = /*color*/ ctx[1];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(38:10) <FormField>",
		ctx
	});

	return block;
}

// (40:12) 
function create_label_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Secondary");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true, class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Secondary");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			attr_dev(span, "class", "svelte-16j8ny");
			add_location(span, file$1, 39, 12, 1151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(40:12) ",
		ctx
	});

	return block;
}

// (10:6) <Paper elevation={0}>
function create_default_slot_2$1(ctx) {
	let div0;
	let formfield0;
	let t0;
	let div1;
	let formfield1;
	let t1;
	let formfield2;
	let t2;
	let formfield3;
	let current;

	formfield0 = new FormField({
			props: {
				align: "end",
				style: "display: flex;",
				$$slots: {
					label: [create_label_slot_3],
					default: [create_default_slot_6]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield1 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_2],
					default: [create_default_slot_5]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield2 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot_1],
					default: [create_default_slot_4$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	formfield3 = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot_3$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(formfield0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(formfield1.$$.fragment);
			t1 = space();
			create_component(formfield2.$$.fragment);
			t2 = space();
			create_component(formfield3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(formfield0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(formfield1.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(formfield2.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			claim_component(formfield3.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "svelte-16j8ny");
			add_location(div0, file$1, 10, 8, 288);
			attr_dev(div1, "class", "svelte-16j8ny");
			add_location(div1, file$1, 28, 8, 756);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(formfield0, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(formfield1, div1, null);
			append_dev(div1, t1);
			mount_component(formfield2, div1, null);
			append_dev(div1, t2);
			mount_component(formfield3, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfield0_changes = {};

			if (dirty & /*$$scope, elevation*/ 65) {
				formfield0_changes.$$scope = { dirty, ctx };
			}

			formfield0.$set(formfield0_changes);
			const formfield1_changes = {};

			if (dirty & /*$$scope, color*/ 66) {
				formfield1_changes.$$scope = { dirty, ctx };
			}

			formfield1.$set(formfield1_changes);
			const formfield2_changes = {};

			if (dirty & /*$$scope, color*/ 66) {
				formfield2_changes.$$scope = { dirty, ctx };
			}

			formfield2.$set(formfield2_changes);
			const formfield3_changes = {};

			if (dirty & /*$$scope, color*/ 66) {
				formfield3_changes.$$scope = { dirty, ctx };
			}

			formfield3.$set(formfield3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield0.$$.fragment, local);
			transition_in(formfield1.$$.fragment, local);
			transition_in(formfield2.$$.fragment, local);
			transition_in(formfield3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield0.$$.fragment, local);
			transition_out(formfield1.$$.fragment, local);
			transition_out(formfield2.$$.fragment, local);
			transition_out(formfield3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(formfield0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(formfield1);
			destroy_component(formfield2);
			destroy_component(formfield3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(10:6) <Paper elevation={0}>",
		ctx
	});

	return block;
}

// (4:4) <Content>
function create_default_slot_1$1(ctx) {
	let t0;
	let code;
	let t1;
	let t2;
	let br0;
	let br1;
	let t3;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				elevation: 0,
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text("If you add the ");
			code = element("code");
			t1 = text("transition");
			t2 = text(" property, elevation changes will\n      animate.\n\n      ");
			br0 = element("br");
			br1 = element("br");
			t3 = space();
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "If you add the ");
			code = claim_element(nodes, "CODE", { class: true });
			var code_nodes = children(code);
			t1 = claim_text(code_nodes, "transition");
			code_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, " property, elevation changes will\n      animate.\n\n      ");
			br0 = claim_element(nodes, "BR", { class: true });
			br1 = claim_element(nodes, "BR", { class: true });
			t3 = claim_space(nodes);
			claim_component(paper.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(code, "class", "svelte-16j8ny");
			add_location(code, file$1, 4, 21, 159);
			attr_dev(br0, "class", "svelte-16j8ny");
			add_location(br0, file$1, 7, 6, 238);
			attr_dev(br1, "class", "svelte-16j8ny");
			add_location(br1, file$1, 7, 12, 244);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, code, anchor);
			append_dev(code, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t3, anchor);
			mount_component(paper, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paper_changes = {};

			if (dirty & /*$$scope, color, elevation*/ 67) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(code);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t3);
			destroy_component(paper, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(4:4) <Content>",
		ctx
	});

	return block;
}

// (2:2) <Paper transition {elevation} {color} class="paper-demo">
function create_default_slot$1(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 64) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope, color, elevation*/ 67) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(2:2) <Paper transition {elevation} {color} class=\\\"paper-demo\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let paper;
	let current;

	paper = new Paper$1({
			props: {
				transition: true,
				elevation: /*elevation*/ ctx[0],
				color: /*color*/ ctx[1],
				class: "paper-demo",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(paper.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(paper.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "paper-container svelte-16j8ny");
			add_location(div, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(paper, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const paper_changes = {};
			if (dirty & /*elevation*/ 1) paper_changes.elevation = /*elevation*/ ctx[0];
			if (dirty & /*color*/ 2) paper_changes.color = /*color*/ ctx[1];

			if (dirty & /*$$scope, color, elevation*/ 67) {
				paper_changes.$$scope = { dirty, ctx };
			}

			paper.$set(paper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(paper);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ElevationTransition", slots, []);
	let elevation = 1;
	let color = "default";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ElevationTransition> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value) {
		elevation = value;
		$$invalidate(0, elevation);
	}

	function radio_group_binding(value) {
		color = value;
		$$invalidate(1, color);
	}

	function radio_group_binding_1(value) {
		color = value;
		$$invalidate(1, color);
	}

	function radio_group_binding_2(value) {
		color = value;
		$$invalidate(1, color);
	}

	$$self.$capture_state = () => ({
		Paper: Paper$1,
		Title,
		Content,
		Slider,
		Radio,
		FormField,
		elevation,
		color
	});

	$$self.$inject_state = $$props => {
		if ("elevation" in $$props) $$invalidate(0, elevation = $$props.elevation);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		elevation,
		color,
		slider_value_binding,
		radio_group_binding,
		radio_group_binding_1,
		radio_group_binding_2
	];
}

class ElevationTransition extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ElevationTransition",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/paper/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/paper/index.svelte";

// (12:2) <Demo component={Square} file="paper/_Square.svelte">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Square paper");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Square paper");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(12:2) <Demo component={Square} file=\\\"paper/_Square.svelte\\\">",
		ctx
	});

	return block;
}

// (14:2) <Demo component={PrimaryColor} file="paper/_PrimaryColor.svelte">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Primary color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Primary color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(14:2) <Demo component={PrimaryColor} file=\\\"paper/_PrimaryColor.svelte\\\">",
		ctx
	});

	return block;
}

// (18:2) <Demo component={SecondaryColor} file="paper/_SecondaryColor.svelte">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Secondary color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Secondary color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(18:2) <Demo component={SecondaryColor} file=\\\"paper/_SecondaryColor.svelte\\\">",
		ctx
	});

	return block;
}

// (22:2) <Demo     component={CustomColor}     files={['paper/_CustomColor.svelte', 'paper/_CustomColor.scss']}   >
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Custom color");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Custom color");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(22:2) <Demo     component={CustomColor}     files={['paper/_CustomColor.svelte', 'paper/_CustomColor.scss']}   >",
		ctx
	});

	return block;
}

// (29:2) <Demo     component={ElevationTransition}     file="paper/_ElevationTransition.svelte"   >
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Elevation and transition");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Elevation and transition");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(29:2) <Demo     component={ElevationTransition}     file=\\\"paper/_ElevationTransition.svelte\\\"   >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let t7;
	let demo3;
	let t8;
	let demo4;
	let t9;
	let demo5;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "paper/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Square,
				file: "paper/_Square.svelte",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: PrimaryColor,
				file: "paper/_PrimaryColor.svelte",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo3 = new Demo({
			props: {
				component: SecondaryColor,
				file: "paper/_SecondaryColor.svelte",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo4 = new Demo({
			props: {
				component: CustomColor,
				files: ["paper/_CustomColor.svelte", "paper/_CustomColor.scss"],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo5 = new Demo({
			props: {
				component: ElevationTransition,
				file: "paper/_ElevationTransition.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Paper");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/paper");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			t7 = space();
			create_component(demo3.$$.fragment);
			t8 = space();
			create_component(demo4.$$.fragment);
			t9 = space();
			create_component(demo5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1kvw6qa\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Paper");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/paper");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			t7 = claim_space(section_nodes);
			claim_component(demo3.$$.fragment, section_nodes);
			t8 = claim_space(section_nodes);
			claim_component(demo4.$$.fragment, section_nodes);
			t9 = claim_space(section_nodes);
			claim_component(demo5.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Paper - SMUI";
			add_location(h2, file, 5, 2, 72);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 90);
			add_location(section, file, 4, 0, 60);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			append_dev(section, t7);
			mount_component(demo3, section, null);
			append_dev(section, t8);
			mount_component(demo4, section, null);
			append_dev(section, t9);
			mount_component(demo5, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
			const demo3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo3_changes.$$scope = { dirty, ctx };
			}

			demo3.$set(demo3_changes);
			const demo4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo4_changes.$$scope = { dirty, ctx };
			}

			demo4.$set(demo4_changes);
			const demo5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo5_changes.$$scope = { dirty, ctx };
			}

			demo5.$set(demo5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			transition_in(demo3.$$.fragment, local);
			transition_in(demo4.$$.fragment, local);
			transition_in(demo5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			transition_out(demo3.$$.fragment, local);
			transition_out(demo4.$$.fragment, local);
			transition_out(demo5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
			destroy_component(demo3);
			destroy_component(demo4);
			destroy_component(demo5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Paper", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Paper> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Demo,
		Simple,
		Square,
		PrimaryColor,
		SecondaryColor,
		CustomColor,
		ElevationTransition
	});

	return [];
}

class Paper extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Paper",
			options,
			id: create_fragment.name
		});
	}
}

export default Paper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
