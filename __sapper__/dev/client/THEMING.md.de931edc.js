import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, o as space, x as claim_element, y as children, z as claim_text, u as detach_dev, w as claim_space, E as attr_dev, D as add_location, F as insert_dev, G as append_dev, O as noop, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';

/* THEMING.md generated by Svelte v3.37.0 */

const file$1 = "THEMING.md";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let h20;
	let t2;
	let t3;
	let p0;
	let t4;
	let code0;
	let t5;
	let t6;
	let a0;
	let t7;
	let t8;
	let a1;
	let t9;
	let t10;
	let a2;
	let t11;
	let t12;
	let t13;
	let p1;
	let t14;
	let code1;
	let t15;
	let t16;
	let t17;
	let pre0;

	let raw0_value = `<code class="language-scss"><span class="token keyword">@use</span> <span class="token string">'@material/theme/color-palette'</span><span class="token punctuation">;</span>

<span class="token property"><span class="token variable">$background</span></span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>

<span class="token keyword">@use</span> <span class="token string">'@material/theme/index'</span> <span class="token module-modifier keyword">as</span> theme <span class="token module-modifier keyword">with</span> <span class="token punctuation">(</span>
  <span class="token property"><span class="token variable">$primary</span></span><span class="token punctuation">:</span> color-palette.<span class="token variable">$purple-500</span><span class="token punctuation">,</span>
  <span class="token property"><span class="token variable">$secondary</span></span><span class="token punctuation">:</span> color-palette.<span class="token variable">$teal-600</span><span class="token punctuation">,</span>
  <span class="token property"><span class="token variable">$surface</span></span><span class="token punctuation">:</span> #fff<span class="token punctuation">,</span>
  <span class="token property"><span class="token variable">$background</span></span><span class="token punctuation">:</span> <span class="token variable">$background</span><span class="token punctuation">,</span>
  <span class="token property"><span class="token variable">$error</span></span><span class="token punctuation">:</span> #b00020<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token selector">html,
body </span><span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$background</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span>theme.<span class="token function">contrast-tone</span><span class="token punctuation">(</span><span class="token variable">$background</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'dark'</span><span class="token punctuation">,</span> #000<span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">a </span><span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> color-palette.<span class="token variable">$blue-500</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a:visited </span><span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> color-palette.<span class="token variable">$blue-800</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>` + "";

	let t18;
	let h21;
	let t19;
	let t20;
	let p2;
	let t21;
	let t22;
	let pre1;

	let raw1_value = `<code class="language-css"><span class="token comment">/* Theme colors. */</span>
<span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--mdc-theme-primary</span><span class="token punctuation">:</span> #ff3e00<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-secondary</span><span class="token punctuation">:</span> #676778<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-surface</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-error</span><span class="token punctuation">:</span> #b71c1c<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-on-primary</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-on-secondary</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-on-surface</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-on-error</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-primary-on-background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-secondary-on-background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.54<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-hint-on-background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-disabled-on-background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-icon-on-background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-primary-on-light</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-secondary-on-light</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.54<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-hint-on-light</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-disabled-on-light</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-icon-on-light</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.38<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-primary-on-dark</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-secondary-on-dark</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-hint-on-dark</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-disabled-on-dark</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--mdc-theme-text-icon-on-dark</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Layout grid spacing. */</span>
<span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--mdc-layout-grid-margin-desktop</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-gutter-desktop</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-column-width-desktop</span><span class="token punctuation">:</span> 72px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-margin-tablet</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-gutter-tablet</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-column-width-tablet</span><span class="token punctuation">:</span> 72px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-margin-phone</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-gutter-phone</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">--mdc-layout-grid-column-width-phone</span><span class="token punctuation">:</span> 72px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>` + "";

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Theming SMUI");
			t1 = space();
			h20 = element("h2");
			t2 = text("Theming with Sass");
			t3 = space();
			p0 = element("p");
			t4 = text("The ");
			code0 = element("code");
			t5 = text("_smui-theme.scss");
			t6 = text(" file is where you define Sass variables for your theme. You can check out the READMEs of the MDC-Web components to learn how to deeply style the components. The most important one (and probably the only one you want) is setting the ");
			a0 = element("a");
			t7 = text("theme colors");
			t8 = text(". For the Material color palette, you can @use ");
			a1 = element("a");
			t9 = text("“@material/theme/color-palette”");
			t10 = text(". You might also want to style the ");
			a2 = element("a");
			t11 = text("border radius variables");
			t12 = text(".");
			t13 = space();
			p1 = element("p");
			t14 = text("Here is an example ");
			code1 = element("code");
			t15 = text("_smui-theme.scss");
			t16 = text(" file you can use as a starting point.");
			t17 = space();
			pre0 = element("pre");
			t18 = space();
			h21 = element("h2");
			t19 = text("Theming the Bare CSS");
			t20 = space();
			p2 = element("p");
			t21 = text("If you use the bare CSS, you can set a subset of the theme options with CSS variables. Note that not all of the colors in SMUI read from CSS variables, so some parts will still use the colors defined in the original Sass compile. Below is a copy of the variables from the CSS on the SMUI website. You can use this as a starting point for your own theme.");
			t22 = space();
			pre1 = element("pre");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { id: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Theming SMUI");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h20 = claim_element(nodes, "H2", { id: true });
			var h20_nodes = children(h20);
			t2 = claim_text(h20_nodes, "Theming with Sass");
			h20_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, "The ");
			code0 = claim_element(p0_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t5 = claim_text(code0_nodes, "_smui-theme.scss");
			code0_nodes.forEach(detach_dev);
			t6 = claim_text(p0_nodes, " file is where you define Sass variables for your theme. You can check out the READMEs of the MDC-Web components to learn how to deeply style the components. The most important one (and probably the only one you want) is setting the ");
			a0 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a0_nodes = children(a0);
			t7 = claim_text(a0_nodes, "theme colors");
			a0_nodes.forEach(detach_dev);
			t8 = claim_text(p0_nodes, ". For the Material color palette, you can @use ");
			a1 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a1_nodes = children(a1);
			t9 = claim_text(a1_nodes, "“@material/theme/color-palette”");
			a1_nodes.forEach(detach_dev);
			t10 = claim_text(p0_nodes, ". You might also want to style the ");
			a2 = claim_element(p0_nodes, "A", { href: true, rel: true });
			var a2_nodes = children(a2);
			t11 = claim_text(a2_nodes, "border radius variables");
			a2_nodes.forEach(detach_dev);
			t12 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t14 = claim_text(p1_nodes, "Here is an example ");
			code1 = claim_element(p1_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t15 = claim_text(code1_nodes, "_smui-theme.scss");
			code1_nodes.forEach(detach_dev);
			t16 = claim_text(p1_nodes, " file you can use as a starting point.");
			p1_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", { class: true });
			var pre0_nodes = children(pre0);
			pre0_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			h21 = claim_element(nodes, "H2", { id: true });
			var h21_nodes = children(h21);
			t19 = claim_text(h21_nodes, "Theming the Bare CSS");
			h21_nodes.forEach(detach_dev);
			t20 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t21 = claim_text(p2_nodes, "If you use the bare CSS, you can set a subset of the theme options with CSS variables. Note that not all of the colors in SMUI read from CSS variables, so some parts will still use the colors defined in the original Sass compile. Below is a copy of the variables from the CSS on the SMUI website. You can use this as a starting point for your own theme.");
			p2_nodes.forEach(detach_dev);
			t22 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", { class: true });
			var pre1_nodes = children(pre1);
			pre1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "id", "theming-smui");
			add_location(h1, file$1, 1, 0, 1);
			attr_dev(h20, "id", "theming-with-sass");
			add_location(h20, file$1, 2, 0, 41);
			add_location(code0, file$1, 3, 7, 98);
			attr_dev(a0, "href", "https://github.com/material-components/material-components-web/tree/v11.0.0/packages/mdc-theme#color-scheme");
			attr_dev(a0, "rel", "nofollow");
			add_location(a0, file$1, 3, 269, 360);
			attr_dev(a1, "href", "https://github.com/material-components/material-components-web/blob/v11.0.0/packages/mdc-theme/_color-palette.scss");
			attr_dev(a1, "rel", "nofollow");
			add_location(a1, file$1, 6, 64, 561);
			attr_dev(a2, "href", "https://github.com/material-components/material-components-web/tree/v11.0.0/packages/mdc-shape#sass-variables");
			attr_dev(a2, "rel", "nofollow");
			add_location(a2, file$1, 9, 71, 776);
			add_location(p0, file$1, 3, 0, 91);
			add_location(code1, file$1, 13, 22, 971);
			add_location(p1, file$1, 13, 0, 949);
			attr_dev(pre0, "class", "language-scss");
			add_location(pre0, file$1, 14, 0, 1043);
			attr_dev(h21, "id", "theming-the-bare-css");
			add_location(h21, file$1, 38, 0, 4330);
			add_location(p2, file$1, 39, 0, 4386);
			attr_dev(pre1, "class", "language-css");
			add_location(pre1, file$1, 40, 0, 4747);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t4);
			append_dev(p0, code0);
			append_dev(code0, t5);
			append_dev(p0, t6);
			append_dev(p0, a0);
			append_dev(a0, t7);
			append_dev(p0, t8);
			append_dev(p0, a1);
			append_dev(a1, t9);
			append_dev(p0, t10);
			append_dev(p0, a2);
			append_dev(a2, t11);
			append_dev(p0, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t14);
			append_dev(p1, code1);
			append_dev(code1, t15);
			append_dev(p1, t16);
			insert_dev(target, t17, anchor);
			insert_dev(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert_dev(target, t18, anchor);
			insert_dev(target, h21, anchor);
			append_dev(h21, t19);
			insert_dev(target, t20, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t21);
			insert_dev(target, t22, anchor);
			insert_dev(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(h21);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(pre1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("THEMING", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<THEMING> was created with unknown prop '${key}'`);
	});

	return [];
}

class THEMING extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "THEMING",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/THEMING.md.svelte generated by Svelte v3.37.0 */
const file = "src/routes/THEMING.md.svelte";

function create_fragment(ctx) {
	let t;
	let section;
	let theming;
	let current;
	theming = new THEMING({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			create_component(theming.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-10dho3m\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(theming.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Theming - SMUI";
			attr_dev(section, "class", "markdown");
			add_location(section, file, 4, 0, 62);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			mount_component(theming, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(theming.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(theming.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_component(theming);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("THEMING_md", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<THEMING_md> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Theming: THEMING });
	return [];
}

class THEMING_md extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "THEMING_md",
			options,
			id: create_fragment.name
		});
	}
}

export default THEMING_md;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVEhFTUlORy5tZC5kZTkzMWVkYy5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
