import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as element, t as text, x as claim_element, y as children, z as claim_text, u as detach_dev, D as add_location, E as attr_dev, F as insert_dev, G as append_dev, aa as action_destroyer, O as noop, aF as globals, o as space, w as claim_space, ab as is_function, ac as run_all, ax as listen_dev, q as create_component, r as query_selector_all, A as claim_component, H as mount_component, J as transition_in, K as transition_out, M as destroy_component } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { R as Ripple$1 } from './Ripple.3a4e2bc3.js';

/* src/routes/demo/ripple/_Simple.svelte generated by Svelte v3.37.0 */
const file$5 = "src/routes/demo/ripple/_Simple.svelte";

function create_fragment$5(ctx) {
	let p;
	let t0;
	let code;
	let t1;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("SMUI ripples can be added to arbitrary elements, like this ");
			code = element("code");
			t1 = text("p");
			t2 = text("\n  element. Try clicking it to see the ripple.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { tabindex: true, class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "SMUI ripples can be added to arbitrary elements, like this ");
			code = claim_element(p_nodes, "CODE", {});
			var code_nodes = children(code);
			t1 = claim_text(code_nodes, "p");
			code_nodes.forEach(detach_dev);
			t2 = claim_text(p_nodes, "\n  element. Try clicking it to see the ripple.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(code, file$5, 1, 61, 109);
			attr_dev(p, "tabindex", "0");
			attr_dev(p, "class", "svelte-ghwvhd");
			add_location(p, file$5, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, code);
			append_dev(code, t1);
			append_dev(p, t2);

			if (!mounted) {
				dispose = action_destroyer(Ripple$1.call(null, p, { surface: true }));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Ripple: Ripple$1 });
	return [];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/routes/demo/ripple/_PrimaryColor.svelte generated by Svelte v3.37.0 */
const file$4 = "src/routes/demo/ripple/_PrimaryColor.svelte";

function create_fragment$4(ctx) {
	let p;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Primary color.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { tabindex: true, class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Primary color.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "tabindex", "0");
			attr_dev(p, "class", "svelte-ghwvhd");
			add_location(p, file$4, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);

			if (!mounted) {
				dispose = action_destroyer(Ripple$1.call(null, p, { surface: true, color: "primary" }));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PrimaryColor", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PrimaryColor> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Ripple: Ripple$1 });
	return [];
}

class PrimaryColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PrimaryColor",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/demo/ripple/_SecondaryColor.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/ripple/_SecondaryColor.svelte";

function create_fragment$3(ctx) {
	let p;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Secondary color.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { tabindex: true, class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Secondary color.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "tabindex", "0");
			attr_dev(p, "class", "svelte-ghwvhd");
			add_location(p, file$3, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);

			if (!mounted) {
				dispose = action_destroyer(Ripple$1.call(null, p, { surface: true, color: "secondary" }));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SecondaryColor", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SecondaryColor> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Ripple: Ripple$1 });
	return [];
}

class SecondaryColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SecondaryColor",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/ripple/_Unbounded.svelte generated by Svelte v3.37.0 */

const { Object: Object_1 } = globals;
const file$2 = "src/routes/demo/ripple/_Unbounded.svelte";

function create_fragment$2(ctx) {
	let p;
	let span0;
	let t0;
	let span0_class_value;
	let Ripple_action;
	let t1;
	let span1;
	let t2;
	let span1_class_value;
	let Ripple_action_1;
	let t3;
	let span2;
	let t4;
	let span2_class_value;
	let Ripple_action_2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			span0 = element("span");
			t0 = text("D");
			t1 = space();
			span1 = element("span");
			t2 = text("P");
			t3 = space();
			span2 = element("span");
			t4 = text("S");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			span0 = claim_element(p_nodes, "SPAN", { tabindex: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "D");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(p_nodes);
			span1 = claim_element(p_nodes, "SPAN", { tabindex: true, class: true });
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, "P");
			span1_nodes.forEach(detach_dev);
			t3 = claim_space(p_nodes);
			span2 = claim_element(p_nodes, "SPAN", { tabindex: true, class: true });
			var span2_nodes = children(span2);
			t4 = claim_text(span2_nodes, "S");
			span2_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "tabindex", "0");
			attr_dev(span0, "class", span0_class_value = "unbounded " + Object.keys(/*rippleClasses*/ ctx[0]).join(" ") + " svelte-c8bsu2");
			add_location(span0, file$2, 1, 2, 6);
			attr_dev(span1, "tabindex", "0");
			attr_dev(span1, "class", span1_class_value = "unbounded " + Object.keys(/*primaryRippleClasses*/ ctx[1]).join(" ") + " svelte-c8bsu2");
			add_location(span1, file$2, 25, 2, 680);
			attr_dev(span2, "tabindex", "0");
			attr_dev(span2, "class", span2_class_value = "unbounded " + Object.keys(/*secondaryRippleClasses*/ ctx[2]).join(" ") + " svelte-c8bsu2");
			add_location(span2, file$2, 50, 2, 1427);
			attr_dev(p, "class", "svelte-c8bsu2");
			add_location(p, file$2, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, span0);
			append_dev(span0, t0);
			append_dev(p, t1);
			append_dev(p, span1);
			append_dev(span1, t2);
			append_dev(p, t3);
			append_dev(p, span2);
			append_dev(span2, t4);

			if (!mounted) {
				dispose = [
					action_destroyer(Ripple_action = Ripple$1.call(null, span0, {
						surface: true,
						unbounded: true,
						// addClass and removeClass need to be provided, since
						// we have a "class" attribute on this element. If we had
						// a "style" attribute, we would also need addStyle.
						addClass: /*Ripple_function*/ ctx[3],
						removeClass: /*Ripple_function_1*/ ctx[4]
					})),
					action_destroyer(Ripple_action_1 = Ripple$1.call(null, span1, {
						surface: true,
						unbounded: true,
						color: "primary",
						// addClass and removeClass need to be provided, since
						// we have a "class" attribute on this element. If we had
						// a "style" attribute, we would also need addStyle.
						addClass: /*Ripple_function_2*/ ctx[5],
						removeClass: /*Ripple_function_3*/ ctx[6]
					})),
					action_destroyer(Ripple_action_2 = Ripple$1.call(null, span2, {
						surface: true,
						unbounded: true,
						color: "secondary",
						// addClass and removeClass need to be provided, since
						// we have a "class" attribute on this element. If we had
						// a "style" attribute, we would also need addStyle.
						addClass: /*Ripple_function_4*/ ctx[7],
						removeClass: /*Ripple_function_5*/ ctx[8]
					}))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*rippleClasses*/ 1 && span0_class_value !== (span0_class_value = "unbounded " + Object.keys(/*rippleClasses*/ ctx[0]).join(" ") + " svelte-c8bsu2")) {
				attr_dev(span0, "class", span0_class_value);
			}

			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*rippleClasses*/ 1) Ripple_action.update.call(null, {
				surface: true,
				unbounded: true,
				// addClass and removeClass need to be provided, since
				// we have a "class" attribute on this element. If we had
				// a "style" attribute, we would also need addStyle.
				addClass: /*Ripple_function*/ ctx[3],
				removeClass: /*Ripple_function_1*/ ctx[4]
			});

			if (dirty & /*primaryRippleClasses*/ 2 && span1_class_value !== (span1_class_value = "unbounded " + Object.keys(/*primaryRippleClasses*/ ctx[1]).join(" ") + " svelte-c8bsu2")) {
				attr_dev(span1, "class", span1_class_value);
			}

			if (Ripple_action_1 && is_function(Ripple_action_1.update) && dirty & /*primaryRippleClasses*/ 2) Ripple_action_1.update.call(null, {
				surface: true,
				unbounded: true,
				color: "primary",
				// addClass and removeClass need to be provided, since
				// we have a "class" attribute on this element. If we had
				// a "style" attribute, we would also need addStyle.
				addClass: /*Ripple_function_2*/ ctx[5],
				removeClass: /*Ripple_function_3*/ ctx[6]
			});

			if (dirty & /*secondaryRippleClasses*/ 4 && span2_class_value !== (span2_class_value = "unbounded " + Object.keys(/*secondaryRippleClasses*/ ctx[2]).join(" ") + " svelte-c8bsu2")) {
				attr_dev(span2, "class", span2_class_value);
			}

			if (Ripple_action_2 && is_function(Ripple_action_2.update) && dirty & /*secondaryRippleClasses*/ 4) Ripple_action_2.update.call(null, {
				surface: true,
				unbounded: true,
				color: "secondary",
				// addClass and removeClass need to be provided, since
				// we have a "class" attribute on this element. If we had
				// a "style" attribute, we would also need addStyle.
				addClass: /*Ripple_function_4*/ ctx[7],
				removeClass: /*Ripple_function_5*/ ctx[8]
			});
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Unbounded", slots, []);
	let rippleClasses = {};
	let primaryRippleClasses = {};
	let secondaryRippleClasses = {};
	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Unbounded> was created with unknown prop '${key}'`);
	});

	const Ripple_function = className => {
		if (!rippleClasses[className]) {
			$$invalidate(0, rippleClasses[className] = true, rippleClasses);
		}
	};

	const Ripple_function_1 = className => {
		if (rippleClasses[className]) {
			delete rippleClasses[className];
			$$invalidate(0, rippleClasses);
		}
	};

	const Ripple_function_2 = className => {
		if (!primaryRippleClasses[className]) {
			$$invalidate(1, primaryRippleClasses[className] = true, primaryRippleClasses);
		}
	};

	const Ripple_function_3 = className => {
		if (primaryRippleClasses[className]) {
			delete primaryRippleClasses[className];
			$$invalidate(1, primaryRippleClasses);
		}
	};

	const Ripple_function_4 = className => {
		if (!secondaryRippleClasses[className]) {
			$$invalidate(2, secondaryRippleClasses[className] = true, secondaryRippleClasses);
		}
	};

	const Ripple_function_5 = className => {
		if (secondaryRippleClasses[className]) {
			delete secondaryRippleClasses[className];
			$$invalidate(2, secondaryRippleClasses);
		}
	};

	$$self.$capture_state = () => ({
		Ripple: Ripple$1,
		rippleClasses,
		primaryRippleClasses,
		secondaryRippleClasses
	});

	$$self.$inject_state = $$props => {
		if ("rippleClasses" in $$props) $$invalidate(0, rippleClasses = $$props.rippleClasses);
		if ("primaryRippleClasses" in $$props) $$invalidate(1, primaryRippleClasses = $$props.primaryRippleClasses);
		if ("secondaryRippleClasses" in $$props) $$invalidate(2, secondaryRippleClasses = $$props.secondaryRippleClasses);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		rippleClasses,
		primaryRippleClasses,
		secondaryRippleClasses,
		Ripple_function,
		Ripple_function_1,
		Ripple_function_2,
		Ripple_function_3,
		Ripple_function_4,
		Ripple_function_5
	];
}

class Unbounded extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Unbounded",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/ripple/_KeyboardActivation.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/ripple/_KeyboardActivation.svelte";

function create_fragment$1(ctx) {
	let p;
	let t;
	let Ripple_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Keyboard activation on a non-button non-link element. (Focus and press\n  space/enter.)");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { tabindex: true, class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Keyboard activation on a non-button non-link element. (Focus and press\n  space/enter.)");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "tabindex", "0");
			attr_dev(p, "class", "svelte-ghwvhd");
			add_location(p, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);

			if (!mounted) {
				dispose = [
					action_destroyer(Ripple_action = Ripple$1.call(null, p, { surface: true, active: /*active*/ ctx[0] })),
					listen_dev(p, "mousedown", /*mousedown_handler*/ ctx[1], true, false, false),
					listen_dev(p, "mouseup", /*mouseup_handler*/ ctx[2], true, false, false),
					listen_dev(p, "keydown", /*keydown_handler*/ ctx[3], true, false, false),
					listen_dev(p, "keyup", /*keyup_handler*/ ctx[4], true, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*active*/ 1) Ripple_action.update.call(null, { surface: true, active: /*active*/ ctx[0] });
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("KeyboardActivation", slots, []);
	let active = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<KeyboardActivation> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = () => $$invalidate(0, active = true);
	const mouseup_handler = () => $$invalidate(0, active = false);
	const keydown_handler = e => $$invalidate(0, active = e.code === "Space" || e.code === "Enter");
	const keyup_handler = () => $$invalidate(0, active = false);
	$$self.$capture_state = () => ({ Ripple: Ripple$1, active });

	$$self.$inject_state = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [active, mousedown_handler, mouseup_handler, keydown_handler, keyup_handler];
}

class KeyboardActivation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "KeyboardActivation",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/ripple/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/ripple/index.svelte";

// (16:2) <Demo component={Unbounded} file="ripple/_Unbounded.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Unbounded");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Unbounded");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(16:2) <Demo component={Unbounded} file=\\\"ripple/_Unbounded.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let t7;
	let demo3;
	let t8;
	let demo4;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "ripple/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: PrimaryColor,
				file: "ripple/_PrimaryColor.svelte"
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: SecondaryColor,
				file: "ripple/_SecondaryColor.svelte"
			},
			$$inline: true
		});

	demo3 = new Demo({
			props: {
				component: Unbounded,
				file: "ripple/_Unbounded.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo4 = new Demo({
			props: {
				component: KeyboardActivation,
				file: "ripple/_KeyboardActivation.svelte"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Ripple");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/ripple");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			t7 = space();
			create_component(demo3.$$.fragment);
			t8 = space();
			create_component(demo4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1s9ceeg\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Ripple");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/ripple");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			t7 = claim_space(section_nodes);
			claim_component(demo3.$$.fragment, section_nodes);
			t8 = claim_space(section_nodes);
			claim_component(demo4.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Ripple - SMUI";
			add_location(h2, file, 5, 2, 73);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 92);
			add_location(section, file, 4, 0, 61);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			append_dev(section, t7);
			mount_component(demo3, section, null);
			append_dev(section, t8);
			mount_component(demo4, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo3_changes.$$scope = { dirty, ctx };
			}

			demo3.$set(demo3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			transition_in(demo3.$$.fragment, local);
			transition_in(demo4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			transition_out(demo3.$$.fragment, local);
			transition_out(demo4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
			destroy_component(demo3);
			destroy_component(demo4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Ripple", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Ripple> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Demo,
		Simple,
		PrimaryColor,
		SecondaryColor,
		Unbounded,
		KeyboardActivation
	});

	return [];
}

class Ripple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Ripple",
			options,
			id: create_fragment.name
		});
	}
}

export default Ripple;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
