import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a6 as binding_callbacks, ak as bind, q as create_component, o as space, p as element, t as text, A as claim_component, w as claim_space, x as claim_element, y as children, z as claim_text, u as detach_dev, E as attr_dev, D as add_location, H as mount_component, F as insert_dev, G as append_dev, aw as set_data_dev, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, ag as validate_each_argument, a4 as group_outros, a5 as check_outros, aj as destroy_each, O as noop, B as set_style, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { F as FormField } from './FormField.2971fa15.js';
import { C as Checkbox } from './Checkbox.52871e38.js';
import { R as Radio } from './Radio.52add3e3.js';
import { S as Switch } from './Switch.f22d860f.js';

/* src/routes/demo/form-field/_Checkbox.svelte generated by Svelte v3.37.0 */
const file$4 = "src/routes/demo/form-field/_Checkbox.svelte";

// (1:0) <FormField>
function create_default_slot$4(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[1](value);
	}

	let checkbox_props = {};

	if (/*checked*/ ctx[0] !== void 0) {
		checkbox_props.checked = /*checked*/ ctx[0];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*checked*/ 1) {
				updating_checked = true;
				checkbox_changes.checked = /*checked*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(1:0) <FormField>",
		ctx
	});

	return block;
}

// (3:2) 
function create_label_slot$3(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Form fields let you click the label to toggle or focus the form control.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Form fields let you click the label to toggle or focus the form control.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$4, 2, 2, 42);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$3.name,
		type: "slot",
		source: "(3:2) ",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let formfield;
	let t0;
	let pre;
	let t1;
	let t2_value = (/*checked*/ ctx[0] ? "Yes" : "No") + "";
	let t2;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot$3],
					default: [create_default_slot$4]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Checked: ");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Checked: ");
			t2 = claim_text(pre_nodes, t2_value);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$4, 7, 0, 163);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield_changes = {};

			if (dirty & /*$$scope, checked*/ 5) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
			if ((!current || dirty & /*checked*/ 1) && t2_value !== (t2_value = (/*checked*/ ctx[0] ? "Yes" : "No") + "")) set_data_dev(t2, t2_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Checkbox", slots, []);
	let checked = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Checkbox> was created with unknown prop '${key}'`);
	});

	function checkbox_checked_binding(value) {
		checked = value;
		$$invalidate(0, checked);
	}

	$$self.$capture_state = () => ({ FormField, Checkbox, checked });

	$$self.$inject_state = $$props => {
		if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [checked, checkbox_checked_binding];
}

class Checkbox_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox_1",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/demo/form-field/_EndAlignment.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/form-field/_EndAlignment.svelte";

// (1:0) <FormField align="end">
function create_default_slot$3(ctx) {
	let checkbox;
	let updating_checked;
	let current;

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[1](value);
	}

	let checkbox_props = {};

	if (/*checked*/ ctx[0] !== void 0) {
		checkbox_props.checked = /*checked*/ ctx[0];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*checked*/ 1) {
				updating_checked = true;
				checkbox_changes.checked = /*checked*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(1:0) <FormField align=\\\"end\\\">",
		ctx
	});

	return block;
}

// (3:2) 
function create_label_slot$2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("The input can be aligned at the end too.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "The input can be aligned at the end too.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$3, 2, 2, 54);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$2.name,
		type: "slot",
		source: "(3:2) ",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let formfield;
	let t0;
	let pre;
	let t1;
	let t2_value = (/*checked*/ ctx[0] ? "Yes" : "No") + "";
	let t2;
	let current;

	formfield = new FormField({
			props: {
				align: "end",
				$$slots: {
					label: [create_label_slot$2],
					default: [create_default_slot$3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Checked: ");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Checked: ");
			t2 = claim_text(pre_nodes, t2_value);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$3, 5, 0, 137);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield_changes = {};

			if (dirty & /*$$scope, checked*/ 5) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
			if ((!current || dirty & /*checked*/ 1) && t2_value !== (t2_value = (/*checked*/ ctx[0] ? "Yes" : "No") + "")) set_data_dev(t2, t2_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EndAlignment", slots, []);
	let checked = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EndAlignment> was created with unknown prop '${key}'`);
	});

	function checkbox_checked_binding(value) {
		checked = value;
		$$invalidate(0, checked);
	}

	$$self.$capture_state = () => ({ FormField, Checkbox, checked });

	$$self.$inject_state = $$props => {
		if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [checked, checkbox_checked_binding];
}

class EndAlignment extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EndAlignment",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/form-field/_Radio.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/form-field/_Radio.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (2:2) <FormField style="margin-right: 1em;">
function create_default_slot$2(ctx) {
	let radio;
	let updating_group;
	let current;

	function radio_group_binding(value) {
		/*radio_group_binding*/ ctx[1](value);
	}

	let radio_props = { value: /*option*/ ctx[2] };

	if (/*selected*/ ctx[0] !== void 0) {
		radio_props.group = /*selected*/ ctx[0];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding));

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*selected*/ 1) {
				updating_group = true;
				radio_changes.group = /*selected*/ ctx[0];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(2:2) <FormField style=\\\"margin-right: 1em;\\\">",
		ctx
	});

	return block;
}

// (4:4) 
function create_label_slot$1(ctx) {
	let span;
	let t_value = `${/*option*/ ctx[2][0].toUpperCase()}${/*option*/ ctx[2].slice(1)}` + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "label");
			add_location(span, file$2, 3, 4, 128);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot$1.name,
		type: "slot",
		source: "(4:4) ",
		ctx
	});

	return block;
}

// (1:0) {#each ['yes', 'no'] as option}
function create_each_block(ctx) {
	let formfield;
	let current;

	formfield = new FormField({
			props: {
				style: "margin-right: 1em;",
				$$slots: {
					label: [create_label_slot$1],
					default: [create_default_slot$2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfield_changes = {};

			if (dirty & /*$$scope, selected*/ 33) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(1:0) {#each ['yes', 'no'] as option}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let t0;
	let pre;
	let t1;
	let t2;
	let current;
	let each_value = ["yes", "no"];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < 2; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			pre = element("pre");
			t1 = text("Selected: ");
			t2 = text(/*selected*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].l(nodes);
			}

			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Selected: ");
			t2 = claim_text(pre_nodes, /*selected*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$2, 7, 0, 227);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selected*/ 1) {
				each_value = ["yes", "no"];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < 2; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				group_outros();

				for (i = 2; i < 2; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*selected*/ 1) set_data_dev(t2, /*selected*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < 2; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < 2; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Radio", slots, []);
	let selected = "yes";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Radio> was created with unknown prop '${key}'`);
	});

	function radio_group_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	$$self.$capture_state = () => ({ FormField, Radio, selected });

	$$self.$inject_state = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected, radio_group_binding];
}

class Radio_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Radio_1",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/form-field/_Switch.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/form-field/_Switch.svelte";

// (1:0) <FormField>
function create_default_slot$1(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[1](value);
	}

	let switch_1_props = {};

	if (/*agreed*/ ctx[0] !== void 0) {
		switch_1_props.checked = /*agreed*/ ctx[0];
	}

	switch_1 = new Switch({ props: switch_1_props, $$inline: true });
	binding_callbacks.push(() => bind(switch_1, "checked", switch_1_checked_binding));

	const block = {
		c: function create() {
			create_component(switch_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*agreed*/ 1) {
				updating_checked = true;
				switch_1_changes.checked = /*agreed*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(1:0) <FormField>",
		ctx
	});

	return block;
}

// (3:2) 
function create_label_slot(ctx) {
	let span;
	let t0;
	let small;
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("I agree to the terms and conditions of the software, ");
			small = element("small");
			t1 = text("and hereby sign away my rights just to use this app.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "I agree to the terms and conditions of the software, ");
			small = claim_element(span_nodes, "SMALL", { style: true });
			var small_nodes = children(small);
			t1 = claim_text(small_nodes, "and hereby sign away my rights just to use this app.");
			small_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(small, "opacity", ".4");
			add_location(small, file$1, 3, 57, 126);
			attr_dev(span, "slot", "label");
			add_location(span, file$1, 2, 2, 49);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, small);
			append_dev(small, t1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_label_slot.name,
		type: "slot",
		source: "(3:2) ",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let formfield;
	let t0;
	let pre;
	let t1;
	let t2_value = (/*agreed*/ ctx[0] ? "Yes, muahahah." : "Not yet.") + "";
	let t2;
	let current;

	formfield = new FormField({
			props: {
				$$slots: {
					label: [create_label_slot],
					default: [create_default_slot$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfield.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("Agreed: ");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(formfield.$$.fragment, nodes);
			t0 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t1 = claim_text(pre_nodes, "Agreed: ");
			t2 = claim_text(pre_nodes, t2_value);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 10, 0, 257);
		},
		m: function mount(target, anchor) {
			mount_component(formfield, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);
			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formfield_changes = {};

			if (dirty & /*$$scope, agreed*/ 5) {
				formfield_changes.$$scope = { dirty, ctx };
			}

			formfield.$set(formfield_changes);
			if ((!current || dirty & /*agreed*/ 1) && t2_value !== (t2_value = (/*agreed*/ ctx[0] ? "Yes, muahahah." : "Not yet.") + "")) set_data_dev(t2, t2_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfield, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Switch", slots, []);
	let agreed = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Switch> was created with unknown prop '${key}'`);
	});

	function switch_1_checked_binding(value) {
		agreed = value;
		$$invalidate(0, agreed);
	}

	$$self.$capture_state = () => ({ FormField, Switch, agreed });

	$$self.$inject_state = $$props => {
		if ("agreed" in $$props) $$invalidate(0, agreed = $$props.agreed);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [agreed, switch_1_checked_binding];
}

class Switch_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Switch_1",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/form-field/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/form-field/index.svelte";

// (10:2) <Demo component={Checkbox} file="form-field/_Checkbox.svelte">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Checkbox");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Checkbox");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(10:2) <Demo component={Checkbox} file=\\\"form-field/_Checkbox.svelte\\\">",
		ctx
	});

	return block;
}

// (12:2) <Demo component={EndAlignment} file="form-field/_EndAlignment.svelte">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("End alignment");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "End alignment");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(12:2) <Demo component={EndAlignment} file=\\\"form-field/_EndAlignment.svelte\\\">",
		ctx
	});

	return block;
}

// (16:2) <Demo component={Radio} file="form-field/_Radio.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Radio button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Radio button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(16:2) <Demo component={Radio} file=\\\"form-field/_Radio.svelte\\\">",
		ctx
	});

	return block;
}

// (18:2) <Demo component={Switch} file="form-field/_Switch.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Switch");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Switch");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(18:2) <Demo component={Switch} file=\\\"form-field/_Switch.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let pre;
	let t3;
	let t4;
	let demo0;
	let t5;
	let demo1;
	let t6;
	let demo2;
	let t7;
	let demo3;
	let current;

	demo0 = new Demo({
			props: {
				component: Checkbox_1,
				file: "form-field/_Checkbox.svelte",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: EndAlignment,
				file: "form-field/_EndAlignment.svelte",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Radio_1,
				file: "form-field/_Radio.svelte",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo3 = new Demo({
			props: {
				component: Switch_1,
				file: "form-field/_Switch.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Form Fields");
			t2 = space();
			pre = element("pre");
			t3 = text("npm i -D @smui/form-field");
			t4 = space();
			create_component(demo0.$$.fragment);
			t5 = space();
			create_component(demo1.$$.fragment);
			t6 = space();
			create_component(demo2.$$.fragment);
			t7 = space();
			create_component(demo3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-13edvmw\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Form Fields");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "npm i -D @smui/form-field");
			pre_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t5 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t6 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			t7 = claim_space(section_nodes);
			claim_component(demo3.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Form Field - SMUI";
			add_location(h2, file, 5, 2, 77);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 7, 2, 101);
			add_location(section, file, 4, 0, 65);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, pre);
			append_dev(pre, t3);
			append_dev(section, t4);
			mount_component(demo0, section, null);
			append_dev(section, t5);
			mount_component(demo1, section, null);
			append_dev(section, t6);
			mount_component(demo2, section, null);
			append_dev(section, t7);
			mount_component(demo3, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo0_changes.$$scope = { dirty, ctx };
			}

			demo0.$set(demo0_changes);
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
			const demo3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo3_changes.$$scope = { dirty, ctx };
			}

			demo3.$set(demo3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			transition_in(demo3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			transition_out(demo3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
			destroy_component(demo3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Form_field", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Form_field> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Demo,
		Checkbox: Checkbox_1,
		EndAlignment,
		Radio: Radio_1,
		Switch: Switch_1
	});

	return [];
}

class Form_field extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Form_field",
			options,
			id: create_fragment.name
		});
	}
}

export default Form_field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMGE2OTk0MjEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9mb3JtLWZpZWxkL19DaGVja2JveC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2RlbW8vZm9ybS1maWVsZC9fRW5kQWxpZ25tZW50LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9mb3JtLWZpZWxkL19SYWRpby5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2RlbW8vZm9ybS1maWVsZC9fU3dpdGNoLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGVtby9mb3JtLWZpZWxkL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8Rm9ybUZpZWxkPlxuICA8Q2hlY2tib3ggYmluZDpjaGVja2VkIC8+XG4gIDxzcGFuIHNsb3Q9XCJsYWJlbFwiPlxuICAgIEZvcm0gZmllbGRzIGxldCB5b3UgY2xpY2sgdGhlIGxhYmVsIHRvIHRvZ2dsZSBvciBmb2N1cyB0aGUgZm9ybSBjb250cm9sLlxuICA8L3NwYW4+XG48L0Zvcm1GaWVsZD5cblxuPHByZSBjbGFzcz1cInN0YXR1c1wiPkNoZWNrZWQ6IHtjaGVja2VkID8gJ1llcycgOiAnTm8nfTwvcHJlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgRm9ybUZpZWxkIGZyb20gJ0BzbXVpL2Zvcm0tZmllbGQnO1xuICBpbXBvcnQgQ2hlY2tib3ggZnJvbSAnQHNtdWkvY2hlY2tib3gnO1xuXG4gIGxldCBjaGVja2VkID0gZmFsc2U7XG48L3NjcmlwdD5cbiIsIjxGb3JtRmllbGQgYWxpZ249XCJlbmRcIj5cbiAgPENoZWNrYm94IGJpbmQ6Y2hlY2tlZCAvPlxuICA8c3BhbiBzbG90PVwibGFiZWxcIj4gVGhlIGlucHV0IGNhbiBiZSBhbGlnbmVkIGF0IHRoZSBlbmQgdG9vLiA8L3NwYW4+XG48L0Zvcm1GaWVsZD5cblxuPHByZSBjbGFzcz1cInN0YXR1c1wiPkNoZWNrZWQ6IHtjaGVja2VkID8gJ1llcycgOiAnTm8nfTwvcHJlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgRm9ybUZpZWxkIGZyb20gJ0BzbXVpL2Zvcm0tZmllbGQnO1xuICBpbXBvcnQgQ2hlY2tib3ggZnJvbSAnQHNtdWkvY2hlY2tib3gnO1xuXG4gIGxldCBjaGVja2VkID0gZmFsc2U7XG48L3NjcmlwdD5cbiIsInsjZWFjaCBbJ3llcycsICdubyddIGFzIG9wdGlvbn1cbiAgPEZvcm1GaWVsZCBzdHlsZT1cIm1hcmdpbi1yaWdodDogMWVtO1wiPlxuICAgIDxSYWRpbyBiaW5kOmdyb3VwPXtzZWxlY3RlZH0gdmFsdWU9e29wdGlvbn0gLz5cbiAgICA8c3BhbiBzbG90PVwibGFiZWxcIj57YCR7b3B0aW9uWzBdLnRvVXBwZXJDYXNlKCl9JHtvcHRpb24uc2xpY2UoMSl9YH08L3NwYW4+XG4gIDwvRm9ybUZpZWxkPlxuey9lYWNofVxuXG48cHJlIGNsYXNzPVwic3RhdHVzXCI+U2VsZWN0ZWQ6IHtzZWxlY3RlZH08L3ByZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IEZvcm1GaWVsZCBmcm9tICdAc211aS9mb3JtLWZpZWxkJztcbiAgaW1wb3J0IFJhZGlvIGZyb20gJ0BzbXVpL3JhZGlvJztcblxuICBsZXQgc2VsZWN0ZWQgPSAneWVzJztcbjwvc2NyaXB0PlxuIiwiPEZvcm1GaWVsZD5cbiAgPFN3aXRjaCBiaW5kOmNoZWNrZWQ9e2FncmVlZH0gLz5cbiAgPHNwYW4gc2xvdD1cImxhYmVsXCI+XG4gICAgSSBhZ3JlZSB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIHNvZnR3YXJlLCA8c21hbGxcbiAgICAgIHN0eWxlPVwib3BhY2l0eTogLjQ7XCJcbiAgICAgID5hbmQgaGVyZWJ5IHNpZ24gYXdheSBteSByaWdodHMganVzdCB0byB1c2UgdGhpcyBhcHAuPC9zbWFsbFxuICAgID5cbiAgPC9zcGFuPlxuPC9Gb3JtRmllbGQ+XG5cbjxwcmUgY2xhc3M9XCJzdGF0dXNcIj5BZ3JlZWQ6IHthZ3JlZWQgPyAnWWVzLCBtdWFoYWhhaC4nIDogJ05vdCB5ZXQuJ308L3ByZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IEZvcm1GaWVsZCBmcm9tICdAc211aS9mb3JtLWZpZWxkJztcbiAgaW1wb3J0IFN3aXRjaCBmcm9tICdAc211aS9zd2l0Y2gnO1xuXG4gIGxldCBhZ3JlZWQgPSBmYWxzZTtcbjwvc2NyaXB0PlxuIiwiPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+Rm9ybSBGaWVsZCAtIFNNVUk8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHNlY3Rpb24+XG4gIDxoMj5Gb3JtIEZpZWxkczwvaDI+XG5cbiAgPHByZSBjbGFzcz1cImRlbW8tc3BhY2VkXCI+bnBtIGkgLUQgQHNtdWkvZm9ybS1maWVsZDwvcHJlPlxuXG4gIDxEZW1vIGNvbXBvbmVudD17Q2hlY2tib3h9IGZpbGU9XCJmb3JtLWZpZWxkL19DaGVja2JveC5zdmVsdGVcIj5DaGVja2JveDwvRGVtbz5cblxuICA8RGVtbyBjb21wb25lbnQ9e0VuZEFsaWdubWVudH0gZmlsZT1cImZvcm0tZmllbGQvX0VuZEFsaWdubWVudC5zdmVsdGVcIj5cbiAgICBFbmQgYWxpZ25tZW50XG4gIDwvRGVtbz5cblxuICA8RGVtbyBjb21wb25lbnQ9e1JhZGlvfSBmaWxlPVwiZm9ybS1maWVsZC9fUmFkaW8uc3ZlbHRlXCI+UmFkaW8gYnV0dG9uPC9EZW1vPlxuXG4gIDxEZW1vIGNvbXBvbmVudD17U3dpdGNofSBmaWxlPVwiZm9ybS1maWVsZC9fU3dpdGNoLnN2ZWx0ZVwiPlN3aXRjaDwvRGVtbz5cbjwvc2VjdGlvbj5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IERlbW8gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9EZW1vLnN2ZWx0ZSc7XG4gIGltcG9ydCBDaGVja2JveCBmcm9tICcuL19DaGVja2JveC5zdmVsdGUnO1xuICBpbXBvcnQgRW5kQWxpZ25tZW50IGZyb20gJy4vX0VuZEFsaWdubWVudC5zdmVsdGUnO1xuICBpbXBvcnQgUmFkaW8gZnJvbSAnLi9fUmFkaW8uc3ZlbHRlJztcbiAgaW1wb3J0IFN3aXRjaCBmcm9tICcuL19Td2l0Y2guc3ZlbHRlJztcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbIkNoZWNrYm94IiwiUmFkaW8iLCJTd2l0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFPOEIsR0FBTyxNQUFHLEtBQUssR0FBRyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0ZBQXRCLEdBQU8sTUFBRyxLQUFLLEdBQUcsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FNOUMsT0FBTyxHQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQ1JTLEdBQU8sTUFBRyxLQUFLLEdBQUcsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvRkFBdEIsR0FBTyxNQUFHLEtBQUssR0FBRyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQU05QyxPQUFPLEdBQUcsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0NUbUIsR0FBTTs7a0JBQXZCLEdBQVE7bUNBQVIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQUNKLEdBQU0sSUFBQyxDQUFDLEVBQUUsV0FBVyxnQkFBSyxHQUFNLElBQUMsS0FBSyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBSDNELEtBQUssRUFBRSxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBT1ksR0FBUTs7Ozs7Ozs7Ozs7OzJDQUFSLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFQL0IsS0FBSyxFQUFFLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFPWSxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQU1qQyxRQUFRLEdBQUcsS0FBSzs7Ozs7Ozs7RUFYQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQ0RQLEdBQU07c0NBQU4sR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQ0FBTixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBU0QsR0FBTSxNQUFHLGdCQUFnQixHQUFHLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrRkFBdEMsR0FBTSxNQUFHLGdCQUFnQixHQUFHLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBTTdELE1BQU0sR0FBRyxLQUFLOzs7Ozs7OztFQWZJLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQ1FYQSxVQUFROzs7Ozs7Ozs7O2VBRVIsWUFBWTs7Ozs7Ozs7OztlQUlaQyxPQUFLOzs7Ozs7Ozs7O2VBRUxDLFFBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
