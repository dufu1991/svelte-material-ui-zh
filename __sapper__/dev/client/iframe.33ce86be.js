import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a7 as create_slot, $ as assign, W as compute_rest_props, v as validate_slots, b0 as forwardEventsBuilder, Y as get_current_component, a0 as exclude_internal_props, b1 as useActions, p as element, x as claim_element, y as children, u as detach_dev, a9 as set_attributes, D as add_location, F as insert_dev, aa as action_destroyer, a8 as update_slot, a2 as get_spread_update, ab as is_function, J as transition_in, K as transition_out, ac as run_all, a6 as binding_callbacks, b2 as classMap, b3 as subscribe, q as create_component, a1 as empty, A as claim_component, H as mount_component, a3 as get_spread_object, a4 as group_outros, M as destroy_component, a5 as check_outros, O as noop, aY as TopAppBar, b4 as stores$1, ay as validate_store, az as component_subscribe, aZ as Row, a_ as Section, a$ as Title, as as IconButton, ak as bind, o as space, w as claim_space, al as add_flush_callback, t as text, z as claim_text, G as append_dev, E as attr_dev, B as set_style, aw as set_data_dev } from './client.ec94238b.js';
import { L as LoremIpsum } from './LoremIpsum.116fcbde.js';

/* packages/top-app-bar/node_modules/@smui/common/Main.svelte generated by Svelte v3.37.0 */
const file$1 = "packages/top-app-bar/node_modules/@smui/common/Main.svelte";

function create_fragment$2(ctx) {
	let main;
	let useActions_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let main_levels = [/*$$restProps*/ ctx[3]];
	let main_data = {};

	for (let i = 0; i < main_levels.length; i += 1) {
		main_data = assign(main_data, main_levels[i]);
	}

	const block = {
		c: function create() {
			main = element("main");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			if (default_slot) default_slot.l(main_nodes);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(main, main_data);
			add_location(main, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);

			if (default_slot) {
				default_slot.m(main, null);
			}

			/*main_binding*/ ctx[7](main);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useActions_action = useActions.call(null, main, /*use*/ ctx[0])),
					action_destroyer(/*forwardEvents*/ ctx[2].call(null, main))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			set_attributes(main, main_data = get_spread_update(main_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if (default_slot) default_slot.d(detaching);
			/*main_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["use","getElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Main", slots, ['default']);
	let { use = [] } = $$props;
	const forwardEvents = forwardEventsBuilder(get_current_component());
	let element = null;

	function getElement() {
		return element;
	}

	function main_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		forwardEventsBuilder,
		useActions,
		use,
		forwardEvents,
		element,
		getElement
	});

	$$self.$inject_state = $$new_props => {
		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
		if ("element" in $$props) $$invalidate(1, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		use,
		element,
		forwardEvents,
		$$restProps,
		getElement,
		$$scope,
		slots,
		main_binding
	];
}

class Main extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { use: 0, getElement: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Main",
			options,
			id: create_fragment$2.name
		});
	}

	get use() {
		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set use(value) {
		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getElement() {
		return this.$$.ctx[4];
	}

	set getElement(value) {
		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* packages/top-app-bar/AutoAdjust.svelte generated by Svelte v3.37.0 */

// (1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [adjustClass]: true,   })}   {...$$restProps} >
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [adjustClass]: true,   })}   {...$$restProps} >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	const switch_instance_spread_levels = [
		{
			use: [/*forwardEvents*/ ctx[6], .../*use*/ ctx[0]]
		},
		{
			class: classMap({
				[/*className*/ ctx[1]]: true,
				[/*adjustClass*/ ctx[5]]: true
			})
		},
		/*$$restProps*/ ctx[7]
	];

	var switch_value = /*component*/ ctx[2];

	function switch_props(ctx) {
		let switch_instance_props = {
			$$slots: { default: [create_default_slot$1] },
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		/*switch_instance_binding*/ ctx[12](switch_instance);
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const switch_instance_changes = (dirty & /*forwardEvents, use, classMap, className, adjustClass, $$restProps*/ 227)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*forwardEvents, use*/ 65 && {
						use: [/*forwardEvents*/ ctx[6], .../*use*/ ctx[0]]
					},
					dirty & /*classMap, className, adjustClass*/ 34 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							[/*adjustClass*/ ctx[5]]: true
						})
					},
					dirty & /*$$restProps*/ 128 && get_spread_object(/*$$restProps*/ ctx[7])
				])
			: {};

			if (dirty & /*$$scope*/ 8192) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					/*switch_instance_binding*/ ctx[12](switch_instance);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			/*switch_instance_binding*/ ctx[12](null);
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let propStore;
	let adjustClass;
	const omit_props_names = ["use","class","topAppBar","component","getElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	let $propStore,
		$$unsubscribe_propStore = noop,
		$$subscribe_propStore = () => ($$unsubscribe_propStore(), $$unsubscribe_propStore = subscribe(propStore, $$value => $$invalidate(10, $propStore = $$value)), propStore);

	$$self.$$.on_destroy.push(() => $$unsubscribe_propStore());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AutoAdjust", slots, ['default']);
	const forwardEvents = forwardEventsBuilder(get_current_component());
	let { use = [] } = $$props;
	let { class: className = "" } = $$props;
	let { topAppBar } = $$props;
	let element;
	let { component = Main } = $$props;

	function getElement() {
		return element.getElement();
	}

	function switch_instance_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			element = $$value;
			$$invalidate(4, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
		if ("topAppBar" in $$new_props) $$invalidate(8, topAppBar = $$new_props.topAppBar);
		if ("component" in $$new_props) $$invalidate(2, component = $$new_props.component);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		forwardEventsBuilder,
		classMap,
		Main,
		forwardEvents,
		use,
		className,
		topAppBar,
		element,
		component,
		getElement,
		propStore,
		adjustClass,
		$propStore
	});

	$$self.$inject_state = $$new_props => {
		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
		if ("topAppBar" in $$props) $$invalidate(8, topAppBar = $$new_props.topAppBar);
		if ("element" in $$props) $$invalidate(4, element = $$new_props.element);
		if ("component" in $$props) $$invalidate(2, component = $$new_props.component);
		if ("propStore" in $$props) $$subscribe_propStore($$invalidate(3, propStore = $$new_props.propStore));
		if ("adjustClass" in $$props) $$invalidate(5, adjustClass = $$new_props.adjustClass);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*topAppBar*/ 256) {
			$$subscribe_propStore($$invalidate(3, propStore = topAppBar && topAppBar.getPropStore()));
		}

		if ($$self.$$.dirty & /*propStore, $propStore*/ 1032) {
			$$invalidate(5, adjustClass = (() => {
				if (!propStore || $propStore.variant === "static") {
					return "";
				}

				if ($propStore.variant === "short") {
					return "mdc-top-app-bar--short-fixed-adjust";
				}

				if ($propStore.prominent && $propStore.dense) {
					return "mdc-top-app-bar--dense-prominent-fixed-adjust";
				}

				if ($propStore.prominent) {
					return "mdc-top-app-bar--prominent-fixed-adjust";
				}

				if ($propStore.dense) {
					return "mdc-top-app-bar--dense-fixed-adjust";
				}

				return "mdc-top-app-bar--fixed-adjust";
			})());
		}
	};

	return [
		use,
		className,
		component,
		propStore,
		element,
		adjustClass,
		forwardEvents,
		$$restProps,
		topAppBar,
		getElement,
		$propStore,
		slots,
		switch_instance_binding,
		$$scope
	];
}

class AutoAdjust extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			use: 0,
			class: 1,
			topAppBar: 8,
			component: 2,
			getElement: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AutoAdjust",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*topAppBar*/ ctx[8] === undefined && !("topAppBar" in props)) {
			console.warn("<AutoAdjust> was created without expected prop 'topAppBar'");
		}
	}

	get use() {
		throw new Error("<AutoAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set use(value) {
		throw new Error("<AutoAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<AutoAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<AutoAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get topAppBar() {
		throw new Error("<AutoAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set topAppBar(value) {
		throw new Error("<AutoAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get component() {
		throw new Error("<AutoAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component(value) {
		throw new Error("<AutoAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getElement() {
		return this.$$.ctx[9];
	}

	set getElement(value) {
		throw new Error("<AutoAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/demo/top-app-bar/iframe.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/top-app-bar/iframe.svelte";

// (4:6) <IconButton class="material-icons">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("menu");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "menu");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(4:6) <IconButton class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (5:6) <Title>
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*title*/ ctx[4]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*title*/ ctx[4]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 16) set_data_dev(t, /*title*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(5:6) <Title>",
		ctx
	});

	return block;
}

// (3:4) <Section>
function create_default_slot_7(ctx) {
	let iconbutton;
	let t;
	let title_1;
	let current;

	iconbutton = new IconButton({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	title_1 = new Title({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
			t = space();
			create_component(title_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(title_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(title_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const title_1_changes = {};

			if (dirty & /*$$scope, title*/ 2064) {
				title_1_changes.$$scope = { dirty, ctx };
			}

			title_1.$set(title_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(title_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(title_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
			if (detaching) detach_dev(t);
			destroy_component(title_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(3:4) <Section>",
		ctx
	});

	return block;
}

// (8:6) <IconButton class="material-icons" aria-label="Download"         >
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("file_download");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "file_download");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(8:6) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Download\\\"         >",
		ctx
	});

	return block;
}

// (11:6) {#if variant !== 'short'}
function create_if_block_1(ctx) {
	let iconbutton0;
	let t;
	let iconbutton1;
	let current;

	iconbutton0 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Print this page",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Bookmark this page",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t = space();
			create_component(iconbutton1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbutton0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(iconbutton1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(iconbutton1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(iconbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(11:6) {#if variant !== 'short'}",
		ctx
	});

	return block;
}

// (12:8) <IconButton class="material-icons" aria-label="Print this page"           >
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("print");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "print");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(12:8) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Print this page\\\"           >",
		ctx
	});

	return block;
}

// (15:8) <IconButton class="material-icons" aria-label="Bookmark this page"           >
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("bookmark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "bookmark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(15:8) <IconButton class=\\\"material-icons\\\" aria-label=\\\"Bookmark this page\\\"           >",
		ctx
	});

	return block;
}

// (7:4) <Section align="end" toolbar>
function create_default_slot_3(ctx) {
	let iconbutton;
	let t;
	let if_block_anchor;
	let current;

	iconbutton = new IconButton({
			props: {
				class: "material-icons",
				"aria-label": "Download",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*variant*/ ctx[2] !== "short" && create_if_block_1(ctx);

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			claim_component(iconbutton.$$.fragment, nodes);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);

			if (/*variant*/ ctx[2] !== "short") {
				if (if_block) {
					if (dirty & /*variant*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(7:4) <Section align=\\\"end\\\" toolbar>",
		ctx
	});

	return block;
}

// (2:2) <Row>
function create_default_slot_2(ctx) {
	let section0;
	let t;
	let section1;
	let current;

	section0 = new Section({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	section1 = new Section({
			props: {
				align: "end",
				toolbar: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(section0.$$.fragment);
			t = space();
			create_component(section1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(section0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(section1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(section0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(section1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const section0_changes = {};

			if (dirty & /*$$scope, title*/ 2064) {
				section0_changes.$$scope = { dirty, ctx };
			}

			section0.$set(section0_changes);
			const section1_changes = {};

			if (dirty & /*$$scope, variant*/ 2052) {
				section1_changes.$$scope = { dirty, ctx };
			}

			section1.$set(section1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(section0.$$.fragment, local);
			transition_in(section1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(section0.$$.fragment, local);
			transition_out(section1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(section0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(section1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(2:2) <Row>",
		ctx
	});

	return block;
}

// (1:0) <TopAppBar bind:this={topAppBar} {dense} {prominent} {variant} bind:collapsed>
function create_default_slot_1(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope, variant, title*/ 2068) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(1:0) <TopAppBar bind:this={topAppBar} {dense} {prominent} {variant} bind:collapsed>",
		ctx
	});

	return block;
}

// (23:2) {#if shortAlwaysCollapsed}
function create_if_block(ctx) {
	let h5;
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text("Short, Always Collapsed");
			this.h();
		},
		l: function claim(nodes) {
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t = claim_text(h5_nodes, "Short, Always Collapsed");
			h5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file, 23, 4, 711);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(23:2) {#if shortAlwaysCollapsed}",
		ctx
	});

	return block;
}

// (22:0) <AutoAdjust {topAppBar}>
function create_default_slot(ctx) {
	let t0;
	let loremipsum;
	let t1;
	let img;
	let img_src_value;
	let current;
	let if_block = /*shortAlwaysCollapsed*/ ctx[5] && create_if_block(ctx);
	loremipsum = new LoremIpsum({ $$inline: true });

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			create_component(loremipsum.$$.fragment);
			t1 = space();
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_space(nodes);
			claim_component(loremipsum.$$.fragment, nodes);
			t1 = claim_space(nodes);
			img = claim_element(nodes, "IMG", { alt: true, src: true, style: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", "Page content placeholder");
			if (img.src !== (img_src_value = "/page-content.jpg")) attr_dev(img, "src", img_src_value);
			set_style(img, "display", "block");
			set_style(img, "max-width", "100%");
			set_style(img, "height", "auto");
			set_style(img, "margin", "1em auto");
			add_location(img, file, 26, 2, 771);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(loremipsum, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, img, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*shortAlwaysCollapsed*/ ctx[5]) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loremipsum.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loremipsum.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			destroy_component(loremipsum, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(22:0) <AutoAdjust {topAppBar}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let topappbar;
	let updating_collapsed;
	let t;
	let autoadjust;
	let current;

	function topappbar_collapsed_binding(value) {
		/*topappbar_collapsed_binding*/ ctx[9](value);
	}

	let topappbar_props = {
		dense: /*dense*/ ctx[0],
		prominent: /*prominent*/ ctx[1],
		variant: /*variant*/ ctx[2],
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*collapsed*/ ctx[3] !== void 0) {
		topappbar_props.collapsed = /*collapsed*/ ctx[3];
	}

	topappbar = new TopAppBar({ props: topappbar_props, $$inline: true });
	/*topappbar_binding*/ ctx[8](topappbar);
	binding_callbacks.push(() => bind(topappbar, "collapsed", topappbar_collapsed_binding));

	autoadjust = new AutoAdjust({
			props: {
				topAppBar: /*topAppBar*/ ctx[6],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(topappbar.$$.fragment);
			t = space();
			create_component(autoadjust.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(topappbar.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(autoadjust.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(topappbar, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(autoadjust, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const topappbar_changes = {};
			if (dirty & /*dense*/ 1) topappbar_changes.dense = /*dense*/ ctx[0];
			if (dirty & /*prominent*/ 2) topappbar_changes.prominent = /*prominent*/ ctx[1];
			if (dirty & /*variant*/ 4) topappbar_changes.variant = /*variant*/ ctx[2];

			if (dirty & /*$$scope, variant, title*/ 2068) {
				topappbar_changes.$$scope = { dirty, ctx };
			}

			if (!updating_collapsed && dirty & /*collapsed*/ 8) {
				updating_collapsed = true;
				topappbar_changes.collapsed = /*collapsed*/ ctx[3];
				add_flush_callback(() => updating_collapsed = false);
			}

			topappbar.$set(topappbar_changes);
			const autoadjust_changes = {};
			if (dirty & /*topAppBar*/ 64) autoadjust_changes.topAppBar = /*topAppBar*/ ctx[6];

			if (dirty & /*$$scope, shortAlwaysCollapsed*/ 2080) {
				autoadjust_changes.$$scope = { dirty, ctx };
			}

			autoadjust.$set(autoadjust_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(topappbar.$$.fragment, local);
			transition_in(autoadjust.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(topappbar.$$.fragment, local);
			transition_out(autoadjust.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			/*topappbar_binding*/ ctx[8](null);
			destroy_component(topappbar, detaching);
			if (detaching) detach_dev(t);
			destroy_component(autoadjust, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $page;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Iframe", slots, []);
	const { page } = stores$1();
	validate_store(page, "page");
	component_subscribe($$self, page, value => $$invalidate(10, $page = value));
	let dense = false;
	let prominent = false;
	let variant = "standard";
	let collapsed = false;
	let title = "Standard";
	let shortAlwaysCollapsed = false;
	let topAppBar;

	switch ($page.query.style) {
		case "fixed":
			variant = "fixed";
			title = "Fixed";
			break;
		case "dense":
			dense = true;
			title = "Dense";
			break;
		case "prominent":
			prominent = true;
			title = "Prominent";
			break;
		case "short":
			variant = "short";
			title = "Short";
			break;
		case "short-closed":
			shortAlwaysCollapsed = true;
			variant = "short";
			collapsed = true;
			title = "Short";
			break;
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Iframe> was created with unknown prop '${key}'`);
	});

	function topappbar_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			topAppBar = $$value;
			$$invalidate(6, topAppBar);
		});
	}

	function topappbar_collapsed_binding(value) {
		collapsed = value;
		$$invalidate(3, collapsed);
	}

	$$self.$capture_state = () => ({
		stores: stores$1,
		TopAppBar,
		Row,
		Section,
		Title,
		AutoAdjust,
		IconButton,
		LoremIpsum,
		page,
		dense,
		prominent,
		variant,
		collapsed,
		title,
		shortAlwaysCollapsed,
		topAppBar,
		$page
	});

	$$self.$inject_state = $$props => {
		if ("dense" in $$props) $$invalidate(0, dense = $$props.dense);
		if ("prominent" in $$props) $$invalidate(1, prominent = $$props.prominent);
		if ("variant" in $$props) $$invalidate(2, variant = $$props.variant);
		if ("collapsed" in $$props) $$invalidate(3, collapsed = $$props.collapsed);
		if ("title" in $$props) $$invalidate(4, title = $$props.title);
		if ("shortAlwaysCollapsed" in $$props) $$invalidate(5, shortAlwaysCollapsed = $$props.shortAlwaysCollapsed);
		if ("topAppBar" in $$props) $$invalidate(6, topAppBar = $$props.topAppBar);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		dense,
		prominent,
		variant,
		collapsed,
		title,
		shortAlwaysCollapsed,
		topAppBar,
		page,
		topappbar_binding,
		topappbar_collapsed_binding
	];
}

class Iframe extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Iframe",
			options,
			id: create_fragment.name
		});
	}
}

export default Iframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
