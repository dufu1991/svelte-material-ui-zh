import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, au as Wrapper, v as validate_slots, at as Tooltip$1, C as CommonIcon, a6 as binding_callbacks, ak as bind, p as element, q as create_component, o as space, t as text, x as claim_element, y as children, A as claim_component, w as claim_space, u as detach_dev, z as claim_text, E as attr_dev, B as set_style, D as add_location, F as insert_dev, H as mount_component, G as append_dev, aw as set_data_dev, J as transition_in, K as transition_out, M as destroy_component, al as add_flush_callback, b6 as Title, b7 as Content, b8 as Link, b9 as RichActions, r as query_selector_all } from './client.ec94238b.js';
import { D as Demo } from './Demo.9c515360.js';
import { B as Button_1 } from './Button.d66ce348.js';
import { F as Fab } from './Fab.5ce9de7b.js';
import { C as Checkbox } from './Checkbox.52871e38.js';
import { R as Radio } from './Radio.52add3e3.js';
import { C as CommonLabel } from './CommonLabel.e3297b41.js';
import { C as CommonLabel$1 } from './CommonLabel.6290f478.js';

/* src/routes/demo/tooltip/_Simple.svelte generated by Svelte v3.37.0 */
const file$3 = "src/routes/demo/tooltip/_Simple.svelte";

// (11:6) <Label>
function create_default_slot_17$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17$2.name,
		type: "slot",
		source: "(11:6) <Label>",
		ctx
	});

	return block;
}

// (10:4) <Button on:click={() => clicked++}>
function create_default_slot_16$2(ctx) {
	let label;
	let current;

	label = new CommonLabel({
			props: {
				$$slots: { default: [create_default_slot_17$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 256) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16$2.name,
		type: "slot",
		source: "(10:4) <Button on:click={() => clicked++}>",
		ctx
	});

	return block;
}

// (17:4) <Tooltip>
function create_default_slot_15$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a button.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a button.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15$2.name,
		type: "slot",
		source: "(17:4) <Tooltip>",
		ctx
	});

	return block;
}

// (9:2) <Wrapper>
function create_default_slot_14$2(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot_16$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[3]);

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_15$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14$2.name,
		type: "slot",
		source: "(9:2) <Wrapper>",
		ctx
	});

	return block;
}

// (22:6) <Icon class="material-icons">
function create_default_slot_13$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("favorite");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "favorite");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13$2.name,
		type: "slot",
		source: "(22:6) <Icon class=\\\"material-icons\\\">",
		ctx
	});

	return block;
}

// (21:4) <Fab on:click={() => clicked++} mini>
function create_default_slot_12$2(ctx) {
	let icon;
	let current;

	icon = new CommonIcon({
			props: {
				class: "material-icons",
				$$slots: { default: [create_default_slot_13$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};

			if (dirty & /*$$scope*/ 256) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12$2.name,
		type: "slot",
		source: "(21:4) <Fab on:click={() => clicked++} mini>",
		ctx
	});

	return block;
}

// (24:4) <Tooltip>
function create_default_slot_11$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a FAB.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a FAB.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11$2.name,
		type: "slot",
		source: "(24:4) <Tooltip>",
		ctx
	});

	return block;
}

// (20:2) <Wrapper>
function create_default_slot_10$2(ctx) {
	let fab;
	let t;
	let tooltip;
	let current;

	fab = new Fab({
			props: {
				mini: true,
				$$slots: { default: [create_default_slot_12$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	fab.$on("click", /*click_handler_1*/ ctx[4]);

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_11$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fab.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fab.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fab, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fab_changes = {};

			if (dirty & /*$$scope*/ 256) {
				fab_changes.$$scope = { dirty, ctx };
			}

			fab.$set(fab_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fab.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fab.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fab, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10$2.name,
		type: "slot",
		source: "(20:2) <Wrapper>",
		ctx
	});

	return block;
}

// (29:4) <Tooltip>
function create_default_slot_9$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a checkbox.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a checkbox.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$2.name,
		type: "slot",
		source: "(29:4) <Tooltip>",
		ctx
	});

	return block;
}

// (27:2) <Wrapper>
function create_default_slot_8$2(ctx) {
	let checkbox;
	let updating_checked;
	let t;
	let tooltip;
	let current;

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[5](value);
	}

	let checkbox_props = {};

	if (/*checked*/ ctx[1] !== void 0) {
		checkbox_props.checked = /*checked*/ ctx[1];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_9$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkbox.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = {};

			if (!updating_checked && dirty & /*checked*/ 2) {
				updating_checked = true;
				checkbox_changes.checked = /*checked*/ ctx[1];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$2.name,
		type: "slot",
		source: "(27:2) <Wrapper>",
		ctx
	});

	return block;
}

// (34:4) <Tooltip>
function create_default_slot_7$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a radio button.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a radio button.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$2.name,
		type: "slot",
		source: "(34:4) <Tooltip>",
		ctx
	});

	return block;
}

// (32:2) <Wrapper>
function create_default_slot_6$2(ctx) {
	let radio;
	let updating_group;
	let t;
	let tooltip;
	let current;

	function radio_group_binding(value) {
		/*radio_group_binding*/ ctx[6](value);
	}

	let radio_props = { value: "on" };

	if (/*selected*/ ctx[2] !== void 0) {
		radio_props.group = /*selected*/ ctx[2];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding));

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_7$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*selected*/ 4) {
				updating_group = true;
				radio_changes.group = /*selected*/ ctx[2];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$2.name,
		type: "slot",
		source: "(32:2) <Wrapper>",
		ctx
	});

	return block;
}

// (39:4) <Tooltip>
function create_default_slot_5$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on another radio button.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on another radio button.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$2.name,
		type: "slot",
		source: "(39:4) <Tooltip>",
		ctx
	});

	return block;
}

// (37:2) <Wrapper>
function create_default_slot_4$2(ctx) {
	let radio;
	let updating_group;
	let t;
	let tooltip;
	let current;

	function radio_group_binding_1(value) {
		/*radio_group_binding_1*/ ctx[7](value);
	}

	let radio_props = { value: "off" };

	if (/*selected*/ ctx[2] !== void 0) {
		radio_props.group = /*selected*/ ctx[2];
	}

	radio = new Radio({ props: radio_props, $$inline: true });
	binding_callbacks.push(() => bind(radio, "group", radio_group_binding_1));

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_5$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(radio.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radio.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radio, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radio_changes = {};

			if (!updating_group && dirty & /*selected*/ 4) {
				updating_group = true;
				radio_changes.group = /*selected*/ ctx[2];
				add_flush_callback(() => updating_group = false);
			}

			radio.$set(radio_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radio.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radio.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radio, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$2.name,
		type: "slot",
		source: "(37:2) <Wrapper>",
		ctx
	});

	return block;
}

// (50:4) <Tooltip unbounded>
function create_default_slot_3$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a span.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a span.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(50:4) <Tooltip unbounded>",
		ctx
	});

	return block;
}

// (42:2) <Wrapper>
function create_default_slot_2$2(ctx) {
	let span;
	let t0;
	let t1;
	let tooltip;
	let current;

	tooltip = new Tooltip$1({
			props: {
				unbounded: true,
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("I'm a span element.");
			t1 = space();
			create_component(tooltip.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { tabindex: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "I'm a span element.");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "tabindex", "0");
			add_location(span, file$3, 42, 4, 989);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(42:2) <Wrapper>",
		ctx
	});

	return block;
}

// (66:2) <Tooltip>
function create_default_slot_1$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip on a div.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip on a div.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(66:2) <Tooltip>",
		ctx
	});

	return block;
}

// (54:0) <Wrapper>
function create_default_slot$3(ctx) {
	let div;
	let t0;
	let t1;
	let tooltip;
	let current;

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("I'm a div element.");
			t1 = space();
			create_component(tooltip.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { tabindex: true, style: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "I'm a div element.");
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "tabindex", "0");
			set_style(div, "background-color", "var(--mdc-theme-secondary)");
			set_style(div, "color", "var(--mdc-theme-on-secondary)");
			set_style(div, "padding", "10px");
			add_location(div, file$3, 54, 2, 1327);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			insert_dev(target, t1, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 256) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(54:0) <Wrapper>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let wrapper0;
	let t0;
	let wrapper1;
	let t1;
	let wrapper2;
	let t2;
	let wrapper3;
	let t3;
	let wrapper4;
	let t4;
	let wrapper5;
	let t5;
	let wrapper6;
	let t6;
	let pre;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let current;

	wrapper0 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_14$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper1 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_10$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper2 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_8$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper3 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_6$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper4 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_4$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper5 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper6 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(wrapper0.$$.fragment);
			t0 = space();
			create_component(wrapper1.$$.fragment);
			t1 = space();
			create_component(wrapper2.$$.fragment);
			t2 = space();
			create_component(wrapper3.$$.fragment);
			t3 = space();
			create_component(wrapper4.$$.fragment);
			t4 = space();
			create_component(wrapper5.$$.fragment);
			t5 = space();
			create_component(wrapper6.$$.fragment);
			t6 = space();
			pre = element("pre");
			t7 = text("Clicked: ");
			t8 = text(/*clicked*/ ctx[0]);
			t9 = text(", Checked: ");
			t10 = text(/*checked*/ ctx[1]);
			t11 = text(", Selected: ");
			t12 = text(/*selected*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			claim_component(wrapper0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(wrapper1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(wrapper2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(wrapper3.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(wrapper4.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(wrapper5.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			claim_component(wrapper6.$$.fragment, nodes);
			t6 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t7 = claim_text(pre_nodes, "Clicked: ");
			t8 = claim_text(pre_nodes, /*clicked*/ ctx[0]);
			t9 = claim_text(pre_nodes, ", Checked: ");
			t10 = claim_text(pre_nodes, /*checked*/ ctx[1]);
			t11 = claim_text(pre_nodes, ", Selected: ");
			t12 = claim_text(pre_nodes, /*selected*/ ctx[2]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container svelte-1rrzv9x");
			set_style(div, "display", "flex");
			set_style(div, "flex-wrap", "wrap");
			set_style(div, "align-items", "center");
			add_location(div, file$3, 0, 0, 0);
			attr_dev(pre, "class", "status");
			add_location(pre, file$3, 68, 0, 1688);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(wrapper0, div, null);
			append_dev(div, t0);
			mount_component(wrapper1, div, null);
			append_dev(div, t1);
			mount_component(wrapper2, div, null);
			append_dev(div, t2);
			mount_component(wrapper3, div, null);
			append_dev(div, t3);
			mount_component(wrapper4, div, null);
			append_dev(div, t4);
			mount_component(wrapper5, div, null);
			insert_dev(target, t5, anchor);
			mount_component(wrapper6, target, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t7);
			append_dev(pre, t8);
			append_dev(pre, t9);
			append_dev(pre, t10);
			append_dev(pre, t11);
			append_dev(pre, t12);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const wrapper0_changes = {};

			if (dirty & /*$$scope, clicked*/ 257) {
				wrapper0_changes.$$scope = { dirty, ctx };
			}

			wrapper0.$set(wrapper0_changes);
			const wrapper1_changes = {};

			if (dirty & /*$$scope, clicked*/ 257) {
				wrapper1_changes.$$scope = { dirty, ctx };
			}

			wrapper1.$set(wrapper1_changes);
			const wrapper2_changes = {};

			if (dirty & /*$$scope, checked*/ 258) {
				wrapper2_changes.$$scope = { dirty, ctx };
			}

			wrapper2.$set(wrapper2_changes);
			const wrapper3_changes = {};

			if (dirty & /*$$scope, selected*/ 260) {
				wrapper3_changes.$$scope = { dirty, ctx };
			}

			wrapper3.$set(wrapper3_changes);
			const wrapper4_changes = {};

			if (dirty & /*$$scope, selected*/ 260) {
				wrapper4_changes.$$scope = { dirty, ctx };
			}

			wrapper4.$set(wrapper4_changes);
			const wrapper5_changes = {};

			if (dirty & /*$$scope*/ 256) {
				wrapper5_changes.$$scope = { dirty, ctx };
			}

			wrapper5.$set(wrapper5_changes);
			const wrapper6_changes = {};

			if (dirty & /*$$scope*/ 256) {
				wrapper6_changes.$$scope = { dirty, ctx };
			}

			wrapper6.$set(wrapper6_changes);
			if (!current || dirty & /*clicked*/ 1) set_data_dev(t8, /*clicked*/ ctx[0]);
			if (!current || dirty & /*checked*/ 2) set_data_dev(t10, /*checked*/ ctx[1]);
			if (!current || dirty & /*selected*/ 4) set_data_dev(t12, /*selected*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(wrapper0.$$.fragment, local);
			transition_in(wrapper1.$$.fragment, local);
			transition_in(wrapper2.$$.fragment, local);
			transition_in(wrapper3.$$.fragment, local);
			transition_in(wrapper4.$$.fragment, local);
			transition_in(wrapper5.$$.fragment, local);
			transition_in(wrapper6.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(wrapper0.$$.fragment, local);
			transition_out(wrapper1.$$.fragment, local);
			transition_out(wrapper2.$$.fragment, local);
			transition_out(wrapper3.$$.fragment, local);
			transition_out(wrapper4.$$.fragment, local);
			transition_out(wrapper5.$$.fragment, local);
			transition_out(wrapper6.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(wrapper0);
			destroy_component(wrapper1);
			destroy_component(wrapper2);
			destroy_component(wrapper3);
			destroy_component(wrapper4);
			destroy_component(wrapper5);
			if (detaching) detach_dev(t5);
			destroy_component(wrapper6, detaching);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Simple", slots, []);
	let clicked = 0;
	let checked = false;
	let selected = "on";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Simple> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, clicked++, clicked);
	const click_handler_1 = () => $$invalidate(0, clicked++, clicked);

	function checkbox_checked_binding(value) {
		checked = value;
		$$invalidate(1, checked);
	}

	function radio_group_binding(value) {
		selected = value;
		$$invalidate(2, selected);
	}

	function radio_group_binding_1(value) {
		selected = value;
		$$invalidate(2, selected);
	}

	$$self.$capture_state = () => ({
		Tooltip: Tooltip$1,
		Wrapper,
		Button: Button_1,
		Fab,
		Checkbox,
		Radio,
		Label: CommonLabel,
		Icon: CommonIcon,
		clicked,
		checked,
		selected
	});

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
		if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
		if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		clicked,
		checked,
		selected,
		click_handler,
		click_handler_1,
		checkbox_checked_binding,
		radio_group_binding,
		radio_group_binding_1
	];
}

class Simple extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Simple",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/demo/tooltip/_Positioning.svelte generated by Svelte v3.37.0 */
const file$2 = "src/routes/demo/tooltip/_Positioning.svelte";

// (4:6) <Label>
function create_default_slot_23(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("X Position: Start");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "X Position: Start");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(4:6) <Label>",
		ctx
	});

	return block;
}

// (3:4) <Button touch>
function create_default_slot_22(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(3:4) <Button touch>",
		ctx
	});

	return block;
}

// (6:4) <Tooltip xPos="start">
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(6:4) <Tooltip xPos=\\\"start\\\">",
		ctx
	});

	return block;
}

// (2:2) <Wrapper>
function create_default_slot_20(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				xPos: "start",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(2:2) <Wrapper>",
		ctx
	});

	return block;
}

// (11:6) <Label>
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("X Position: Center");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "X Position: Center");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(11:6) <Label>",
		ctx
	});

	return block;
}

// (10:4) <Button touch>
function create_default_slot_18$1(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18$1.name,
		type: "slot",
		source: "(10:4) <Button touch>",
		ctx
	});

	return block;
}

// (14:4) <Tooltip xPos="center">
function create_default_slot_17$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17$1.name,
		type: "slot",
		source: "(14:4) <Tooltip xPos=\\\"center\\\">",
		ctx
	});

	return block;
}

// (9:2) <Wrapper>
function create_default_slot_16$1(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_18$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				xPos: "center",
				$$slots: { default: [create_default_slot_17$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16$1.name,
		type: "slot",
		source: "(9:2) <Wrapper>",
		ctx
	});

	return block;
}

// (19:6) <Label>
function create_default_slot_15$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("X Position: End");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "X Position: End");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15$1.name,
		type: "slot",
		source: "(19:6) <Label>",
		ctx
	});

	return block;
}

// (18:4) <Button touch>
function create_default_slot_14$1(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_15$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14$1.name,
		type: "slot",
		source: "(18:4) <Button touch>",
		ctx
	});

	return block;
}

// (21:4) <Tooltip xPos="end">
function create_default_slot_13$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13$1.name,
		type: "slot",
		source: "(21:4) <Tooltip xPos=\\\"end\\\">",
		ctx
	});

	return block;
}

// (17:2) <Wrapper>
function create_default_slot_12$1(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_14$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				xPos: "end",
				$$slots: { default: [create_default_slot_13$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12$1.name,
		type: "slot",
		source: "(17:2) <Wrapper>",
		ctx
	});

	return block;
}

// (26:6) <Label>
function create_default_slot_11$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Y Position: Above");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Y Position: Above");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11$1.name,
		type: "slot",
		source: "(26:6) <Label>",
		ctx
	});

	return block;
}

// (25:4) <Button touch>
function create_default_slot_10$1(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_11$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10$1.name,
		type: "slot",
		source: "(25:4) <Button touch>",
		ctx
	});

	return block;
}

// (28:4) <Tooltip yPos="above">
function create_default_slot_9$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$1.name,
		type: "slot",
		source: "(28:4) <Tooltip yPos=\\\"above\\\">",
		ctx
	});

	return block;
}

// (24:2) <Wrapper>
function create_default_slot_8$1(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_10$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				yPos: "above",
				$$slots: { default: [create_default_slot_9$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$1.name,
		type: "slot",
		source: "(24:2) <Wrapper>",
		ctx
	});

	return block;
}

// (33:6) <Label>
function create_default_slot_7$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Y Position: Below");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Y Position: Below");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$1.name,
		type: "slot",
		source: "(33:6) <Label>",
		ctx
	});

	return block;
}

// (32:4) <Button touch>
function create_default_slot_6$1(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_7$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$1.name,
		type: "slot",
		source: "(32:4) <Button touch>",
		ctx
	});

	return block;
}

// (35:4) <Tooltip yPos="below">
function create_default_slot_5$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$1.name,
		type: "slot",
		source: "(35:4) <Tooltip yPos=\\\"below\\\">",
		ctx
	});

	return block;
}

// (31:2) <Wrapper>
function create_default_slot_4$1(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_6$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				yPos: "below",
				$$slots: { default: [create_default_slot_5$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(31:2) <Wrapper>",
		ctx
	});

	return block;
}

// (40:6) <Label>
function create_default_slot_3$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("X Position: Start, Y Position: Above");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "X Position: Start, Y Position: Above");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(40:6) <Label>",
		ctx
	});

	return block;
}

// (39:4) <Button touch>
function create_default_slot_2$1(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 1) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(39:4) <Button touch>",
		ctx
	});

	return block;
}

// (42:4) <Tooltip xPos="start" yPos="above">
function create_default_slot_1$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltip.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(42:4) <Tooltip xPos=\\\"start\\\" yPos=\\\"above\\\">",
		ctx
	});

	return block;
}

// (38:2) <Wrapper>
function create_default_slot$2(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tooltip = new Tooltip$1({
			props: {
				xPos: "start",
				yPos: "above",
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 1) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(38:2) <Wrapper>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let wrapper0;
	let t0;
	let wrapper1;
	let t1;
	let wrapper2;
	let t2;
	let wrapper3;
	let t3;
	let wrapper4;
	let t4;
	let wrapper5;
	let current;

	wrapper0 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper1 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_16$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper2 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_12$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper3 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_8$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper4 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper5 = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(wrapper0.$$.fragment);
			t0 = space();
			create_component(wrapper1.$$.fragment);
			t1 = space();
			create_component(wrapper2.$$.fragment);
			t2 = space();
			create_component(wrapper3.$$.fragment);
			t3 = space();
			create_component(wrapper4.$$.fragment);
			t4 = space();
			create_component(wrapper5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(wrapper0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(wrapper1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(wrapper2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(wrapper3.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(wrapper4.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(wrapper5.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "display", "flex");
			set_style(div, "flex-wrap", "wrap");
			set_style(div, "align-items", "center");
			add_location(div, file$2, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(wrapper0, div, null);
			append_dev(div, t0);
			mount_component(wrapper1, div, null);
			append_dev(div, t1);
			mount_component(wrapper2, div, null);
			append_dev(div, t2);
			mount_component(wrapper3, div, null);
			append_dev(div, t3);
			mount_component(wrapper4, div, null);
			append_dev(div, t4);
			mount_component(wrapper5, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const wrapper0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper0_changes.$$scope = { dirty, ctx };
			}

			wrapper0.$set(wrapper0_changes);
			const wrapper1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper1_changes.$$scope = { dirty, ctx };
			}

			wrapper1.$set(wrapper1_changes);
			const wrapper2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper2_changes.$$scope = { dirty, ctx };
			}

			wrapper2.$set(wrapper2_changes);
			const wrapper3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper3_changes.$$scope = { dirty, ctx };
			}

			wrapper3.$set(wrapper3_changes);
			const wrapper4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper4_changes.$$scope = { dirty, ctx };
			}

			wrapper4.$set(wrapper4_changes);
			const wrapper5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				wrapper5_changes.$$scope = { dirty, ctx };
			}

			wrapper5.$set(wrapper5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(wrapper0.$$.fragment, local);
			transition_in(wrapper1.$$.fragment, local);
			transition_in(wrapper2.$$.fragment, local);
			transition_in(wrapper3.$$.fragment, local);
			transition_in(wrapper4.$$.fragment, local);
			transition_in(wrapper5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(wrapper0.$$.fragment, local);
			transition_out(wrapper1.$$.fragment, local);
			transition_out(wrapper2.$$.fragment, local);
			transition_out(wrapper3.$$.fragment, local);
			transition_out(wrapper4.$$.fragment, local);
			transition_out(wrapper5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(wrapper0);
			destroy_component(wrapper1);
			destroy_component(wrapper2);
			destroy_component(wrapper3);
			destroy_component(wrapper4);
			destroy_component(wrapper5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Positioning", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Positioning> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Tooltip: Tooltip$1, Wrapper, Button: Button_1, Label: CommonLabel$1 });
	return [];
}

class Positioning extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Positioning",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/demo/tooltip/_Rich.svelte generated by Svelte v3.37.0 */
const file$1 = "src/routes/demo/tooltip/_Rich.svelte";

// (8:6) <Label>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Rich Tooltip");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Rich Tooltip");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(8:6) <Label>",
		ctx
	});

	return block;
}

// (7:4) <Button on:click={() => clicked++} touch>
function create_default_slot_17(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 16) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(7:4) <Button on:click={() => clicked++} touch>",
		ctx
	});

	return block;
}

// (15:6) <Content>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A rich tooltip can provide a lot more information than a regular toolip.\n        It is sized appropriately for a large amount of content.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A rich tooltip can provide a lot more information than a regular toolip.\n        It is sized appropriately for a large amount of content.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(15:6) <Content>",
		ctx
	});

	return block;
}

// (14:4) <Tooltip>
function create_default_slot_15(ctx) {
	let content;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const content_changes = {};

			if (dirty & /*$$scope*/ 16) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(14:4) <Tooltip>",
		ctx
	});

	return block;
}

// (6:2) <Wrapper rich>
function create_default_slot_14(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[1]);

	tooltip = new Tooltip$1({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 16) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(6:2) <Wrapper rich>",
		ctx
	});

	return block;
}

// (24:6) <Label>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Interactive Rich Tooltip");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Interactive Rich Tooltip");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(24:6) <Label>",
		ctx
	});

	return block;
}

// (23:4) <Button on:click={() => clicked++} touch>
function create_default_slot_12(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 16) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(23:4) <Button on:click={() => clicked++} touch>",
		ctx
	});

	return block;
}

// (27:6) <Title>
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("With a Title!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "With a Title!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(27:6) <Title>",
		ctx
	});

	return block;
}

// (29:45) <Link           href="http://example.com"           target="_blank">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("links");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "links");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(29:45) <Link           href=\\\"http://example.com\\\"           target=\\\"_blank\\\">",
		ctx
	});

	return block;
}

// (28:6) <Content>
function create_default_slot_9(ctx) {
	let t0;
	let link;
	let t1;
	let current;

	link = new Link({
			props: {
				href: "http://example.com",
				target: "_blank",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text("An interactive rich tooltip can have ");
			create_component(link.$$.fragment);
			t1 = text(" and actions.");
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "An interactive rich tooltip can have ");
			claim_component(link.$$.fragment, nodes);
			t1 = claim_text(nodes, " and actions.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(link, target, anchor);
			insert_dev(target, t1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const link_changes = {};

			if (dirty & /*$$scope*/ 16) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(link, detaching);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(28:6) <Content>",
		ctx
	});

	return block;
}

// (35:43) <Label>
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(35:43) <Label>",
		ctx
	});

	return block;
}

// (35:8) <Button on:click={() => clicked++}>
function create_default_slot_7(ctx) {
	let label;
	let current;

	label = new CommonLabel$1({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(label.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_changes = {};

			if (dirty & /*$$scope*/ 16) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(35:8) <Button on:click={() => clicked++}>",
		ctx
	});

	return block;
}

// (34:6) <RichActions>
function create_default_slot_6(ctx) {
	let button;
	let current;

	button = new Button_1({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_2*/ ctx[3]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(34:6) <RichActions>",
		ctx
	});

	return block;
}

// (26:4) <Tooltip interactive>
function create_default_slot_5(ctx) {
	let title;
	let t0;
	let content;
	let t1;
	let richactions;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	richactions = new RichActions({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t0 = space();
			create_component(content.$$.fragment);
			t1 = space();
			create_component(richactions.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(richactions.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(content, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(richactions, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 16) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 16) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
			const richactions_changes = {};

			if (dirty & /*$$scope, clicked*/ 17) {
				richactions_changes.$$scope = { dirty, ctx };
			}

			richactions.$set(richactions_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			transition_in(richactions.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			transition_out(richactions.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(content, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(richactions, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(26:4) <Tooltip interactive>",
		ctx
	});

	return block;
}

// (22:2) <Wrapper rich>
function create_default_slot_4(ctx) {
	let button;
	let t;
	let tooltip;
	let current;

	button = new Button_1({
			props: {
				touch: true,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_1*/ ctx[2]);

	tooltip = new Tooltip$1({
			props: {
				interactive: true,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(tooltip.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const tooltip_changes = {};

			if (dirty & /*$$scope, clicked*/ 17) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(22:2) <Wrapper rich>",
		ctx
	});

	return block;
}

// (43:6) <Title>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("With a Title!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "With a Title!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(43:6) <Title>",
		ctx
	});

	return block;
}

// (44:6) <Content>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("A persistent rich tooltip shows up when you click or press enter/space\n        bar on an element and goes away when you activate it again or it loses\n        focus. Great for informational popups on those little \"i\" icons.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "A persistent rich tooltip shows up when you click or press enter/space\n        bar on an element and goes away when you activate it again or it loses\n        focus. Great for informational popups on those little \"i\" icons.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(44:6) <Content>",
		ctx
	});

	return block;
}

// (42:4) <Tooltip persistent>
function create_default_slot_1$1(ctx) {
	let title;
	let t;
	let content;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t = space();
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(title.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(content.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(title, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 16) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 16) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title, detaching);
			if (detaching) detach_dev(t);
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(42:4) <Tooltip persistent>",
		ctx
	});

	return block;
}

// (40:2) <Wrapper rich>
function create_default_slot$1(ctx) {
	let span;
	let t0;
	let t1;
	let tooltip;
	let current;

	tooltip = new Tooltip$1({
			props: {
				persistent: true,
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("Persistent Rich Tooltip (Click Me)");
			t1 = space();
			create_component(tooltip.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { role: true, tabindex: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Persistent Rich Tooltip (Click Me)");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(tooltip.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "role", "button");
			attr_dev(span, "tabindex", "0");
			add_location(span, file$1, 40, 4, 1098);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(tooltip, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tooltip_changes = {};

			if (dirty & /*$$scope*/ 16) {
				tooltip_changes.$$scope = { dirty, ctx };
			}

			tooltip.$set(tooltip_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltip.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tooltip.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(tooltip, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(40:2) <Wrapper rich>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let wrapper0;
	let t0;
	let wrapper1;
	let t1;
	let wrapper2;
	let t2;
	let pre;
	let t3;
	let t4;
	let current;

	wrapper0 = new Wrapper({
			props: {
				rich: true,
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper1 = new Wrapper({
			props: {
				rich: true,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	wrapper2 = new Wrapper({
			props: {
				rich: true,
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(wrapper0.$$.fragment);
			t0 = space();
			create_component(wrapper1.$$.fragment);
			t1 = space();
			create_component(wrapper2.$$.fragment);
			t2 = space();
			pre = element("pre");
			t3 = text("Clicked: ");
			t4 = text(/*clicked*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(wrapper0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(wrapper1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(wrapper2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t3 = claim_text(pre_nodes, "Clicked: ");
			t4 = claim_text(pre_nodes, /*clicked*/ ctx[0]);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "display", "flex");
			set_style(div, "flex-wrap", "wrap");
			set_style(div, "align-items", "center");
			add_location(div, file$1, 0, 0, 0);
			attr_dev(pre, "class", "status");
			add_location(pre, file$1, 52, 0, 1533);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(wrapper0, div, null);
			append_dev(div, t0);
			mount_component(wrapper1, div, null);
			append_dev(div, t1);
			mount_component(wrapper2, div, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t3);
			append_dev(pre, t4);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const wrapper0_changes = {};

			if (dirty & /*$$scope, clicked*/ 17) {
				wrapper0_changes.$$scope = { dirty, ctx };
			}

			wrapper0.$set(wrapper0_changes);
			const wrapper1_changes = {};

			if (dirty & /*$$scope, clicked*/ 17) {
				wrapper1_changes.$$scope = { dirty, ctx };
			}

			wrapper1.$set(wrapper1_changes);
			const wrapper2_changes = {};

			if (dirty & /*$$scope*/ 16) {
				wrapper2_changes.$$scope = { dirty, ctx };
			}

			wrapper2.$set(wrapper2_changes);
			if (!current || dirty & /*clicked*/ 1) set_data_dev(t4, /*clicked*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(wrapper0.$$.fragment, local);
			transition_in(wrapper1.$$.fragment, local);
			transition_in(wrapper2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(wrapper0.$$.fragment, local);
			transition_out(wrapper1.$$.fragment, local);
			transition_out(wrapper2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(wrapper0);
			destroy_component(wrapper1);
			destroy_component(wrapper2);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Rich", slots, []);
	let clicked = 0;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Rich> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, clicked++, clicked);
	const click_handler_1 = () => $$invalidate(0, clicked++, clicked);
	const click_handler_2 = () => $$invalidate(0, clicked++, clicked);

	$$self.$capture_state = () => ({
		Tooltip: Tooltip$1,
		Wrapper,
		Title,
		Content,
		Link,
		RichActions,
		Button: Button_1,
		Label: CommonLabel$1,
		clicked
	});

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [clicked, click_handler, click_handler_1, click_handler_2];
}

class Rich extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Rich",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/demo/tooltip/index.svelte generated by Svelte v3.37.0 */
const file = "src/routes/demo/tooltip/index.svelte";

// (13:2) <Demo component={Positioning} file="tooltip/_Positioning.svelte">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Positioning");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Positioning");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(13:2) <Demo component={Positioning} file=\\\"tooltip/_Positioning.svelte\\\">",
		ctx
	});

	return block;
}

// (15:4) <svelte:fragment slot="subtitle">
function create_subtitle_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Tooltips position themselves automatically based on proximity to the\n      viewport boundary, but you can give them a default position.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltips position themselves automatically based on proximity to the\n      viewport boundary, but you can give them a default position.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_subtitle_slot.name,
		type: "slot",
		source: "(15:4) <svelte:fragment slot=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

// (21:2) <Demo component={Rich} file="tooltip/_Rich.svelte">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Rich");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Rich");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(21:2) <Demo component={Rich} file=\\\"tooltip/_Rich.svelte\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let h2;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let pre;
	let t5;
	let t6;
	let demo0;
	let t7;
	let demo1;
	let t8;
	let demo2;
	let current;

	demo0 = new Demo({
			props: {
				component: Simple,
				file: "tooltip/_Simple.svelte"
			},
			$$inline: true
		});

	demo1 = new Demo({
			props: {
				component: Positioning,
				file: "tooltip/_Positioning.svelte",
				$$slots: {
					subtitle: [create_subtitle_slot],
					default: [create_default_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	demo2 = new Demo({
			props: {
				component: Rich,
				file: "tooltip/_Rich.svelte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			h2 = element("h2");
			t1 = text("Toolip");
			t2 = space();
			p = element("p");
			t3 = text("Or tooltip. Whatever; I can't spell.");
			t4 = space();
			pre = element("pre");
			t5 = text("npm i -D @smui/tooltip");
			t6 = space();
			create_component(demo0.$$.fragment);
			t7 = space();
			create_component(demo1.$$.fragment);
			t8 = space();
			create_component(demo2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-qf9o3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Toolip");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "Or tooltip. Whatever; I can't spell.");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			pre = claim_element(section_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t5 = claim_text(pre_nodes, "npm i -D @smui/tooltip");
			pre_nodes.forEach(detach_dev);
			t6 = claim_space(section_nodes);
			claim_component(demo0.$$.fragment, section_nodes);
			t7 = claim_space(section_nodes);
			claim_component(demo1.$$.fragment, section_nodes);
			t8 = claim_space(section_nodes);
			claim_component(demo2.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Tooltip - SMUI";
			add_location(h2, file, 5, 2, 74);
			add_location(p, file, 6, 2, 92);
			attr_dev(pre, "class", "demo-spaced");
			add_location(pre, file, 8, 2, 139);
			add_location(section, file, 4, 0, 62);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, p);
			append_dev(p, t3);
			append_dev(section, t4);
			append_dev(section, pre);
			append_dev(pre, t5);
			append_dev(section, t6);
			mount_component(demo0, section, null);
			append_dev(section, t7);
			mount_component(demo1, section, null);
			append_dev(section, t8);
			mount_component(demo2, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const demo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo1_changes.$$scope = { dirty, ctx };
			}

			demo1.$set(demo1_changes);
			const demo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				demo2_changes.$$scope = { dirty, ctx };
			}

			demo2.$set(demo2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(demo0.$$.fragment, local);
			transition_in(demo1.$$.fragment, local);
			transition_in(demo2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(demo0.$$.fragment, local);
			transition_out(demo1.$$.fragment, local);
			transition_out(demo2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(demo0);
			destroy_component(demo1);
			destroy_component(demo2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tooltip", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tooltip> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Demo, Simple, Positioning, Rich });
	return [];
}

class Tooltip extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tooltip",
			options,
			id: create_fragment.name
		});
	}
}

export default Tooltip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
